// This file is auto-generated. Do not edit!
// baka:source scss/all.scss

// #region @import "./index.import.scss"; -> scss/index.import.scss
// #region @import "./functions/index.import.scss"; -> scss/functions/index.import.scss
// #region @import "./_color.import.scss"; -> scss/functions/_color.import.scss
/// Returns the alpha channel of a color.
/// @param {Color} $color - The color to get the alpha channel for.
/// @return {Number} - The alpha channel of the color.
///
/// @example scss - Usage
///   @debug k-color-alpha( rgba( 0, 0, 0, 0.5 ) ); // => 0.5
///   @debug k-color-alpha( #000 ); // => 1
@function k-color-alpha( $color ) {
    @return alpha( $color );
}

/// Returns the red channel of a color.
/// @param {Color} $color - The color to get the red channel for.
/// @return {Number} - The red channel of the color.
///
/// @example scss - Usage
///   @debug k-color-red( #ff0000 ); // => 255
@function k-color-red( $color ) {
    @return red( $color );
}

/// Returns the green channel of a color.
/// @param {Color} $color - The color to get the green channel for.
/// @return {Number} - The green channel of the color.
///
/// @example scss - Usage
///   @debug k-color-green( #00ff00 ); // => 255
@function k-color-green( $color ) {
    @return green( $color );
}

/// Returns the blue channel of a color.
/// @param {Color} $color - The color to get the blue channel for.
/// @return {Number} - The blue channel of the color.
///
/// @example scss - Usage
///   @debug k-color-blue( #0000ff ); // => 255
@function k-color-blue( $color ) {
    @return blue( $color );
}

/// Returns the hue of a color.
/// @param {Color} $color - The color to get the hue for.
/// @return {Number} - The hue of the color.
///
/// @example scss - Usage
///   @debug k-color-hue( #e1d7d2 ); // => 20deg
@function k-color-hue( $color ) {
    @return hue( $color );
}

/// Returns the saturation of a color.
/// @param {Color} $color - The color to get the saturation for.
/// @return {Number} - The saturation of the color.
///
/// @example scss - Usage
///   @debug k-color-saturation( #e1d7d2 ); // => 20%
@function k-color-saturation( $color ) {
    @return saturation( $color );
}

/// Returns the lightness of a color.
/// @param {Color} $color - The color to get the lightness for.
/// @return {Number} - The lightness of the color.
///
/// @example scss - Usage
///   @debug k-color-lightness( #e1d7d2 ); // => 80%
@function k-color-lightness( $color ) {
    @return lightness( $color );
}

/// Returns a color that is a mix of two colors.
/// @param {Color} $color1 - The first color.
/// @param {Color} $color2 - The second color.
/// @param {Number} $weight - The weight of the first color in the mix.
/// @return {Color} - The mixed color.
///
/// @example scss - Usage
///   @debug k-color-mix( #f00, #00f ); // => #800080
@function k-color-mix( $color1, $color2, $weight: 50% ) {
    @return mix( $color1, $color2, $weight );
}

/// Makes a color darker by decreasing its lightness.
/// @param {Color} $color - The color to darken.
/// @param {Number} $amount - The amount to darken the color.
/// @return {Color} - The darkened color.
///
/// @example scss - Usage
///   @debug k-color-darken( #f00, 10% ); // => #e60000
@function k-color-darken( $color, $amount) {
    @return darken( $color, $amount );
}

/// Makes a color lighter by increasing its lightness.
/// @param {Color} $color - The color to lighten.
/// @param {Number} $amount - The amount to lighten the color.
/// @return {Color} - The lightened color.
///
/// @example scss - Usage
///   @debug k-color-lighten( #f00, 10% ); // => #ff1a1a
@function k-color-lighten( $color, $amount) {
    @return lighten( $color, $amount );
}

/// Increases or decreases the hue of a color.
/// @param {Color} $color - The color to adjust the hue for.
/// @param {Number} $degrees - The amount to adjust the hue.
/// @return {Color} - The adjusted color.
///
/// @example scss - Usage
///   @debug k-color-adjust-hue( #f00, 10deg ); // => #ff1a00
@function k-color-adjust-hue( $color, $degrees ) {
    @return adjust-hue( $color, $degrees );
}

/// Increases the saturation of a color.
/// @param {Color} $color - The color to saturate.
/// @param {Number} $amount - The amount to saturate the color.
/// @return {Color} - The saturated color.
///
/// @example scss - Usage
///   @debug k-color-saturate( #f00, 10% ); // => #ff3333
@function k-color-saturate( $color, $amount ) {
    @return saturate( $color, $amount );
}

/// Decreases the saturation of a color.
/// @param {Color} $color - The color to desaturate.
/// @param {Number} $amount - The amount to desaturate the color.
/// @return {Color} - The desaturated color.
///
/// @example scss - Usage
///   @debug k-color-desaturate( #f00, 10% ); // => #e60000
@function k-color-desaturate( $color, $amount ) {
    @return desaturate( $color, $amount );
}

/// Returns a gray color with the same lightness as the input color.
/// @param {Color} $color - The color to convert to grayscale.
/// @return {Color} - The grayscale color.
///
/// @example scss - Usage
///   @debug k-color-grayscale( #f00 ); // => #808080
@function k-color-grayscale( $color ) {
    @return grayscale( $color );
}

/// Returns the RGB complement of a color. This identical to adjusting the hue
/// by 180 degrees.
/// @param {Color} $color - The color to get the complement for.
/// @return {Color} - The complement color.
///
/// @example scss - Usage
///   @debug k-color-complement( #f00 ); // => #00ffff
@function k-color-complement( $color ) {
    @return complement( $color );
}

/// Returns the inverse of a color.
/// @param {Color} $color - The color to invert.
/// @return {Color} - The inverted color.
///
/// @example scss - Usage
///   @debug k-color-invert( #f00 ); // => #00ffff
@function k-color-invert( $color ) {
    @return invert( $color );
}

// #endregion
// #region @import "./_color-contrast.import.scss"; -> scss/functions/_color-contrast.import.scss
// Adapted from https://gist.github.com/sgomes/ccc72f71137fe29039c92c0a9fe9b657
// Adapted from https://github.com/twbs/bootstrap/commit/03908ea37a55eaa44c12ce5694dddc1630c980b3

//  Precomputed linear color channel values, for use in contrast calculations.
//  See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
//  Algorithm, for c in 0 to 255:
//  f(c) {
//    c = c / 255;
//    return c < 0.03928 ? c / 12.92 : Math.pow((c + 0.055) / 1.055, 2.4);
//  }
//  This lookup table is needed since there is no `pow` in SASS.
// stylelint-disable number-max-precision
$_linear-channel-values: (
    0
    .0003035269835488375
    .000607053967097675
    .0009105809506465125
    .00121410793419535
    .0015176349177441874
    .001821161901293025
    .0021246888848418626
    .0024282158683907
    .0027317428519395373
    .003035269835488375
    .003346535763899161
    .003676507324047436
    .004024717018496307
    .004391442037410293
    .004776953480693729
    .005181516702338386
    .005605391624202723
    .006048833022857054
    .006512090792594475
    .006995410187265387
    .007499032043226175
    .008023192985384994
    .008568125618069307
    .009134058702220787
    .00972121732023785
    .010329823029626936
    .010960094006488246
    .011612245179743885
    .012286488356915872
    .012983032342173012
    .013702083047289686
    .014443843596092545
    .01520851442291271
    .01599629336550963
    .016807375752887384
    .017641954488384078
    .018500220128379697
    .019382360956935723
    .0202885630566524
    .021219010376003555
    .022173884793387385
    .02315336617811041
    .024157632448504756
    .02518685962736163
    .026241221894849898
    .027320891639074894
    .028426039504420793
    .0295568344378088
    .030713443732993635
    .03189603307301153
    .033104766570885055
    .03433980680868217
    .03560131487502034
    .03688945040110004
    .0382043715953465
    .03954623527673284
    .04091519690685319
    .042311410620809675
    .043735029256973465
    .04518620438567554
    .046665086336880095
    .04817182422688942
    .04970656598412723
    .05126945837404324
    .052860647023180246
    .05448027644244237
    .05612849004960009
    .05780543019106723
    .0595112381629812
    .06124605423161761
    .06301001765316767
    .06480326669290577
    .06662593864377289
    .06847816984440017
    .07036009569659588
    .07227185068231748
    .07421356838014963
    .07618538148130785
    .07818742180518633
    .08021982031446832
    .0822827071298148
    .08437621154414882
    .08650046203654976
    .08865558628577294
    .09084171118340768
    .09305896284668745
    .0953074666309647
    .09758734714186246
    .09989872824711389
    .10224173308810132
    .10461648409110419
    .10702310297826761
    .10946171077829933
    .1119324278369056
    .11443537382697373
    .11697066775851084
    .11953842798834562
    .12213877222960187
    .12477181756095049
    .12743768043564743
    .1301364766903643
    .13286832155381798
    .13563332965520566
    .13843161503245183
    .14126329114027164
    .14412847085805777
    .14702726649759498
    .14995978981060856
    .15292615199615017
    .1559264637078274
    .1589608350608804
    .162029375639111
    .1651321945016676
    .16826940018969075
    .1714411007328226
    .17464740365558504
    .17788841598362912
    .18116424424986022
    .184474994500441
    .18782077230067787
    .19120168274079138
    .1946178304415758
    .19806931955994886
    .20155625379439707
    .20507873639031693
    .20863687014525575
    .21223075741405523
    .21586050011389926
    .2195261997292692
    .2232279573168085
    .22696587351009836
    .23074004852434915
    .23455058216100522
    .238397573812271
    .24228112246555486
    .24620132670783548
    .25015828472995344
    .25415209433082675
    .2581828529215958
    .26225065752969623
    .26635560480286247
    .2704977910130658
    .27467731206038465
    .2788942634768104
    .2831487404299921
    .2874408377269175
    .29177064981753587
    .2961382707983211
    .3005437944157765
    .3049873140698863
    .30946892281750854
    .31398871337571754
    .31854677812509186
    .32314320911295075
    .3277780980565422
    .33245153634617935
    .33716361504833037
    .3419144249086609
    .3467040563550296
    .35153259950043936
    .3564001441459435
    .3613067797835095
    .3662525955988395
    .3712376804741491
    .3762621229909065
    .38132601143253014
    .386429433787049
    .39157247774972326
    .39675523072562685
    .4019777798321958
    .4072402119017367
    .41254261348390375
    .4178850708481375
    .4232676699860717
    .4286904966139066
    .43415363617474895
    .4396571738409188
    .44520119451622786
    .45078578283822346
    .45641102318040466
    .4620769996544071
    .467783796112159
    .47353149614800955
    .4793201831008268
    .4851499400560704
    .4910208498478356
    .4969329950608704
    .5028864580325687
    .5088813208549338
    .5149176653765214
    .5209955732043543
    .5271151257058131
    .5332764040105052
    .5394794890121072
    .5457244613701866
    .5520114015120001
    .5583403896342679
    .5647115057049292
    .5711248294648731
    .5775804404296506
    .5840784178911641
    .5906188409193369
    .5972017883637634
    .6038273388553378
    .6104955708078648
    .6172065624196511
    .6239603916750761
    .6307571363461468
    .6375968739940326
    .6444796819705821
    .6514056374198242
    .6583748172794485
    .665387298282272
    .6724431569576875
    .6795424696330938
    .6866853124353135
    .6938717612919899
    .7011018919329731
    .7083757798916868
    .7156935005064807
    .7230551289219693
    .7304607400903537
    .7379104087727308
    .7454042095403874
    .7529422167760779
    .7605245046752924
    .768151147247507
    .7758222183174236
    .7835377915261935
    .7912979403326302
    .799102738014409
    .8069522576692516
    .8148465722161012
    .8227857543962835
    .8307698767746546
    .83879901174074
    .846873231509858
    .8549926081242338
    .8631572134541023
    .8713671191987972
    .8796223968878317
    .8879231178819663
    .8962693533742664
    .9046611743911496
    .9130986517934192
    .9215818562772946
    .9301108583754237
    .938685728457888
    .9473065367331999
    .9559733532492861
    .9646862478944651
    .9734452903984125
    .9822505503331171
    .9911020971138298
    1
);
// stylelint-enable number-max-precision

/// The contrast ratio to reach against white, to determine if color changes from "light" to "dark".
/// Acceptable values for WCAG 2.0 are 3, 4.5 and 7.
/// @type Number
/// @group accessibility
///
/// @link https://www.w3.org/TR/WCAG20/#visual-audio-contrast-contrast
/// @link https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
$wcag-min-contrast-ratio: 7 !default;
/// Default dark color for WCAG 2.0.
/// @type Color
/// @group accessibility
$wcag-dark: black !default;
/// Default light color for WCAG 2.0.
/// @type Color
/// @group accessibility
$wcag-light: white !default;

/// Calculate the relative luminance for a color.
/// @param {Color} $color - The color to calculate the relative luminance for.
/// @return {Number} - The relative luminance for the color.
///
/// @group accessibility
///
/// @link https://www.w3.org/TR/WCAG/#dfn-relative-luminance
/// @link https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
@function k-color-luminance( $color ) {
    $red: k-list-nth( $_linear-channel-values, k-color-red( $color ) + 1 );
    $green: k-list-nth( $_linear-channel-values, k-color-green( $color ) + 1 );
    $blue: k-list-nth( $_linear-channel-values, k-color-blue( $color ) + 1 );

    @return .2126 * $red + .7152 * $green + .0722 * $blue;
}

/// Calculates contrast ratio between two colors
/// @param {Color} $background - The background color
/// @param {Color} $foreground - The foreground color
/// @return {Number} - The contrast ratio between the two colors
///
/// @group accessibility
///
/// @link https://www.w3.org/TR/WCAG/#dfn-contrast-ratio
/// @link https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
@function k-color-contrast-ratio( $background, $foreground ) {
    $backLum: k-color-luminance( $background ) + .05;
    $foreLum: k-color-luminance( $foreground ) + .05;

    @return k-math-div( k-math-max( $backLum, $foreLum ), k-math-min( $backLum, $foreLum ) );
}

/// Checks if a color is dark
/// @param {Color} $color - The color to check
/// @return {Boolean} - True if the color is dark, false otherwise
///
/// @group accessibility
@function k-is-dark( $color ) {
    @return if( k-color-luminance( $color ) < .5, true, false );
}

/// Checks if a color is light
/// @param {Color} $color - The color to check
/// @return {Boolean} - True if the color is light, false otherwise
///
/// @group accessibility
@function k-is-light( $color ) {
    @return if( k-color-luminance( $color ) < .5, false, true );
}


/// Calculates the contrast ratio between a background color and a foreground color.
/// If the contrast ratio is not high enough, it will return the color with the highest contrast ratio.
/// @param {Color} $background - The background color
/// @param {Color} $dark - The dark color to use as a fallback
/// @param {Color} $light - The light color to use as a fallback
/// @param {Number} $min-ratio - The minimum contrast ratio to reach
/// @return {Color} - The color with the highest contrast ratio
///
/// @group accessibility
@function k-contrast-color( $background, $dark: $wcag-dark, $light: $wcag-light, $min-ratio: $wcag-min-contrast-ratio ) {
    $foregrounds: $light, $dark, #ffffff, #000000;
    $max-ratio: 0;
    $max-ratio-color: null;

    @each $color in $foregrounds {
        $contrast-ratio: k-color-contrast-ratio( $background, $color );

        @if ( $contrast-ratio > $min-ratio ) {
            @return $color;
        } @else if ( $contrast-ratio > $max-ratio ) {
            $max-ratio: $contrast-ratio;
            $max-ratio-color: $color;
        }
    }

    @warn "Found no color leading to #{$min-ratio}:1 contrast ratio against #{$background}...";

    @return $max-ratio-color;
}


// Legacy functions
@function k-yiq-luma-information($color) {
    $r: k-color-red($color);
    $g: k-color-green($color);
    $b: k-color-blue($color);

    $yiq: k-math-div( (($r * 299) + ($g * 587) + ($b * 114)), 1000 );

    @return $yiq;
}
@function k-contrast-yiq($color, $dark: $yiq-dark, $light: $yiq-light) {
    $yiq: k-yiq-luma-information($color);
    $out: if($yiq >= $yiq-threshold, $dark, $light);
    // @debug yiq;
    @return $out;
}
@function k-contrast-legacy($color, $dark: $wcag-dark, $light: $wcag-light) {
    $luma: k-color-luminance($color);
    $out: if($luma < .5, $light, $dark);
    // @debug $luma;
    @return $out;
}

// #endregion
// #region @import "./_color-manipulation.import.scss"; -> scss/functions/_color-manipulation.import.scss
$kendo-light-color-level-step: 8% !default;
$kendo-dark-color-level-step: 16% !default;

/// Set a specific jump point for requesting color jumps
/// @group color-system
/// @access private
$kendo-color-level-step: 8% !default;

@function k-color-level( $color, $level: 0 ) {
    $_dark-theme: if( k-meta-variable-exists( kendo-is-dark-theme ), $kendo-is-dark-theme, false );
    $_color-level-step: if( $_dark-theme, $kendo-dark-color-level-step, $kendo-light-color-level-step );

    @if ( $level == 0 ) or ( $level == 0% ) {
        @return $color;
    }

    $base: if( $level < 0, #ffffff, #000000 );
    $level: k-math-abs( $level );


    @if ( k-math-unit($level) == "%" ) {
        @return k-color-mix( $base, $color, $level );
    }

    @return k-color-mix( $base, $color, k-math-clamp( $level * $_color-level-step, 0%, 100% ) );
}

/// Makes a color lighter by mixing it with white
/// @param {Color} $color - The color to lighten
/// @param {Number} $level - The amount to lighten the color
/// @return {Color} - The lightened color
///
/// @group color-system
///
/// @example scss - Usage
///   @debug k-color-tint( #f00, 1 ); // => #ff1a1a
@function k-color-tint( $color, $level: 1 ) {
    @return k-color-level( $color, -$level );
}

/// Makes a color darker by mixing it with black
/// @param {Color} $color - The color to darken
/// @param {Number} $level - The amount to darken the color
/// @return {Color} - The darkened color
///
/// @group color-system
///
/// @example scss - Usage
///   @debug k-color-shade( #f00, 1 ); // => #e60000
@function k-color-shade( $color, $level: 1 ) {
    @return k-color-level( $color, $level );
}

/// Shades the color in light themes and tints it in dark themes
/// @param {Color} $color - The color to shade or tint
/// @param {Number} $level - The amount to shade or tint the color
/// @return {Color} - The shaded or tinted color
///
/// @group color-system
@function k-try-shade( $color, $level: 1 ) {
    $_dark-theme: if( k-meta-variable-exists( kendo-is-dark-theme ), $kendo-is-dark-theme, false );

    @if $_dark-theme {
        @return k-color-tint( $color, $level );
    }

    @return k-color-shade( $color, $level );
}

/// Tints the color in light themes and shades it in dark themes
/// @param {Color} $color - The color to tint or shade
/// @param {Number} $level - The amount to tint or shade the color
/// @return {Color} - The tinted or shaded color
///
/// @group color-system
@function k-try-tint( $color, $level: 1 ) {
    $_dark-theme: if( k-meta-variable-exists( kendo-is-dark-theme ), $kendo-is-dark-theme, false );

    @if $_dark-theme {
        @return k-color-shade( $color, $level );
    }

    @return k-color-tint( $color, $level );
}

/// Darkens the color in light themes and lightens it in dark themes
/// @param {Color} $color - The color to darken or lighten
/// @param {Number} $level - The amount to darken or lighten the color
/// @return {Color} - The darkened or lightened color
///
/// @group color-system
@function k-try-darken( $color, $amount ) {
    $_dark-theme: if( k-meta-variable-exists( kendo-is-dark-theme ), $kendo-is-dark-theme, false );

    @if $_dark-theme {
        @return k-color-lighten( $color, $amount );
    }
    @return k-color-darken( $color, $amount );
}

/// Lightens the color in light themes and darkens it in dark themes
/// @param {Color} $color - The color to lighten or darken
/// @param {Number} $level - The amount to lighten or darken the color
/// @return {Color} - The lightened or darkened color
///
/// @group color-system
@function k-try-lighten( $color, $amount ) {
    $_dark-theme: if( k-meta-variable-exists( kendo-is-dark-theme ), $kendo-is-dark-theme, false );

    @if $_dark-theme {
        @return k-color-darken( $color, $amount );
    }
    @return k-color-lighten( $color, $amount );
}

/// Converts a color with alpha to solid color mixed with a background color
/// @param {Color} $color - The color to convert
/// @param {Color} $bg - The background color
/// @return {Color} - The converted color
///
/// @group color-system
///
/// @example scss - Usage
///   @debug k-rgba-to-mix( rgba( #f00, 0.5 ), #fff ); // => #ff8080
@function k-rgba-to-mix( $color, $bg ) {
    $percent: k-color-alpha( $color ) * 100%;

    @return k-color-mix( rgba( $color, 1 ), $bg, $percent );
}

// TODO: Remove this function or rethink the logic
@function k-true-mix( $color1, $color2, $weight: 50% ) {
    @return k-color-mix( rgba( $color1, 1 ), rgba( $color2, 1 ), $weight );
}

// #endregion
// #region @import "./_custom-properties.import.scss"; -> scss/functions/_custom-properties.import.scss
@function k-var( $prefix: kendo-, $var: null, $fallback: null ) {
    $_prefix: $prefix;
    $_var: $var;
    $_fallback: $fallback;

    @if ( k-string-index( $prefix, "--" ) == 1 ) {
        $_prefix: "";
        $_var: k-string-slice( $prefix, 3 );
        $_fallback: $var;
    }

    @if not $_var {
        @return null;
    }

    @if $_prefix == null { // stylelint-disable-line
        $_prefix: "";
    }

    @if ($_fallback != null and $_fallback != "") {
        @return var( --#{$_prefix}#{$_var}, #{$_fallback} );
    }

    @return var( --#{$_prefix}#{$_var} );
}

@function k-vars( $prefix: kendo-, $vars... ) {
    $vars: k-list-reverse( $vars );
    $result: null;

    // @debug $prefix;
    @each $var in $vars {
        $result: k-var( $prefix, $var, $result );
    }

    @return $result;
}

// #endregion
// #region @import "./_escape-string.import.scss"; -> scss/functions/_escape-string.import.scss
$_kendo-svg-escaped-characters: (
    ("%", "%25"),
    ("<", "%3c"),
    (">", "%3e"),
    ("#", "%23"),
    ("(", "%28"),
    (")", "%29")
) !default;

/// Escapes SVG characters in a string
/// @param {String} $string - The string to escape
/// @return {String} - The escaped string
///
/// @link https://codepen.io/kevinweber/pen/dXWoRw
@function k-escape-svg($string) {
    @if k-string-index($string, "data:image/svg+xml") {
        @each $char, $encoded in $_kendo-svg-escaped-characters {
            // Do not escape the url brackets
            @if k-string-index($string, "url(") == 1 {
                $string: url("#{k-string-replace(k-string-slice($string, 6, -3), $char, $encoded)}");
            } @else {
                $string: k-string-replace($string, $char, $encoded);
            }
        }
    }

    @return $string;
}



$_kendo-escape-class-name: (
    ".": "\\.",
    "/": "\\/"
);

/// Escapes special characters in a class name
/// @param {String} $text - The string to escape
/// @return {String} - The escaped string
@function k-escape-class-name( $text ) {
    $_text: $text;

    @each $char, $rep in $_kendo-escape-class-name {
        $_text: k-string-replace( $_text, k-string-unquote( $char ), k-string-unquote( $rep ) );
    }

    @return $_text;
}

// #endregion
// #region @import "./_lang.import.scss"; -> scss/functions/_lang.import.scss
/// Returns the value of a variable if it is not null,
/// otherwise returns the fallback value.
/// @param {Any} $var - The variable to check.
/// @param {Any} $fallback - The fallback value.
/// @return {Any} - The value of the variable or the fallback value.
///
/// @example scss - Usage
///   $foo: null;
///   @debug k-if-var( $foo, "bar" ); // => "bar"
///   $foo: "baz";
///   @debug k-if-var( $foo, "bar" ); // => "baz"
@function k-if-var( $var, $fallback ) {
    @return if( $var != null, $var, $fallback );
}

// #endregion
// #region @import "./_list.import.scss"; -> scss/functions/_list.import.scss
/// Returns a copy of `$list` with `$val` appended to the end.
/// @param {List} $list - The list to process.
/// @param {Any} $val - The value to append to `$list`.
/// @param {String} $separator - The separator to use between `$list` and `$val`.
/// @return {List} - A copy of `$list` with `$val` appended to the end.
///
/// @example scss - Usage
///   @debug k-list-append( ( "foo", "bar" ), "baz" ); // => "foo, bar, baz"
@function k-list-append( $list, $val, $separator: auto ) {
    @return append( $list, $val, $separator );
}

/// Checks whether `$list` contains `$value`.
/// @param {List} $list - The list to check.
/// @param {Any} $value - The value to check for.
/// @return {Boolean} - Whether `$list` contains `$value`.
///
/// @example scss - Usage
///   @debug k-list-includes( ( "foo", "bar" ), "foo" ); // => true
///   @debug k-list-includes( ( "foo", "bar" ), "baz" ); // => false
@function k-list-includes( $list, $value ) {
    @return k-list-index( $list, $value ) != null;
}

/// Returns the index of `$value` in `$list`.
/// @param {List} $list - The list to check.
/// @param {Any} $value - The value to check for.
/// @return {Number} - The index of `$value` in `$list`.
///
/// @example scss - Usage
///   @debug k-list-index( ( "foo", "bar" ), "foo" ); // => 1
@function k-list-index( $list, $value ) {
    @return index( $list, $value );
}

/// Returns whether `$list` is bracketed.
/// @param {List} $list - The list to check.
/// @return {Boolean} - Whether `$list` is bracketed.
///
/// @example scss - Usage
///   @debug k-list-is-bracketed( ( "foo", "bar" ) ); // => false
///   @debug k-list-is-bracketed( [ "foo", "bar" ] ); // => true
@function k-list-is-bracketed( $list ) {
    @return is-bracketed( $list );
}

/// Joins two lists together.
/// @param {List} $list1 - The first list to join.
/// @param {List} $list2 - The second list to join.
/// @param {String} $separator - The separator to use between `$list1` and `$list2`.
/// @param {Boolean} $bracketed - Whether the result should be bracketed.
/// @return {List} - The joined list.
///
/// @example scss - Usage
///   @debug k-list-join( ( "foo", "bar" ), ( "baz", "qux" ) ); // => "foo, bar, baz, qux"
///   @debug k-list-join( ( "foo", "bar" ), ( "baz", "qux" ), " " ); // => "foo bar baz qux"
@function k-list-join( $list1, $list2, $separator: auto, $bracketed: auto ) {
    @return join( $list1, $list2, $separator, $bracketed );
}

/// Returns the length of `$list`.
/// @param {List} $list - The list to check.
/// @return {Number} - The length of `$list`.
///
/// @example scss - Usage
///   @debug k-list-length( ( "foo", "bar" ) ); // => 2
@function k-list-length( $list ) {
    @return length( $list );
}

/// Returns the nth item in `$list`.
/// @param {List} $list - The list to check.
/// @param {Number} $n - The index of the item to return.
/// @return {Any} - The nth item in `$list`.
///
/// @example scss - Usage
///   @debug k-list-nth( ( "foo", "bar" ), 1 ); // => "foo"
@function k-list-nth( $list, $n ) {
    @return nth( $list, $n );
}

/// Reverse the order of items in `$list`.
/// @param {List} $list - The list to reverse.
/// @return {List} - The reversed list.
///
/// @example scss - Usage
///   @debug k-list-reverse( ( "foo", "bar" ) ); // => "bar, foo"
@function k-list-reverse( $list: null ) {
    $result: ();

    @if ($list) {
        $len: k-list-length( $list );

        @for $i from $len through 1 {
            $result: k-list-append( $result, k-list-nth( $list, $i ) );
        }

        @return $result;
    }

    @warn "No list passed.";
    @return $result;
}

/// Returns the separator of `$list`.
/// @param {List} $list - The list to check.
/// @return {String} - The separator of `$list`.
///
/// @example scss - Usage
///   @debug k-list-separator( ( "foo", "bar" ) ); // => ","
@function k-list-separator( $list ) {
    @return list-separator( $list );
}

/// Returns a copy of `$list` with `$val` inserted at `$n`.
/// @param {List} $list - The list to process.
/// @param {Number} $n - The index at which to insert `$val`.
/// @param {Any} $val - The value to insert.
/// @return {List} - A copy of `$list` with `$val` inserted at `$n`.
///
/// @example scss - Usage
///   @debug k-list-set-nth( ( "foo", "bar" ), 1, "baz" ); // => "baz, bar"
@function k-list-set-nth( $list, $n, $value ) {
    @return set-nth( $list, $n, $value );
}

/// Combines two lists into a single list of two-item lists.
/// @param {List} $list1 - The first list to combine.
/// @param {List} $list2 - The second list to combine.
/// @return {List} - A list of two-item lists.
///
/// @example scss - Usage
///   @debug k-list-zip( ( "foo", "bar" ), ( "baz", "qux" ) ); // => ((foo, baz), (bar, qux))
@function k-list-zip( $lists... ) {
    @return zip( $lists... );
}

// #endregion
// #region @import "./_math.import.scss"; -> scss/functions/_math.import.scss
/// Returns the absolute value of a number.
/// @param {Number} $number - The number to get the absolute value of.
/// @return {Number} - The absolute value of `$number`.
///
/// @example scss - Usage
///   @debug k-math-abs( -10 ); // => 10
@function k-math-abs( $number ) {
    @return abs( $number );
}

/// Returns the smallest integer greater than or equal to a number.
/// @param {Number} $number - The number to get the ceiling of.
/// @return {Number} - The ceiling of `$number`.
///
/// @example scss - Usage
///   @debug k-math-ceil( 10.1 ); // => 11
@function k-math-ceil( $number ) {
    @return ceil( $number );
}

/// Returns the largest integer less than or equal to a number.
/// @param {Number} $number - The number to get the floor of.
/// @return {Number} - The floor of `$number`.
///
/// @example scss - Usage
///   @debug k-math-floor( 10.9 ); // => 10
@function k-math-floor( $number ) {
    @return floor( $number );
}

/// Restricts `$number` to the range between `$min` and `$max`. If `$number` is
/// less than `$min`, `$min` is returned. If `$number` is greater than `$max`,
/// `$max` is returned. Otherwise, `$number` is returned.
/// @param {Number} $number - The number to clamp.
/// @param {Number} $min - The minimum value.
/// @param {Number} $max - The maximum value.
/// @return {Number} - The clamped number.
///
/// @example scss - Usage
///   @debug k-math-clamp( 10, 0, 5 ); // => 5
@function k-math-clamp( $number, $min, $max ) {
    @return k-math-max( $min, k-math-min( $max, $number ) );
}

/// Returns whether two numbers have compatible units.
/// @param {Number} $a - The first number.
/// @param {Number} $b - The second number.
/// @return {Boolean} - Whether the numbers have compatible units.
///
/// @example scss - Usage
///   @debug k-math-compatible( 10px, 10px ); // => true
///   @debug k-math-compatible( 10px, 10em ); // => false
@function k-math-compatible( $a, $b ) {
    @return comparable( $a, $b );
}

/// Returns the quotient of two numbers.
/// @param {Number} $a - The dividend.
/// @param {Number} $b - The divisor.
/// @return {Number} - The quotient of `$a` and `$b`.
///
/// @example scss - Usage
///   @debug k-math-div( 10, 2 ); // => 5
///   @debug k-math-div( 10px, 2 ); // => 5px
@function k-math-div( $a, $b )  {
    @return ( $a / $b );
}

/// Returns whether `$number` has no units.
/// @param {Number} $number - The number to check.
/// @return {Boolean} - Whether `$number` has no units.
///
/// @example scss - Usage
///   @debug k-math-is-unitless( 10 ); // => true
///   @debug k-math-is-unitless( 10px ); // => false
@function k-math-is-unitless( $number ) {
    @return unitless( $number );
}

/// Returns the larger of two numbers.
/// @param {Number} $a - The first number.
/// @param {Number} $b - The second number.
/// @return {Number} - The larger of `$a` and `$b`.
///
/// @example scss - Usage
///   @debug k-math-max( 10, 20 ); // => 20
///   @debug k-math-max( 10px, 20px ); // => 20px
@function k-math-max( $a, $b ) {
    @return max( $a, $b );
}

/// Returns the smaller of two numbers.
/// @param {Number} $a - The first number.
/// @param {Number} $b - The second number.
/// @return {Number} - The smaller of `$a` and `$b`.
///
/// @example scss - Usage
///   @debug k-math-min( 10, 20 ); // => 10
///   @debug k-math-min( 10px, 20px ); // => 10px
@function k-math-min( $a, $b ) {
    @return min( $a, $b );
}

/// Returns the remainder of two numbers.
/// @param {Number} $a - The dividend.
/// @param {Number} $b - The divisor.
/// @return {Number} - The remainder of `$a` and `$b`.
///
/// @example scss - Usage
///   @debug k-math-mod( 10, 3 ); // => 1
///   @debug k-math-mod( 10px, 3 ); // => 1px
@function k-math-mod( $a, $b ) {
    @return ( $a % $b );
}

/// Returns the product of two numbers.
/// @param {Number} $a - The first number.
/// @param {Number} $b - The second number.
/// @return {Number} - The product of `$a` and `$b`.
///
/// @example scss - Usage
///   @debug k-math-mul( 10, 2 ); // => 20
///   @debug k-math-mul( 10px, 2 ); // => 20px
@function k-math-mul( $a, $b ) {
    @return ( $a * $b );
}

/// Converts a unitless number to a percentage.
/// @param {Number} $number - The number to convert.
/// @return {Number} - The percentage.
///
/// @example scss - Usage
///   @debug k-math-percentage( 0.5 ); // => 50%
@function k-math-percentage( $number ) {
    @return percentage( $number );
}

/// Returns the result of raising `$x` to the power of `$n`.
/// @param {Number} $x - The base.
/// @param {Number} $n - The exponent.
/// @return {Number} - The result of raising `$x` to the power of `$n`.
///
/// @example scss - Usage
///   @debug k-math-pow( 2, 3 ); // => 8
@function k-math-pow( $x, $n ) {
    $ret: 1;

    @if ( $n == 0 ) {
        @return $ret;
    }

    @if ( $n > 0 ) {
        @for $i from 1 through $n {
            $ret: $ret * $x;
        }
        @return $ret;
    }

    @for $i from $n to 0 {
        $ret: k-math-div( $ret, $x );
    }
    @return $ret;

}

/// Returns a random number between 0 and 1.
/// @param {Number} $limit - The upper limit of the random number.
/// @return {Number} - A random number between 0 and 1.
///
/// @example scss - Usage
///   @debug k-math-random(); // => 0.123456789
@function k-math-random( $limit: null ) {
    @if ( $limit == null ) { // stylelint-disable-line
        @return random();
    }

    @return random( $limit );
}

/// Returns the result of rounding `$number` to the nearest integer
/// using the specified `$precision`.
/// @param {Number} $number - The number to round.
/// @param {Number} $precision - The number of decimal places to round to.
/// @return {Number} - The rounded number.
///
/// @example scss - Usage
///   @debug k-math-round( 10.123456789, 3 ); // => 10.123
@function k-math-round( $number, $precision: 0 ) {

    @if ( $precision == 0 ) {
        @return round( $number );
    }

    $pow: k-math-pow( 10, $precision );

    @return k-math-div( round( $number * $pow ), $pow );
}

/// Returns a string representation of `$number`'s unit.
/// @param {Number} $number - The number to get the unit of.
/// @return {String} - The unit of `$number`.
///
/// @example scss - Usage
///   @debug k-math-unit( 10px ); // => px
@function k-math-unit( $number ) {
    @return unit( $number );
}

/// Remove the unit from a number.
/// @param {Number} $number - The number to remove the unit from.
/// @return {Number} - The unitless number.
///
/// @example scss - Usage
///   @debug k-math-strip-unit( 10px ); // => 10
@function k-math-strip-unit($number) {
    @if ( k-meta-type-of( $number ) == "number" ) and not k-math-is-unitless( $number ) {
        @return k-math-div( $number, 1 * k-math-unit( $number) );
    }

    @return $number;
}

// #endregion
// #region @import "./_map.import.scss"; -> scss/functions/_map.import.scss
/// Returns the value at `$key` in `$map`.
/// @param {Map} $map - The map to get the value from.
/// @param {Any} $key - The key to get the value for.
///
/// @example scss - Usage
///   @debug k-map-get( ( "foo": "bar" ), "foo" ); // => "bar"
@function k-map-get( $map, $keys... ) {
    @each $key in $keys {
        $map: map-get( $map, $key ); // stylelint-disable-line
    }
    @return $map;
}

/// Returns whether `$map` has a value at `$key`.
/// @param {Map} $map - The map to check.
/// @param {Any} $key - The key to check.
/// @return {Boolean} - Whether `$map` has a value at `$key`.
///
/// @example scss - Usage
///   @debug k-map-has( ( "foo": "bar" ), "foo" ); // => true
///   @debug k-map-has( ( "foo": "bar" ), "bar" ); // => false
@function k-map-has-key( $map, $key ) {
    @return map-has-key( $map, $key );
}

/// Returns a comma separated list of the keys in `$map`.
/// @param {Map} $map - The map to get the keys from.
/// @return {List} - A comma separated list of the keys in `$map`.
///
/// @example scss - Usage
///   @debug k-map-keys( ( "foo": "bar", "baz": "qux" ) ); // => "foo, baz"
@function k-map-keys( $map ) {
    @return map-keys( $map );
}

/// Returns a map with the keys and values from `$map` and `$args`.
/// @param {Map} $map - The map to merge.
/// @param {Map} $args - The map to merge into `$map`.
/// @return {Map} - A map with the keys and values from `$map` and `$args`.
///
/// @example scss - Usage
///   @debug k-map-merge( ( "foo": "bar" ), ( "baz": "qux" ) ); // => ( "foo": "bar", "baz": "qux" )
@function k-map-merge( $map, $args... ) {
    @each $arg in $args {
        $map: map-merge( $map, $arg ); // stylelint-disable-line
    }
    @return $map;
}

/// Returns a deep-map with the keys and values from `$map` and `$args`.
/// @param {Map} $maps - The maps to deep-merge.
/// @return {Map} - A map with the keys and values from `$map` and `$args`.
///
/// @example scss - Usage
///   @debug k-map-deep-merge( ( "foo": ("bar": "baz", "baz": "qux" ) ), ( "foo": ("bar": "foo") ) ); // => ( "foo": ("bar": "foo", "baz": "qux" ))
@function k-map-deep-merge($maps...) {
    $merged: ();
  
    @each $map in $maps {
      @each $key, $val in $map {
        @if (k-meta-type-of($val) == 'map') {
          $current: k-map-get($merged, $key);
          @if (k-meta-type-of($current) == 'map') {
            $val: k-map-deep-merge($current, $val);
            $map: k-map-merge(
              $map,
              (
                $key: $val
              )
            );
          }
        }
      }
      $merged: k-map-merge($merged, $map);
    }
  
    @return $merged;
  }

/// Returns a map with the keys and values from `$map` except for `$keys`.
/// @param {Map} $map - The map to remove keys from.
/// @param {Any} $keys - The keys to remove from `$map`.
/// @return {Map} - A map with the keys and values from `$map` except for `$keys`.
///
/// @example scss - Usage
///   @debug k-map-remove( ( "foo": "bar", "baz": "qux" ), "foo" ); // => ( "baz": "qux" )
@function k-map-remove( $map, $keys... ) {
    @return map-remove( $map, $keys... );
}

/// Sets a single key and value in `$map`.
/// @param {Map} $map - The map to set the value in.
/// @param {Any} $key - The key to set the value for.
/// @param {Any} $value - The value to set.
/// @return {Map} - A map with the key and value set.
///
/// @example scss - Usage
///   @debug k-map-set( ( "foo": "bar" ), "baz", "qux" ); // => ( "foo": "bar", "baz": "qux" )
@function k-map-set( $map, $key, $value ) {
    @return k-map-merge( $map, ( $key: $value ) );
}

/// Returns a comma separated list of the values in `$map`.
/// @param {Map} $map - The map to get the values from.
/// @return {List} - A comma separated list of the values in `$map`.
///
/// @example scss - Usage
///   @debug k-map-values( ( "foo": "bar", "baz": "qux" ) ); // => "bar, qux"
@function k-map-values( $map ) {
    @return map-values( $map );
}

/// Returns negative values of a number or numbers in a list.
/// @param {Map} $map - The map to get the values from.
/// @return {Map} - A comma separated list of the values in `$map`.
///
/// @example scss - Usage
///   @debug k-map-negate( ( 0: 0, 1: 1px, 2: 2px ) ); // => ("-1": -1px, "-2": -2px)
@function k-map-negate($map) {
    $_map-neg: ();

    @if( k-meta-type-of($map) != map ) {
        @error "expected type of #{$map} is map, was #{k-meta-type-of($map)}";
    };
    @each $key, $value in $map {
        $_key-neg: "-" + $key;

        @if( k-meta-type-of($value) == number and $value != 0) {
            $_map-neg: k-map-set($_map-neg, $_key-neg, -1 * $value );
        }
    }

    @return $_map-neg;

}

// #endregion
// #region @import "./_meta.import.scss"; -> scss/functions/_meta.import.scss
// Adapted from https://css-tricks.com/snippets/sass/advanced-type-checking/

/// A wrapper around the `call()` function.
/// Calls the function `$function` with the arguments `$args`.
/// @param {Function} $function - The function to call.
/// @param {List} $args - The arguments to pass to `$function`.
/// @return {Any} - The result of calling `$function` with `$args`.
///
/// @example scss - Usage
///   @debug k-meta-call( k-meta-get-function( "k-string-replace" ), "foo bar", "bar", "baz" ); // => "foo baz"
@function k-meta-call( $function, $args... ) {
    @return call( $function, $args... );
}

/// A wrapper around the `function-exists()` function.
/// Returns whether a function with the name `$name` exists.
/// @param {String} $name - The name of the function to check.
/// @return {Boolean} - Whether a function with the name `$name` exists.
///
/// @example scss - Usage
///   @debug k-meta-function-exists( "k-string-replace" ); // => true
@function k-meta-function-exists( $name ) {
    @if $name == "" {
        @return false;
    }

    @return function-exists( $name );
}

/// A wrapper around the `get-function()` function.
/// Returns the function with the name `$name`.
/// @param {String} $name - The name of the function to get.
/// @param {Boolean} $css - Whether to return the CSS representation of the function.
/// @param {Module} $module - The module to get the function from.
/// @return {Function} - The function with the name `$name`.
///
/// @example scss - Usage
///   @debug k-meta-get-function( "k-string-replace" ); // => Function
@function k-meta-get-function( $name, $args... ) {
    @return get-function( $name, $args... );
}

/// A wrapper around the `inspect()` function.
/// Returns a string representation of `$value`.
/// @param {Any} $value - The value to inspect.
/// @return {String} - A string representation of `$value`.
///
/// @example scss - Usage
///   @debug k-meta-inspect( "foo bar" ); // => "foo bar"
@function k-meta-inspect( $value ) {
    @return inspect( $value );
}

/// A wrapper around the `keywords()` function.
/// Returns a map of the keywords in `$args`.
/// @param {List} $args - The arguments to process.
/// @return {Map} - A map of the keywords in `$args`.
///
/// @example scss - Usage
///   @debug k-meta-keywords( ( "foo" "bar" "baz" "qux" ) ); // => ( "foo": "bar", "baz": "qux" )
@function k-meta-keywords( $args ) {
    @return keywords( $args );
}

/// A wrapper around the `type-of()` function.
/// Returns the type of `$value`.
/// @param {Any} $value - The value to get the type of.
/// @return {String} - The type of `$value`.
///
/// @example scss - Usage
///   @debug k-meta-type-of( "foo bar" ); // => "string"
@function k-meta-type-of( $value ) {
    @return type-of( $value );
}

/// A wrapper around the `variable-exists()` function.
/// Returns whether a variable with the name `$name` exists.
/// @param {String} $name - The name of the variable to check.
/// @return {Boolean} - Whether a variable with the name `$name` exists.
///
/// @example scss - Usage
///   @debug k-meta-variable-exists( "foo" ); // => true
@function k-meta-variable-exists( $name ) {
    @return variable-exists( $name );
}

/// Checks whether `$value` is a <number> CSS data type.
/// @param {Any} $value - The value to check.
/// @return {Boolean} - Whether `$value` is a number.
///
/// @link https://developer.mozilla.org/en-US/docs/Web/CSS/number
///
/// @example scss - Usage
///   @debug k-meta-is-number( 1 ); // => true
///   @debug k-meta-is-number( "foo" ); // => false
@function k-meta-is-number( $value ) {
    @return k-meta-type-of( $value ) == "number";
}

/// Checks whether `$value` is a <integer> CSS data type.
/// @param {Any} $value - The value to check.
/// @return {Boolean} - Whether `$value` is a integer.
///
/// @link https://developer.mozilla.org/en-US/docs/Web/CSS/integer
///
/// @example scss - Usage
///   @debug k-meta-is-integer( 1 ); // => true
///   @debug k-meta-is-integer( 1.5 ); // => false
@function k-meta-is-integer( $value ) {
    @return k-meta-is-number( $value ) and k-math-round( $value ) == $value;
}

/// Checks whether `$value` is a <time> CSS data type.
/// @param {Any} $value - The value to check.
/// @return {Boolean} - Whether `$value` is a time.
///
/// @link https://developer.mozilla.org/en-US/docs/Web/CSS/time
///
/// @example scss - Usage
///   @debug k-meta-is-time( 1s ); // => true
///   @debug k-meta-is-time( 1 ); // => false
@function k-meta-is-time( $value ) {
    @return k-meta-is-number( $value ) and k-string-index( "ms" "s", k-math-unit( $value ) ) != null;
}

/// Checks whether `$value` is a valid duration period.
/// @param {Any} $value - The value to check.
/// @return {Boolean} - Whether `$value` is a duration.
///
/// @link https://developer.mozilla.org/en-US/docs/Web/CSS/time
///
/// @example scss - Usage
///   @debug k-meta-is-duration( 1s ); // => true
///   @debug k-meta-is-duration( 1 ); // => false
@function k-meta-is-duration( $value ) {
    @return k-meta-is-time( $value );
}

/// Checks whether `$value` is a <angle> CSS data type.
/// @param {Any} $value - The value to check.
/// @return {Boolean} - Whether `$value` is a angle.
///
/// @link https://developer.mozilla.org/en-US/docs/Web/CSS/angle
///
/// @example scss - Usage
///   @debug k-meta-is-angle( 1deg ); // => true
///   @debug k-meta-is-angle( 1 ); // => false
@function k-meta-is-angle( $value ) {
    @return k-meta-is-number( $value ) and k-string-index( "deg" "rad" "grad" "turn", k-math-unit( $value ) ) != null;
}

/// Checks whether `$value` is a <frequency> CSS data type.
/// @param {Any} $value - The value to check.
/// @return {Boolean} - Whether `$value` is a frequency.
///
/// @link https://developer.mozilla.org/en-US/docs/Web/CSS/frequency
///
/// @example scss - Usage
///   @debug k-meta-is-frequency( 1Hz ); // => true
///   @debug k-meta-is-frequency( 1 ); // => false
@function k-meta-is-frequency( $value ) {
    @return k-meta-is-number( $value ) and k-string-index( "Hz" "kHz", k-math-unit( $value ) ) != null;
}

/// Checks whether `$value` is a relative <length> CSS data type.
/// @param {Any} $value - The value to check.
/// @return {Boolean} - Whether `$value` is a relative length.
///
/// @link https://developer.mozilla.org/en-US/docs/Web/CSS/length#relative_length_units_based_on_font
/// @link https://developer.mozilla.org/en-US/docs/Web/CSS/length#relative_length_units_based_on_viewport
///
/// @example scss - Usage
///   @debug k-meta-is-relative-length( 1em ); // => true
///   @debug k-meta-is-relative-length( 1ch ); // => true
///   @debug k-meta-is-relative-length( 1 ); // => false
@function k-meta-is-relative-length( $value ) {
    @return k-meta-is-number( $value ) and k-string-index( "em" "ex" "ch" "rem" "vw" "vh" "vmin" "vmax", k-math-unit( $value ) ) != null;
}

/// Checks whether `$value` is an absolute <length> CSS data type.
/// @param {Any} $value - The value to check.
/// @return {Boolean} - Whether `$value` is an absolute length.
///
/// @link https://developer.mozilla.org/en-US/docs/Web/CSS/length#absolute_length_units
///
/// @example scss - Usage
///   @debug k-meta-is-absolute-length( 1cm ); // => true
///   @debug k-meta-is-absolute-length( 1 ); // => false
@function k-meta-is-absolute-length( $value ) {
    @return k-meta-is-number( $value ) and k-string-index( "cm" "mm" "in" "px" "pt" "pc", k-math-unit( $value ) ) != null;
}

/// Checks whether `$value` is a <percentage> CSS data type.
/// @param {Any} $value - The value to check.
/// @return {Boolean} - Whether `$value` is a percentage.
///
/// @link https://developer.mozilla.org/en-US/docs/Web/CSS/percentage
///
/// @example scss - Usage
///   @debug k-meta-is-percentage( 1% ); // => true
///   @debug k-meta-is-percentage( 1 ); // => false
@function k-meta-is-percentage( $value ) {
    @return k-meta-is-number( $value ) and k-math-unit( $value ) == "%";
}

/// Checks whether `$value` is a <length> CSS data type.
/// @param {Any} $value - The value to check.
/// @return {Boolean} - Whether `$value` is a length.
///
/// @link https://developer.mozilla.org/en-US/docs/Web/CSS/length
///
/// @example scss - Usage
///   @debug k-meta-is-length( 1em ); // => true
///   @debug k-meta-is-length( 1cm ); // => true
///   @debug k-meta-is-length( 1 ); // => false
@function k-meta-is-length( $value ) {
    @return k-meta-is-relative-length( $value ) or k-meta-is-absolute-length( $value );
}

/// Checks whether `$value` is a <resolution> CSS data type.
/// @param {Any} $value - The value to check.
/// @return {Boolean} - Whether `$value` is a resolution.
///
/// @link https://developer.mozilla.org/en-US/docs/Web/CSS/resolution
///
/// @example scss - Usage
///   @debug k-meta-is-resolution( 1dpi ); // => true
///   @debug k-meta-is-resolution( 1 ); // => false
@function k-meta-is-resolution( $value ) {
    @return k-meta-is-number( $value ) and k-string-index( "dpi" "dpcm" "dppx", k-math-unit( $value ) ) != null;
}

/// Checks whether `$value` is a <position> CSS data type.
/// @param {Any} $value - The value to check.
/// @return {Boolean} - Whether `$value` is a position.
///
/// @link https://developer.mozilla.org/en-US/docs/Web/CSS/position
///
/// @example scss - Usage
///   @debug k-meta-is-position( center ); // => true
@function k-meta-is-position( $value ) {
    @return k-meta-is-length( $value ) or k-meta-is-percentage( $value ) or k-string-index( "top" "right" "bottom" "left" "center", $value ) != null;
}

// #endregion
// #region @import "./_string.import.scss"; -> scss/functions/_string.import.scss
$svg-escaped-characters: (
    ("%", "%25"),
    ("<", "%3c"),
    (">", "%3e"),
    ("#", "%23"),
    ("(", "%28"),
    (")", "%29")
) !default;

/// Returns the first index of `$substring` in `$string`, or `null` if `$string` doesn’t contain `$substring`.
/// @param {String} $string - The string to process.
/// @param {String} $substring - The substring to look for.
/// @return {Number} - The first index of `$substring` in `$string`, or `null` if `$string` doesn’t contain `$substring`.
///
/// @example scss - Usage
///   @debug k-string-index( "foo bar", "bar" ); // => 5
@function k-string-index( $string, $substring ) {
    @return str-index( $string, $substring );
}

/// Returns a copy of `$string` with `$insert` inserted at `$index`.
/// @param {String} $string - The string to process.
/// @param {String} $insert - The string to insert.
/// @param {Number} $index - The index at which to insert `$insert`.
/// @return {String} - The resulting string.
///
/// @example scss - Usage
///   @debug k-string-insert( "foo bar", "baz", 5 ); // => "foo baz bar"
@function k-string-insert( $string, $insert, $index ) {
    @return str-insert( $string, $insert, $index );
}

/// Returns the length of `$string`.
/// @param {String} $string - The string to process.
/// @return {Number} - The length of `$string`.
///
/// @example scss - Usage
///   @debug k-string-length( "foo bar" ); // => 7
@function k-string-length( $string ) {
    @return str-length( $string );
}

/// Returns a copy of `$string` with quotes added.
/// @param {String} $string - The string to process.
/// @return {String} - The resulting string.
///
/// @example scss - Usage
///   @debug k-string-quote( "foo bar" ); // => "foo bar"
@function k-string-quote( $string ) {
    @return quote( $string );
}

/// Returns a copy of `$string` with all occurrences of `$search`
/// replaced by `$replace`.
/// @param {String} $string - The string to process.
/// @param {String} $search - The substring to look for.
/// @param {String} $replace - The replacement string.
/// @return {String} - The resulting string.
///
/// @link https://www.sassmeister.com/gist/1b4f2da5527830088e4d
///
/// @example scss - Usage
///   @debug k-string-replace( "foo bar", "bar", "baz" ); // => "foo baz"
@function k-string-replace( $string, $search, $replace: "" ) {
    @if k-meta-type-of( $string ) == number {
        $string: $string + "";
    }

    $index: k-string-index( $string, $search );

    @if $index {
        @return k-string-slice( $string, 1, $index - 1 ) + $replace + k-string-replace( k-string-slice( $string, $index + k-string-length( $search ) ), $search, $replace );
    }

    @return $string;
}

/// Returns a substring of `$string` starting at `$start-at` and ending at `$end-at`.
/// @param {String} $string - The string to process.
/// @param {Number} $start-at - The index at which to start the substring.
/// @param {Number} $end-at - The index at which to end the substring.
/// @return {String} - The resulting string.
///
/// @example scss - Usage
///   @debug k-string-slice( "foo bar", 5 ); // => "bar"
@function k-string-slice( $string, $start-at, $end-at: -1 ) {
    @return str-slice( $string, $start-at, $end-at );
}

/// Returns a copy of `$string` with all uppercase letters converted to lowercase.
/// @param {String} $string - The string to process.
/// @return {String} - The resulting string.
///
/// @example scss - Usage
///   @debug k-string-to-lower-case( "FOO BAR" ); // => "foo bar"
@function k-string-to-lower-case( $string ) {
    @return to-lower-case( $string );
}

/// Returns a copy of `$string` with all lowercase letters converted to uppercase.
/// @param {String} $string - The string to process.
/// @return {String} - The resulting string.
///
/// @example scss - Usage
///   @debug k-string-to-upper-case( "foo bar" ); // => "FOO BAR"
@function k-string-to-upper-case( $string ) {
    @return to-upper-case( $string );
}

/// Returns a unique identifier.
/// @return {String} - The unique identifier.
///
/// @example scss - Usage
///   @debug k-string-unique-id(); // => UNIQUE_ID
@function k-string-unique-id() {
    @return unique-id();
}

/// Returns a copy of `$string` with quotes removed.
/// @param {String} $string - The string to process.
/// @return {String} - The resulting string.
///
/// @example scss - Usage
///   @debug k-string-unquote( "foo bar" ); // => foo bar
@function k-string-unquote( $string ) {
    @return unquote( $string );
}


// See https://www.sassmeister.com/gist/1b4f2da5527830088e4d
@function str-replace($string, $search, $replace: "") {
    $index: k-string-index($string, $search);

    @if $index {
        @return k-string-slice($string, 1, $index - 1) + $replace + str-replace(k-string-slice($string, $index + k-string-length($search)), $search, $replace);
    }

    @return $string;
}

// See https://codepen.io/kevinweber/pen/dXWoRw
@function escape-svg($string) {
    @if k-string-index($string, "data:image/svg+xml") {
        @each $char, $encoded in $svg-escaped-characters {
            // Do not escape the url brackets
            @if k-string-index($string, "url(") == 1 {
                $string: url("#{str-replace(k-string-slice($string, 6, -3), $char, $encoded)}");
            } @else {
                $string: str-replace($string, $char, $encoded);
            }
        }
    }

    @return $string;
}

// #endregion

// #endregion
// #region @import "./color-system/index.import.scss"; -> scss/color-system/index.import.scss
// #region @import "./_functions.import.scss"; -> scss/color-system/_functions.import.scss
// #region @import "./_palettes.scss"; -> scss/color-system/_palettes.scss
/// Color palettes to be used in the Kendo UI themes.
/// @access private
/// @type Record<String, ColorMap>
/// @prop {ColorMap} neutral - The neutral palette
/// @prop {ColorMap} marsala - The marsala palette
/// @prop {ColorMap} bootstrapGray - The Bootstrap gray palette
/// @prop {ColorMap} bootstrapBlue - The Bootstrap blue palette
/// @prop {ColorMap} bootstrapIndigo - The Bootstrap indigo palette
/// @prop {ColorMap} bootstrapPurple - The Bootstrap purple palette
/// @prop {ColorMap} bootstrapPink - The Bootstrap pink palette
/// @prop {ColorMap} bootstrapRed - The Bootstrap red palette
/// @prop {ColorMap} bootstrapOrange - The Bootstrap orange palette
/// @prop {ColorMap} bootstrapYellow - The Bootstrap yellow palette
/// @prop {ColorMap} bootstrapGreen - The Bootstrap green palette
/// @prop {ColorMap} bootstrapTeal - The Bootstrap teal palette
/// @prop {ColorMap} bootstrapCyan - The Bootstrap cyan palette
/// @prop {ColorMap} fluentNeutral - The Fluent neutral palette
/// @prop {ColorMap} materialGray - The Material gray palette
/// @prop {ColorMap} materialBlueGray - The Material blue gray palette
/// @prop {ColorMap} materialRed - The Material red palette
/// @prop {ColorMap} materialPink - The Material pink palette
/// @prop {ColorMap} materialPurple - The Material purple palette
/// @prop {ColorMap} materialDeepPurple - The Material deep purple palette
/// @prop {ColorMap} materialIndigo - The Material indigo palette
/// @prop {ColorMap} materialBlue - The Material blue palette
/// @prop {ColorMap} materialLightBlue - The Material light blue palette
/// @prop {ColorMap} materialCyan - The Material cyan palette
/// @prop {ColorMap} materialTeal - The Material teal palette
/// @prop {ColorMap} materialGreen - The Material green palette
/// @prop {ColorMap} materialLightGreen - The Material light green palette
/// @prop {ColorMap} materialLime - The Material lime palette
/// @prop {ColorMap} materialYellow - The Material yellow palette
/// @prop {ColorMap} materialAmber - The Material amber palette
/// @prop {ColorMap} materialOrange - The Material orange palette
/// @prop {ColorMap} materialDeepOrange - The Material deep orange palette
/// @prop {ColorMap} materialBrown - The Material brown palette
/// @prop {ColorMap} primerGray - The Primer gray palette
/// @prop {ColorMap} primerBlue - The Primer blue palette
/// @prop {ColorMap} primerGreen - The Primer green palette
/// @prop {ColorMap} primerYellow - The Primer yellow palette
/// @prop {ColorMap} primerOrange - The Primer orange palette
/// @prop {ColorMap} primerRed - The Primer red palette
/// @prop {ColorMap} primerPurple - The Primer purple palette
/// @prop {ColorMap} primerPink - The Primer pink palette
/// @prop {ColorMap} primerCoral - The Primer coral palette
/// @prop {ColorMap} tailwindNeutral - The Tailwind neutral palette
/// @prop {ColorMap} tailwindSlate - The Tailwind slate palette
/// @prop {ColorMap} tailwindGray - The Tailwind gray palette
/// @prop {ColorMap} tailwindZinc - The Tailwind zinc palette
/// @prop {ColorMap} tailwindStone - The Tailwind stone palette
/// @prop {ColorMap} tailwindRed - The Tailwind red palette
/// @prop {ColorMap} tailwindOrange - The Tailwind orange palette
/// @prop {ColorMap} tailwindAmber - The Tailwind amber palette
/// @prop {ColorMap} tailwindYellow - The Tailwind yellow palette
/// @prop {ColorMap} tailwindLime - The Tailwind lime palette
/// @prop {ColorMap} tailwindGreen - The Tailwind green palette
/// @prop {ColorMap} tailwindEmerald - The Tailwind emerald palette
/// @prop {ColorMap} tailwindTeal - The Tailwind teal palette
/// @prop {ColorMap} tailwindCyan - The Tailwind cyan palette
/// @prop {ColorMap} tailwindSky - The Tailwind sky palette
/// @prop {ColorMap} tailwindBlue - The Tailwind blue palette
/// @prop {ColorMap} tailwindIndigo - The Tailwind indigo palette
/// @prop {ColorMap} tailwindViolet - The Tailwind violet palette
/// @prop {ColorMap} tailwindPurple - The Tailwind purple palette
/// @prop {ColorMap} tailwindFuchsia - The Tailwind fuchsia palette
/// @prop {ColorMap} tailwindPink - The Tailwind pink palette
/// @prop {ColorMap} tailwindRose - The Tailwind rose palette
///
/// @group color-system
$kendo-palettes: (

    // Kendo
    neutral: (
        0: #ffffff,
        50: #f8f8f8,
        100: #ededed,
        200: #d6d6d6,
        300: #b7b7b7,
        400: #949494,
        500: #767676,
        600: #5f5f5f,
        700: #494949,
        800: #373737,
        900: #282828,
        1000: #000000
    ),
    marsala: (
        0: #ffffff,
        50: #faf0f2,
        100: #f3dde0,
        200: #e197a3,
        300: #c54e69,
        400: #8b3548,
        500: #622331,
        600: #551d2a,
        700: #441620,
        800: #340f17,
        900: #23080e,
        1000: #000000
    ),


    // Bootstrap
    bootstrapGray: (
        0: #ffffff,
        100: #f8f9fa,
        200: #e9ecef,
        300: #dee2e6,
        400: #ced4da,
        500: #adb5bd,
        600: #6c757d,
        700: #495057,
        800: #343a40,
        900: #212529,
        1000: #000000
    ),
    bootstrapBlue: (
        0: #ffffff,
        100: #cfe2ff,
        200: #9ec5fe,
        300: #6ea8fe,
        400: #3d8bfd,
        500: #0d6efd,
        600: #0a58ca,
        700: #084298,
        800: #052c65,
        900: #031633,
        1000: #000000
    ),
    bootstrapIndigo: (
        0: #ffffff,
        100: #e0cffc,
        200: #c29ffa,
        300: #a370f7,
        400: #8540f5,
        500: #6610f2,
        600: #520dc2,
        700: #3d0a91,
        800: #290661,
        900: #140330,
        1000: #000000
    ),
    bootstrapPurple: (
        0: #ffffff,
        100: #e2d9f3,
        200: #c5b3e6,
        300: #a98eda,
        400: #8c68cd,
        500: #6f42c1,
        600: #59359a,
        700: #432874,
        800: #2c1a4d,
        900: #160d27,
        1000: #000000
    ),
    bootstrapPink: (
        0: #ffffff,
        100: #f7d6e6,
        200: #efadce,
        300: #e685b5,
        400: #de5c9d,
        500: #d63384,
        600: #ab296a,
        700: #801f4f,
        800: #561435,
        900: #2b0a1a,
        1000: #000000
    ),
    bootstrapRed: (
        0: #ffffff,
        100: #f8d7da,
        200: #f1aeb5,
        300: #ea868f,
        400: #e35d6a,
        500: #dc3545,
        600: #b02a37,
        700: #842029,
        800: #58151c,
        900: #2c0b0e,
        1000: #000000
    ),
    bootstrapOrange: (
        0: #ffffff,
        100: #ffe5d0,
        200: #fecba1,
        300: #feb272,
        400: #fd9843,
        500: #fd7e14,
        600: #ca6510,
        700: #984c0c,
        800: #653208,
        900: #331904,
        1000: #000000
    ),
    bootstrapYellow: (
        0: #ffffff,
        100: #fff3cd,
        200: #ffe69c,
        300: #ffda6a,
        400: #ffcd39,
        500: #ffc107,
        600: #cc9a06,
        700: #997404,
        800: #664d03,
        900: #332701,
        1000: #000000
    ),
    bootstrapGreen: (
        0: #ffffff,
        100: #d1e7dd,
        200: #a3cfbb,
        300: #75b798,
        400: #479f76,
        500: #198754,
        600: #146c43,
        700: #0f5132,
        800: #0a3622,
        900: #051b11,
        1000: #000000
    ),
    bootstrapTeal: (
        0: #ffffff,
        100: #d2f4ea,
        200: #a6e9d5,
        300: #79dfc1,
        400: #4dd4ac,
        500: #20c997,
        600: #1aa179,
        700: #13795b,
        800: #0d503c,
        900: #06281e,
        1000: #000000
    ),
    bootstrapCyan: (
        0: #ffffff,
        100: #cff4fc,
        200: #9eeaf9,
        300: #6edff6,
        400: #3dd5f3,
        500: #0dcaf0,
        600: #0aa2c0,
        700: #087990,
        800: #055160,
        900: #032830,
        1000: #000000
    ),


    // Fluent
    fluentNeutral: (
        0: #ffffff,
        50: #faf9f8,
        100: #edebe9,
        150: #e1dfdd,
        200: #d2d0ce,
        250: #c8c6c4,
        300: #bdbbb8,
        350: #b3b0ad,
        400: #a19f9d,
        450: #8a8886,
        500: #797775,
        550: #605e5c,
        600: #484644,
        650: #3b3a39,
        700: #323130,
        750: #292827,
        800: #201f1e,
        850: #1b1a19,
        900: #161514,
        950: #11100f,
        1000: #000000
    ),


    // Material
    materialGray: (
        0: #ffffff,
        50: #fafafa,
        100: #f5f5f5,
        200: #eeeeee,
        300: #e0e0e0,
        400: #bdbdbd,
        500: #9e9e9e,
        600: #757575,
        700: #616161,
        800: #424242,
        900: #212121,
        1000: #000000
    ),
    materialBlueGray: (
        0: #ffffff,
        50: #eceff1,
        100: #cfd8dc,
        200: #b0bec5,
        300: #90a4ae,
        400: #78909c,
        500: #607d8b,
        600: #546e7a,
        700: #455a64,
        800: #37474f,
        900: #263238,
        1000: #000000
    ),
    materialRed: (
        0: #ffffff,
        50: #ffebee,
        100: #ffcdd2,
        200: #ef9a9a,
        300: #e57373,
        400: #ef5350,
        500: #f44336,
        600: #e53935,
        700: #d32f2f,
        800: #c62828,
        900: #b71c1c,
        1000: #000000
    ),
    materialPink: (
        0: #ffffff,
        50: #fce4ec,
        100: #f8bbd0,
        200: #f48fb1,
        300: #f06292,
        400: #ec407a,
        // 500 was #e91e63, but changed for better contrast against white
        500: #e51a5f,
        600: #d81b60,
        700: #c2185b,
        800: #ad1457,
        900: #880e4f,
        1000: #000000
    ),
    materialPurple: (
        0: #ffffff,
        50: #f3e5f5,
        100: #e1bee7,
        200: #ce93d8,
        300: #ba68c8,
        400: #ab47bc,
        500: #9c27b0,
        600: #8e24aa,
        700: #7b1fa2,
        800: #6a1b9a,
        900: #4a148c,
        1000: #000000
    ),
    materialDeepPurple: (
        0: #ffffff,
        50: #ede7f6,
        100: #d1c4e9,
        200: #b39ddb,
        300: #9575cd,
        400: #7e57c2,
        500: #673ab7,
        600: #5e35b1,
        700: #512da8,
        800: #4527a0,
        900: #311b92,
        1000: #000000
    ),
    materialIndigo: (
        0: #ffffff,
        50: #e8eaf6,
        100: #c5cae9,
        200: #9fa8da,
        300: #7986cb,
        400: #5c6bc0,
        500: #3f51b5,
        600: #3949ab,
        700: #303f9f,
        800: #283593,
        900: #1a237e,
        1000: #000000
    ),
    materialBlue: (
        0: #ffffff,
        50: #e3f2fd,
        100: #bbdefb,
        200: #90caf9,
        300: #64b5f6,
        400: #42a5f5,
        500: #2196f3,
        600: #1e88e5,
        700: #1976d2,
        800: #1565c0,
        900: #0d47a1,
        1000: #000000
    ),
    materialLightBlue: (
        0: #ffffff,
        50: #e1f5fe,
        100: #b3e5fc,
        200: #81d4fa,
        300: #4fc3f7,
        400: #29b6f6,
        500: #03a9f4,
        600: #039be5,
        700: #0288d1,
        800: #0277bd,
        900: #01579b,
        1000: #000000
    ),
    materialCyan: (
        0: #ffffff,
        50: #e0f7fa,
        100: #b2ebf2,
        200: #80deea,
        300: #4dd0e1,
        400: #26c6da,
        500: #00bcd4,
        600: #00acc1,
        700: #0097a7,
        800: #00838f,
        900: #006064,
        1000: #000000
    ),
    materialTeal: (
        0: #ffffff,
        50: #e0f2f1,
        100: #b2dfdb,
        200: #80cbc4,
        300: #4db6ac,
        400: #26a69a,
        500: #009688,
        600: #00897b,
        700: #00796b,
        800: #00695c,
        900: #004d40,
        1000: #000000
    ),
    materialGreen: (
        0: #ffffff,
        50: #e8f5e9,
        100: #c8e6c9,
        200: #a5d6a7,
        300: #81c784,
        400: #66bb6a,
        500: #4caf50,
        600: #43a047,
        700: #388e3c,
        800: #2e7d32,
        900: #1b5e20,
        1000: #000000
    ),
    materialLightGreen: (
        0: #ffffff,
        50: #f1f8e9,
        100: #dcedc8,
        200: #c5e1a5,
        300: #aed581,
        400: #9ccc65,
        500: #8bc34a,
        600: #7cb342,
        700: #689f38,
        800: #558b2f,
        900: #33691e,
        1000: #000000
    ),
    materialLime: (
        0: #ffffff,
        50: #f9fbe7,
        100: #f0f4c3,
        200: #e6ee9c,
        300: #dce775,
        400: #d4e157,
        500: #cddc39,
        600: #c0ca33,
        700: #afb42b,
        800: #9e9d24,
        900: #827717,
        1000: #000000
    ),
    materialYellow: (
        0: #ffffff,
        50: #fffde7,
        100: #fff9c4,
        200: #fff59d,
        300: #fff176,
        400: #ffee58,
        500: #ffeb3b,
        600: #fdd835,
        700: #fbc02d,
        800: #f9a825,
        900: #f57f17,
        1000: #000000
    ),
    materialAmber: (
        0: #ffffff,
        50: #fff8e1,
        100: #ffecb3,
        200: #ffe082,
        300: #ffd54f,
        400: #ffca28,
        500: #ffc107,
        600: #ffb300,
        700: #ffa000,
        800: #ff8f00,
        900: #ff6f00,
        1000: #000000
    ),
    materialOrange: (
        0: #ffffff,
        50: #fff3e0,
        100: #ffe0b2,
        200: #ffcc80,
        300: #ffb74d,
        400: #ffa726,
        500: #ff9800,
        600: #fb8c00,
        700: #f57c00,
        800: #ef6c00,
        900: #e65100,
        1000: #000000
    ),
    materialDeepOrange: (
        0: #ffffff,
        50: #fbe9e7,
        100: #ffccbc,
        200: #ffab91,
        300: #ff8a65,
        400: #ff7043,
        500: #ff5722,
        600: #f4511e,
        700: #e64a19,
        800: #d84315,
        900: #bf360c,
        1000: #000000
    ),
    materialBrown: (
        0: #ffffff,
        50: #efebe9,
        100: #d7ccc8,
        200: #bcaaa4,
        300: #a1887f,
        400: #8d6e63,
        500: #795548,
        600: #6d4c41,
        700: #5d4037,
        800: #4e342e,
        900: #3e2723,
        1000: #000000
    ),


    // Primer
    primerGray: (
        0: #ffffff,
        50: #f6f8fa,
        100: #eaeef2,
        200: #d0d7de,
        300: #afb8c1,
        400: #8c959f,
        500: #6e7781,
        600: #57606a,
        700: #424a53,
        800: #32383f,
        900: #24292f,
        1000: #000000
    ),
    primerBlue: (
        0: #ffffff,
        50: #ddf4ff,
        100: #b6e3ff,
        200: #80ccff,
        300: #54aeff,
        400: #218bff,
        500: #0969da,
        600: #0550ae,
        700: #033d8b,
        800: #0a3069,
        900: #002155,
        1000: #000000
    ),
    primerGreen: (
        0: #ffffff,
        50: #dafbe1,
        100: #aceebb,
        200: #6fdd8b,
        300: #4ac26b,
        400: #2da44e,
        500: #1a7f37,
        600: #116329,
        700: #044f1e,
        800: #003d16,
        900: #002d11,
        1000: #000000
    ),
    primerYellow: (
        0: #ffffff,
        50: #fff8c5,
        100: #fae17d,
        200: #eac54f,
        300: #d4a72c,
        400: #bf8700,
        500: #9a6700,
        600: #7d4e00,
        700: #633c01,
        800: #4d2d00,
        900: #3b2300,
        1000: #000000
    ),
    primerOrange: (
        0: #ffffff,
        50: #fff1e5,
        100: #ffd8b5,
        200: #ffb77c,
        300: #fb8f44,
        400: #e16f24,
        500: #bc4c00,
        600: #953800,
        700: #762c00,
        800: #5c2200,
        900: #471700,
        1000: #000000
    ),
    primerRed: (
        0: #ffffff,
        50: #ffebe9,
        100: #ffcecb,
        200: #ffaba8,
        300: #ff8182,
        400: #fa4549,
        500: #cf222e,
        600: #a40e26,
        700: #82071e,
        800: #660018,
        900: #4c0014,
        1000: #000000
    ),
    primerPurple: (
        0: #ffffff,
        50: #fbefff,
        100: #ecd8ff,
        200: #d8b9ff,
        300: #c297ff,
        400: #a475f9,
        500: #8250df,
        600: #6639ba,
        700: #512a97,
        800: #3e1f79,
        900: #2e1461,
        1000: #000000
    ),
    primerPink: (
        0: #ffffff,
        50: #ffeff7,
        100: #ffd3eb,
        200: #ffadda,
        300: #ff80c8,
        400: #e85aad,
        500: #bf3989,
        600: #99286e,
        700: #772057,
        800: #611347,
        900: #4d0336,
        1000: #000000
    ),
    primerCoral: (
        0: #ffffff,
        50: #fff0eb,
        100: #ffd6cc,
        200: #ffb4a1,
        300: #fd8c73,
        400: #ec6547,
        500: #c4432b,
        600: #9e2f1c,
        700: #801f0f,
        800: #691105,
        900: #510901,
        1000: #000000
    ),


    // Tailwind
    tailwindNeutral: (
        0: #ffffff,
        50: #fafafa,
        100: #f5f5f5,
        200: #e5e5e5,
        300: #d4d4d4,
        400: #a3a3a3,
        500: #737373,
        600: #525252,
        700: #404040,
        800: #262626,
        900: #171717,
        1000: #000000
    ),
    tailwindSlate: (
        0: #ffffff,
        50: #f8fafc,
        100: #f1f5f9,
        200: #e2e8f0,
        300: #cbd5e1,
        400: #94a3b8,
        500: #64748b,
        600: #475569,
        700: #334155,
        800: #1e293b,
        900: #0f172a,
        1000: #000000
    ),
    tailwindGray: (
        0: #ffffff,
        50: #f9fafb,
        100: #f3f4f6,
        200: #e5e7eb,
        300: #d1d5db,
        400: #9ca3af,
        500: #6b7280,
        600: #4b5563,
        700: #374151,
        800: #1f2937,
        900: #111827,
        1000: #000000
    ),
    tailwindZinc: (
        0: #ffffff,
        50: #fafafa,
        100: #f4f4f5,
        200: #e4e4e7,
        300: #d4d4d8,
        400: #a1a1aa,
        500: #71717a,
        600: #52525b,
        700: #3f3f46,
        800: #27272a,
        900: #18181b,
        1000: #000000
    ),
    tailwindStone: (
        0: #ffffff,
        50: #fafaf9,
        100: #f5f5f4,
        200: #e7e5e4,
        300: #d6d3d1,
        400: #a8a29e,
        500: #78716c,
        600: #57534e,
        700: #44403c,
        800: #292524,
        900: #1c1917,
        1000: #000000
    ),
    tailwindRed: (
        0: #ffffff,
        50: #fef2f2,
        100: #fee2e2,
        200: #fecaca,
        300: #fca5a5,
        400: #f87171,
        500: #ef4444,
        600: #dc2626,
        700: #b91c1c,
        800: #991b1b,
        900: #7f1d1d,
        1000: #000000
    ),
    tailwindOrange: (
        0: #ffffff,
        50: #fff7ed,
        100: #ffedd5,
        200: #fed7aa,
        300: #fdba74,
        400: #fb923c,
        500: #f97316,
        600: #ea580c,
        700: #c2410c,
        800: #9a3412,
        900: #7c2d12,
        1000: #000000
    ),
    tailwindAmber: (
        0: #ffffff,
        50: #fffbeb,
        100: #fef3c7,
        200: #fde68a,
        300: #fcd34d,
        400: #fbbf24,
        500: #f59e0b,
        600: #d97706,
        700: #b45309,
        800: #92400e,
        900: #78350f,
        1000: #000000
    ),
    tailwindYellow: (
        0: #ffffff,
        50: #fefce8,
        100: #fef9c3,
        200: #fef08a,
        300: #fde047,
        400: #facc15,
        500: #eab308,
        600: #ca8a04,
        700: #a16207,
        800: #854d0e,
        900: #713f12,
        1000: #000000
    ),
    tailwindLime: (
        0: #ffffff,
        50: #f7fee7,
        100: #ecfccb,
        200: #d9f99d,
        300: #bef264,
        400: #a3e635,
        500: #84cc16,
        600: #65a30d,
        700: #4d7c0f,
        800: #3f6212,
        900: #365314,
        1000: #000000
    ),
    tailwindGreen: (
        0: #ffffff,
        50: #f0fdf4,
        100: #dcfce7,
        200: #bbf7d0,
        300: #86efac,
        400: #4ade80,
        500: #22c55e,
        600: #16a34a,
        700: #15803d,
        800: #166534,
        900: #14532d,
        1000: #000000
    ),
    tailwindEmerald: (
        0: #ffffff,
        50: #ecfdf5,
        100: #d1fae5,
        200: #a7f3d0,
        300: #6ee7b7,
        400: #34d399,
        500: #10b981,
        600: #059669,
        700: #047857,
        800: #065f46,
        900: #064e3b,
        1000: #000000
    ),
    tailwindTeal: (
        0: #ffffff,
        50: #f0fdfa,
        100: #ccfbf1,
        200: #99f6e4,
        300: #5eead4,
        400: #2dd4bf,
        500: #14b8a6,
        600: #0d9488,
        700: #0f766e,
        800: #115e59,
        900: #134e4a,
        1000: #000000
    ),
    tailwindCyan: (
        0: #ffffff,
        50: #ecfeff,
        100: #cffafe,
        200: #a5f3fc,
        300: #67e8f9,
        400: #22d3ee,
        500: #06b6d4,
        600: #0891b2,
        700: #0e7490,
        800: #155e75,
        900: #164e63,
        1000: #000000
    ),
    tailwindSky: (
        0: #ffffff,
        50: #f0f9ff,
        100: #e0f2fe,
        200: #bae6fd,
        300: #7dd3fc,
        400: #38bdf8,
        500: #0ea5e9,
        600: #0284c7,
        700: #0369a1,
        800: #075985,
        900: #0c4a6e,
        1000: #000000
    ),
    tailwindBlue: (
        0: #ffffff,
        50: #eff6ff,
        100: #dbeafe,
        200: #bfdbfe,
        300: #93c5fd,
        400: #60a5fa,
        500: #3b82f6,
        600: #2563eb,
        700: #1d4ed8,
        800: #1e40af,
        900: #1e3a8a,
        1000: #000000
    ),
    tailwindIndigo: (
        0: #ffffff,
        50: #eef2ff,
        100: #e0e7ff,
        200: #c7d2fe,
        300: #a5b4fc,
        400: #818cf8,
        500: #6366f1,
        600: #4f46e5,
        700: #4338ca,
        800: #3730a3,
        900: #312e81,
        1000: #000000
    ),
    tailwindViolet: (
        0: #ffffff,
        50: #f5f3ff,
        100: #ede9fe,
        200: #ddd6fe,
        300: #c4b5fd,
        400: #a78bfa,
        500: #8b5cf6,
        600: #7c3aed,
        700: #6d28d9,
        800: #5b21b6,
        900: #4c1d95,
        1000: #000000
    ),
    tailwindPurple: (
        0: #ffffff,
        50: #faf5ff,
        100: #f3e8ff,
        200: #e9d5ff,
        300: #d8b4fe,
        400: #c084fc,
        500: #a855f7,
        600: #9333ea,
        700: #7e22ce,
        800: #6b21a8,
        900: #581c87,
        1000: #000000
    ),
    tailwindFuchsia: (
        0: #ffffff,
        50: #fdf4ff,
        100: #fae8ff,
        200: #f5d0fe,
        300: #f0abfc,
        400: #e879f9,
        500: #d946ef,
        600: #c026d3,
        700: #a21caf,
        800: #86198f,
        900: #701a75,
        1000: #000000
    ),
    tailwindPink: (
        0: #ffffff,
        50: #fdf2f8,
        100: #fce7f3,
        200: #fbcfe8,
        300: #f9a8d4,
        400: #f472b6,
        500: #ec4899,
        600: #db2777,
        700: #be185d,
        800: #9d174d,
        900: #831843,
        1000: #000000
    ),
    tailwindRose: (
        0: #ffffff,
        50: #fff1f2,
        100: #ffe4e6,
        200: #fecdd3,
        300: #fda4af,
        400: #fb7185,
        500: #f43f5e,
        600: #e11d48,
        700: #be123c,
        800: #9f1239,
        900: #881337,
        1000: #000000
    )

) !default;

// #endregion

@function k-generate-theme-variant( $variant, $matrix, $src-palette-name ) {
    $result: ();

    @each $ui-state, $indices in $matrix {
        $prefix: if( $ui-state == DEFAULT, "", "#{$ui-state}-" );
        $indices-count: k-list-length( $indices );

        $bg-prop: k-list-nth( $indices, 1 );
        $text-prop: k-list-nth( $indices, 2 );
        $border-prop: k-list-nth( $indices, 3 );
        $gradient-prop: if( $indices-count > 3, k-list-nth( $indices, 4 ), null );
        $shadow-prop: if( $indices-count > 4, k-list-nth( $indices, 5 ), null );
        $outline-prop: if( $indices-count > 5, k-list-nth( $indices, 6 ), null );

        // Take value from the palette only if it is a number
        $bg: if( k-meta-type-of( $bg-prop ) == number, k-get-theme-color( $src-palette-name, $bg-prop ), $bg-prop );
        $text: if( k-meta-type-of( $text-prop ) == number, k-get-theme-color( $src-palette-name, $text-prop ), $text-prop );
        $border: if( k-meta-type-of( $border-prop ) == number, k-get-theme-color( $src-palette-name, $border-prop ), $border-prop );
        $gradient: $gradient-prop;
        $shadow: $shadow-prop;
        $outline: $outline-prop;

        $result: k-map-merge($result, (
            #{$prefix}bg: $bg,
            #{$prefix}text: $text,
            #{$prefix}border: $border,
            #{$prefix}gradient: $gradient,
            #{$prefix}shadow: $shadow,
            #{$prefix}outline: $outline
        ));
    }

    $result: (
        #{$variant}: $result
    );

    @return $result;

};


@function k-process-variant-matrices( $theme-matrix, $palette-matrix: () ) {
    $result: ();

    // @debug $theme-matrix;
    // @debug $palette-matrix;

    @each $variant, $definition in $theme-matrix {
        $tc-index: k-string-index( $variant, "THEME_COLOR" );
        $src-palette-name: k-map-get( $definition, PALETTE );
        $matrix: k-map-remove( $definition, PALETTE );

        @if ($tc-index == null ) { // stylelint-disable-line
            $tmp-result: k-generate-theme-variant( $variant, $matrix, $src-palette-name );
            $result: k-map-merge( $result, $tmp-result);
        } @else {
            @each $color, $palette in $palette-matrix {
                $variant-name: k-string-replace( $variant, THEME_COLOR, $color);
                $palette-name: k-string-unquote($src-palette-name + "");

                @if ($palette-name == THEME_COLOR) {
                    $palette-name: k-string-replace( $palette-name, THEME_COLOR, $color );
                    $palette-name: k-map-get( $palette-matrix, $palette-name );
                }

                $tmp-result: k-generate-theme-variant( $variant-name, $matrix, $palette-name );
                $result: k-map-merge( $result, $tmp-result );
            }
        }
    }

    @return $result;
}


@function k-get-theme-palette( $name ) {
    @return k-map-get( $kendo-palettes, $name );
}

@function k-get-theme-color( $palette, $hue ) {
    @if ( k-meta-type-of( $palette ) == "map" ) {
        @return k-map-get( $palette, $hue );
    }

    @return k-map-get( k-get-theme-palette( $palette ), $hue );
}

@function k-get-theme-color-var( $name, $fallback: "inherit", $prefix: "kendo-" ) {
    @return var( --#{$prefix}#{$name}, #{$fallback} );
}

@function k-generate-theme-variation( $theme-color, $source-palette-name, $mapping ) {
    $temp: ( );

    @each $ui-state, $indices in $mapping {
        $prefix: if( $ui-state == normal, '', '#{$ui-state}-' );

        $bg-prop: k-list-nth($indices, 1);
        $text-prop: k-list-nth($indices, 2);
        $border-prop: k-list-nth($indices, 3);

        // Take value from the palette only if it is a number
        $bg: if( k-meta-type-of($bg-prop) == number, k-get-theme-color-var( #{$source-palette-name}-#{$bg-prop} ), $bg-prop );
        $text: if( k-meta-type-of($text-prop) == number, k-get-theme-color-var( #{$source-palette-name}-#{$text-prop} ), $text-prop );
        $border: if( k-meta-type-of($border-prop) == number, k-get-theme-color-var( #{$source-palette-name}-#{$border-prop} ), $border-prop );


        $temp: k-map-deep-merge( $temp, (
            #{$prefix}bg: $bg,
            #{$prefix}text: $text,
            #{$prefix}border: $border
        ));

        // Add outline if provided in the map
        @if ( k-list-length($indices) > 3 ) {
            $outline-prop: k-list-nth($indices, 4);
            $outline: if( k-meta-type-of($outline-prop) == number, k-get-theme-color-var( #{$source-palette-name}-#{$outline-prop} ), $outline-prop );

            $temp: k-map-deep-merge( $temp, (
                #{$prefix}outline: $outline
            ));
        }
    }

    $map: (
        #{$theme-color}: $temp
    );

    @return $map;

};

@function k-generate-fill-mode-theme-variation( $fill-mode, $theme-color, $source-palette-name, $mapping ) {

    $map: k-generate-theme-variation( $theme-color, $source-palette-name, $mapping );

    $result: (
       #{$fill-mode}: $map
    );

    @return $result;
}

// #endregion
// #region @import "./_mixins.import.scss"; -> scss/color-system/_mixins.import.scss
@mixin k-css-vars($map) {
    @each $group, $values in $map {
        @each $key, $value in $values {
            --kendo-#{k-meta-inspect($group)}-#{$key}: #{$value};
        }
    }
}

// #endregion
// #region @import "./_variables.scss"; -> scss/color-system/_variables.scss
// Color constants

/// The color white.
/// Note: you cannot change this value.
/// @type Color
/// @group color-system
$kendo-color-white: #ffffff; // stylelint-disable-line scss/dollar-variable-default

/// The color black.
/// Note: you cannot change this value.
/// @type Color
/// @group color-system
$kendo-color-black: #000000; // stylelint-disable-line scss/dollar-variable-default

/// The color transparent.
/// Note: you cannot change this value.
/// @type Color
/// @group color-system
$kendo-color-rgba-transparent: rgba( 0, 0, 0, 0 ); // stylelint-disable-line scss/dollar-variable-default

/// A gradient that goes from transparent to black.
/// Note: you cannot change this value.
/// @type Gradient
/// @group color-system
$kendo-gradient-transparent-to-black: rgba( black, 0 ), black; // stylelint-disable-line scss/dollar-variable-default

/// A gradient that goes from transparent to white.
/// Note: you cannot change this value.
/// @type Gradient
/// @group color-system
$kendo-gradient-transparent-to-white: rgba( white, 0 ), white; // stylelint-disable-line scss/dollar-variable-default

/// A gradient that goes from black to transparent.
/// Note: you cannot change this value.
/// @type Gradient
/// @group color-system
$kendo-gradient-black-to-transparent: black, rgba( black, 0 ); // stylelint-disable-line scss/dollar-variable-default

/// A gradient that goes from white to transparent.
/// Note: you cannot change this value.
/// @type Gradient
/// @group color-system
$kendo-gradient-white-to-transparent: white, rgba( white, 0 ); // stylelint-disable-line scss/dollar-variable-default

/// A gradient that cycles through the colors of the rainbow.
/// Note: you cannot change this value.
/// @type Gradient
/// @group color-system
$kendo-gradient-rainbow: #ff0000, #ffff00, #00ff00, #00ffff, #0000ff, #ff00ff, #ff0000; // stylelint-disable-line scss/dollar-variable-default


// Root styles
$kendo-body-bg: $kendo-color-white !default;
$kendo-body-text: k-get-theme-color-var( neutral-160 ) !default;

// Component styles
$kendo-component-bg: $kendo-body-bg !default;
$kendo-component-text: $kendo-body-text !default;
$kendo-component-border: k-get-theme-color-var( neutral-30 ) !default;

// States styles
$kendo-hover-bg: k-get-theme-color-var( neutral-20 ) !default;
$kendo-hover-text: k-get-theme-color-var( neutral-190 ) !default;
$kendo-hover-border: k-get-theme-color-var( neutral-20 ) !default;

$kendo-selected-bg: k-get-theme-color-var( neutral-30 ) !default;
$kendo-selected-text: k-get-theme-color-var( neutral-160 ) !default;
$kendo-selected-border: k-get-theme-color-var( neutral-130 ) !default;

$kendo-selected-hover-bg: k-get-theme-color-var( neutral-40 ) !default;
$kendo-selected-hover-text: k-get-theme-color-var( neutral-190 ) !default;
$kendo-selected-hover-border: k-get-theme-color-var( neutral-130 ) !default;

$kendo-focus-outline: k-get-theme-color-var( neutral-130 ) !default;

$kendo-subtle-text: k-get-theme-color-var( neutral-130 ) !default;

// Shadows

/// Shadow for cards and grid item thumbnails.
/// Equivalent to fluent depth 4.
$kendo-box-shadow-depth-1: 0 1.6px 3.6px rgba( $kendo-color-black, 0.132 ), 0 0.3px 0.9px rgba( $kendo-color-black, 0.108 ) !default;
/// Shadow for command bars and dropdowns.
/// Equivalent to fluent depth 8.
$kendo-box-shadow-depth-2: 0 3.2px 7.2px rgba( $kendo-color-black, 0.132 ), 0 0.6px 1.8px rgba( $kendo-color-black, 0.108 ) !default;
/// Shadow for teaching callouts and hover cards / tooltips.
/// Equivalent to fluent depth 16.
$kendo-box-shadow-depth-3: 0 6.4px 14.4px rgba( $kendo-color-black, 0.132 ), 0 1.2px 3.6px rgba( $kendo-color-black, 0.108 ) !default;
/// Shadow for panels and pop up dialogs.
/// Equivalent to fluent depth 64.
$kendo-box-shadow-depth-4: 0 25.6px 57.6px rgba( $kendo-color-black, 0.22 ), 0 4.8px 14.4px rgba( $kendo-color-black, 0.18 ) !default;

// Link
$kendo-link-text: k-get-theme-color-var( primary-100 ) !default;
$kendo-link-hover-text: k-get-theme-color-var( primary-120 ) !default;

// Validator
$kendo-invalid-bg: initial !default;
$kendo-invalid-text: k-get-theme-color-var( error-190 ) !default;
$kendo-invalid-border: k-get-theme-color-var( error-190 ) !default;
$kendo-invalid-shadow: null !default;

// Disabled Styling
$kendo-disabled-bg: k-get-theme-color-var( neutral-20 ) !default;
$kendo-disabled-text: k-get-theme-color-var( neutral-90 ) !default;
$kendo-disabled-border: transparent !default;

// Loading
$kendo-loading-bg: $kendo-component-bg !default;
$kendo-loading-text: currentColor !default;


// Theme colors
$kendo-theme-colors: (
    primary: (
        text: k-get-theme-color-var( primary-130 ),
        bg: k-get-theme-color-var( primary-20 ),
        border: k-get-theme-color-var( primary-20 )
    ),
    info: (
        text: k-get-theme-color-var( info-190 ),
        bg: k-get-theme-color-var( info-20 ),
        border: k-get-theme-color-var( info-20 )
    ),
    success: (
        text: k-get-theme-color-var( success-190 ),
        bg: k-get-theme-color-var( success-20 ),
        border: k-get-theme-color-var( success-20 )
    ),
    warning: (
        text: k-get-theme-color-var( neutral-160 ),
        bg: k-get-theme-color-var( warning-20 ),
        border: k-get-theme-color-var( warning-20 )
    ),
    error: (
        text: k-get-theme-color-var( error-190 ),
        bg: k-get-theme-color-var( error-20 ),
        border: k-get-theme-color-var( error-20 )
    )
) !default;


@mixin color-system-styles() {
    :root {
        @include k-css-vars( $kendo-palettes );
        @include k-css-vars( $kendo-theme-colors );

        --kendo-body-bg: #{$kendo-body-bg};
        --kendo-body-text: #{$kendo-body-text};

        --kendo-component-bg: #{$kendo-component-bg};
        --kendo-component-text: #{$kendo-component-text};
        --kendo-component-border: #{$kendo-component-border};

        --kendo-box-shadow-depth-1: #{$kendo-box-shadow-depth-1};
        --kendo-box-shadow-depth-2: #{$kendo-box-shadow-depth-2};
        --kendo-box-shadow-depth-3: #{$kendo-box-shadow-depth-3};
        --kendo-box-shadow-depth-4: #{$kendo-box-shadow-depth-4};

        --kendo-link-text: #{$kendo-link-text};
        --kendo-link-hover-text: #{$kendo-link-hover-text};

        --kendo-disabled-bg: #{$kendo-disabled-bg};
        --kendo-disabled-text: #{$kendo-disabled-text};
        --kendo-disabled-border: #{$kendo-disabled-border};

        --kendo-hover-bg: #{$kendo-hover-bg};
        --kendo-hover-text: #{$kendo-hover-text};
        --kendo-hover-border: #{$kendo-hover-border};

        --kendo-selected-bg: #{$kendo-selected-bg};
        --kendo-selected-text: #{$kendo-selected-text};
        --kendo-selected-border: #{$kendo-selected-border};

        --kendo-selected-hover-bg: #{$kendo-selected-hover-bg};
        --kendo-selected-hover-text: #{$kendo-selected-hover-text};
        --kendo-selected-hover-border: #{$kendo-selected-hover-border};

        --kendo-focus-outline: #{$kendo-focus-outline};

        --kendo-subtle-text: #{$kendo-subtle-text};

        --kendo-invalid-bg: #{$kendo-invalid-bg};
        --kendo-invalid-text: #{$kendo-invalid-text};
        --kendo-invalid-border: #{$kendo-invalid-border};
        --kendo-invalid-shadow: #{$kendo-invalid-shadow};

        --kendo-border-radius-sm: #{$kendo-border-radius-sm};
        --kendo-border-radius-md: #{$kendo-border-radius-md};
        --kendo-border-radius-lg: #{$kendo-border-radius-lg};
    }

    // Text colors
    @each $theme-color, $color-props in $kendo-theme-colors {
        $_color: k-map-get( $color-props, text );

        .k-text-#{$theme-color},
        .k-color-#{$theme-color} {
            color: var( --kendo-text-#{$theme-color}, #{$_color} );
        }
        .\!k-text-#{$theme-color},
        .\!k-color-#{$theme-color} {
            color: var( --kendo-text-#{$theme-color}, #{$_color} ) !important; // stylelint-disable-line declaration-no-important
        }

        .k-bg-#{$theme-color} {
            background-color: var( --kendo-bg-#{$theme-color}, #{$_color} );
        }
        .\!k-bg-#{$theme-color} {
            background-color: var( --kendo-bg-#{$theme-color}, #{$_color} ) !important; // stylelint-disable-line declaration-no-important
        }
    };
}

// #endregion
// @import "./_palettes.scss";

// #endregion
// #region @import "./mixins/index.import.scss"; -> scss/mixins/index.import.scss
// #region @import "./_border-radius.scss"; -> scss/mixins/_border-radius.scss
// Border radius
@mixin border-radius( $radius: null ) {
    @if $kendo-enable-rounded {
        border-radius: $radius;
    }
}

@mixin border-top-radius( $radius: null ) {
    @if $kendo-enable-rounded {
        border-top-left-radius: $radius;
        border-top-right-radius: $radius;
    }
}

@mixin border-right-radius( $radius: null ) {
    @if $kendo-enable-rounded {
        border-top-right-radius: $radius;
        border-bottom-right-radius: $radius;
    }
}

@mixin border-bottom-radius( $radius: null ) {
    @if $kendo-enable-rounded {
        border-bottom-right-radius: $radius;
        border-bottom-left-radius: $radius;
    }
}

@mixin border-left-radius( $radius: null ) {
    @if $kendo-enable-rounded {
        border-top-left-radius: $radius;
        border-bottom-left-radius: $radius;
    }
}

@mixin border-top-radius-only( $radius: null ) {
    @if $kendo-enable-rounded {
        border-radius: $radius $radius 0 0;
    }
}

@mixin border-right-radius-only( $radius: null ) {
    @if $kendo-enable-rounded {
        border-radius: 0 $radius $radius 0;
    }
}

@mixin border-bottom-radius-only( $radius: null ) {
    @if $kendo-enable-rounded {
        border-radius: 0 0 $radius $radius;
    }
}

@mixin border-left-radius-only( $radius: null ) {
    @if $kendo-enable-rounded {
        border-radius: $radius 0 0 $radius;
    }
}

// #endregion
// #region @import "./_box-shadow.scss"; -> scss/mixins/_box-shadow.scss
@mixin box-shadow( $shadow... ) {
    @if $kendo-enable-shadows and k-list-nth($shadow, 1) {
        box-shadow: $shadow;
    }
}

// #endregion
// #region @import "./_data-uri.scss"; -> scss/mixins/_data-uri.scss
/// A list of files converted to data URIs
/// @access private
$_kendo-data-uris: () !default;

/// Saves a data URI that can be used from the $_kendo-data-uris map instead of a file reference.
/// @access private
/// @param {String} $name - The name of the resource.
/// @param {String} $content - The data URI of the resource.
/// @require $_kendo-data-uris
@mixin register-data-uri( $name, $content ) {
    @if ( k-map-has-key( $_kendo-data-uris, $name ) ) {
        @warn "Attempt to redefine data URI of file `#{$name}`.";
    }

    $_kendo-data-uris: k-map-merge( $_kendo-data-uris, ( $name: $content ) ) !global;
}

// #endregion
// #region @import "./_disabled.scss"; -> scss/mixins/_disabled.scss
// Disabled
@mixin disabled( $kendo-disabled-styling ) {
    outline: none;
    cursor: default;
    opacity: k-map-get($kendo-disabled-styling, opacity);
    filter: k-map-get($kendo-disabled-styling, filter);
    pointer-events: none;
    box-shadow: none;
}

@mixin disabled-color( $color: null, $bg: null, $border: null ) {
    outline: none;
    cursor: default;
    background-color: $bg;
    color: $color;
    border-color: $border;
    pointer-events: none;
    box-shadow: none;
}

// #endregion
// #region @import "./_decoration.scss"; -> scss/mixins/_decoration.scss
@mixin fill( $color: null, $bg: null, $border: null, $gradient: null ) {
    @if $border {
        border-color: $border;
    }
    @if $color {
        color: $color;
    }
    @if $bg {
        background-color: $bg;
    }
    @if $gradient {
        @include linear-gradient( $gradient );
    }
}

@mixin linear-gradient( $gradient: null ) {
    @if $gradient and $kendo-enable-gradients {
        @if $gradient == none {
            background-image: none;
        } @else {
            background-image: linear-gradient( $gradient );
        }
    }
}

@mixin repeating-striped-gradient( $color: rgba(255,255,255,.15), $background: #FFF, $angle: 45deg, $largeStep: 2px, $smallStep: 1px) {
    background-image: repeating-linear-gradient($angle, $background, $background $smallStep, $color $smallStep, $color $largeStep);
}

// #endregion
// #region @import "./_focus-indicator.scss"; -> scss/mixins/_focus-indicator.scss
@mixin focus-indicator( $indicator, $inset: false, $themeable: false, $type: "box-shadow" ) {
    @if $kendo-enable-focus-contrast and k-list-nth($indicator, 1) {
        @include box-shadow( if( $inset, inset, null ) 0 0 0 2px if( $themeable, currentColor, rgb( 0, 0, 0 ) ) );
    } @else {
        @include box-shadow( $indicator... );
    }
}

// #endregion
// #region @import "./_gradient.scss"; -> scss/mixins/_gradient.scss
@mixin linear-gradient( $gradient: null ) {
    @if $gradient and $kendo-enable-gradients {
        @if $gradient == none {
            background-image: none;
        } @else {
            background-image: linear-gradient( $gradient );
        }
    }
}

@mixin striped-gradient( $color: rgba( white, .15 ), $angle: 45deg ) {
    background-image: linear-gradient( $angle, $color 25%, transparent 25%, transparent 50%, $color 50%, $color 75%, transparent 75%, transparent );
}

@mixin repeating-striped-gradient( $color: rgba( white, .15), $background: white, $angle: 45deg, $large-step: 2px, $small-step: 1px ) {
    background-image: repeating-linear-gradient( $angle, $background, $background $small-step, $color $small-step, $color $large-step );
}

@mixin checkerboard-gradient( $primary-color: white, $secondary-color: rgba( black, .09 ), $size: 10px ) {
    $_position: calc( #{$size} / 2 );

    background:
        linear-gradient( 45deg, $secondary-color 25%, transparent 25%, transparent 75%, $secondary-color 75%, $secondary-color ),
        linear-gradient( 45deg, $secondary-color 25%, transparent 25%, transparent 75%, $secondary-color 75%, $secondary-color ),
        $primary-color;
    background-repeat: repeat, repeat;
    background-position: 0px 0px, $_position $_position;
    transform-origin: 0 0 0;
    background-origin: padding-box, padding-box;
    background-size: $size $size, $size $size;
    box-shadow: none;
    text-shadow: none;
    transition: none;
    transform: scaleX(1) scaleY(1) scaleZ(1);
}

// #endregion
// #region @import "./_hide-scrollbar.scss"; -> scss/mixins/_hide-scrollbar.scss
$kendo-scrollbar-width: 17px !default;

@mixin hide-scrollbar( $dir: "right", $max-scrollbar: 100px) {
    // anything larger than the scrollbar width will do
    $scrollbar-size: var( --kendo-scrollbar-width, #{$kendo-scrollbar-width} );
    $margin: calc( -#{$max-scrollbar} - #{$scrollbar-size} );

    padding-right: $max-scrollbar;
    padding-left: $max-scrollbar;

    @if ( $dir == "right" ) {
        margin-left: -$max-scrollbar;
        margin-right: $margin;
    } @else {
        margin-left: $margin;
        margin-right: -$max-scrollbar;
    }
}

@mixin hide-scrollbar-dir-agnostic($max-scrollbar: 100px) {
    // anything larger than the scrollbar width will do
    $scrollbar-size: var( --kendo-scrollbar-width, #{$kendo-scrollbar-width} );
    $margin: calc( -#{$max-scrollbar} - #{$scrollbar-size} );

    padding-inline-end: $max-scrollbar;
    padding-inline-start: $max-scrollbar;

    margin-inline-start: -$max-scrollbar;
    margin-inline-end: $margin;
}

// #endregion
// #region @import "./_import-once.scss"; -> scss/mixins/_import-once.scss
/// A list of exported modules.
/// @access private
$_kendo-imported-modules: () !default;

/// Outputs a module once, no matter how many times it is included.
/// @access public
/// @param {String} $name - The name of the exported module.
/// @require $_kendo-imported-modules
@mixin exports( $name ) {
    @if (k-list-index( $_kendo-imported-modules, $name ) == null) { // stylelint-disable-line
        $_kendo-imported-modules: k-list-append( $_kendo-imported-modules, $name ) !global;
        @content;
    }
}

// #endregion
// #region @import "./_typography.scss"; -> scss/mixins/_typography.scss
@mixin typography( $font-size: null, $font-family: null, $line-height: null, $font-weight: null, $letter-spacing: null ) {
    font-size: $font-size;
    font-family: $font-family;
    line-height: $line-height;
    font-weight: $font-weight;
    letter-spacing: $letter-spacing;
}

// #endregion

@mixin background-image( $background-image: null ) {
    @if $background-image {
        background-image: url(#{$background-image});
    }
}

// #endregion
// #region @import "./module-system/index.import.scss"; -> scss/module-system/index.import.scss
// #region @import "./_components.scss"; -> scss/module-system/_components.scss
$kendo-components: (
    // Typography and utils
    "typography",
    "utils",
    "draggable",

    // Generic content
    "table",
    "icon",
    "chip",
    "messagebox",

    // Primitive components
    "input",
    "list",
    "listgroup",
    "overlay",
    "ripple",
    "virtual-scroller",

    // Indicators
    "avatar",
    "badge",
    "color-preview",
    "loader",
    "skeleton",
    "tooltip",

    // Native forms
    "button",
    "split-button",
    "menu-button",
    "textbox",
    "textarea",
    "checkbox",
    "listbox",
    "progressbar",
    "radio",
    "slider",

    // Form helpers
    "form",
    "validator",
    "floating-label",

    // Form requirements
    "calendar",
    "popup",
    "time-selector",

    // Augmented inputs
    "autocomplete",
    "captcha",
    "color-palette",
    "color-gradient",
    "color-editor",
    "color-picker",
    "combobox",
    "date-input",
    "date-picker",
    "time-picker",
    "date-time-picker",
    "date-range-picker",
    "dropdown-grid",
    "dropdown-list",
    "dropdown-tree",
    "masked-textbox",
    "multiselect",
    "numeric-textbox",
    "rating",
    "searchbox",
    "switch",
    "upload",
    "dropzone",

    // Command interfaces
    "actions",
    "appbar",
    "fab",
    "menu",
    "toolbar",

    // Popups and modals
    "action-sheet",
    "dialog",
    "drawer",
    "notification",
    "popover",
    "responsive-panel",
    "window",

    // Navigation
    "bottom-navigation",
    "breadcrumb",
    "pager",
    "stepper",
    "tabstrip",
    "treeview",
    "wizard",

    // Layout & containers
    "card",
    "expander",
    "panelbar",
    "splitter",
    "tile-layout",

    // Data management
    "grid",
    "listview",
    "spreadsheet",
    "pivotgrid",
    "treelist",
    "filter",
    "file-manager",
    "task-board",

    // Editors
    "editor",
    "image-editor",

    // Scheduling
    "gantt",
    "scheduler",

    // Misc
    "adaptive",
    "chat",
    "media-player",
    "timeline",
    "pdf-viewer",
    "scroller",
    "scrollview",

    // Dataviz
    "dataviz",
    "map",
    "orgchart",
    "signature"
) !default;

// #endregion
// #region @import "./_dependencies.scss"; -> scss/module-system/_dependencies.scss
$_kendo-dependencies: (
    action-sheet: (
        "icon",
        "listgroup",
        "popup"
    ),
    actions: (),
    adaptive: (),
    appbar: (),
    autocomplete: (
        "button",
        "icon",
        "input",
        "list",
        "popup"
    ),
    avatar: (),
    badge: (),
    bottom-navigation: (
        "icon"
    ),
    breadcrumb: (
        "icon",
        "textbox"
    ),
    button: (
        "badge",
        "icon"
    ),
    calendar: (
        "button",
        "list"
    ),
    captcha: (
        "button",
        "slider",
        "textbox"
    ),
    card: (
        "actions",
        "button",
        // "utils/flex",
        // "utils/grid"
    ),
    chat: (
        "avatar",
        "card",
        "textbox",
        "toolbar"
    ),
    checkbox: (),
    chip: (),
    color-editor: (
        "actions",
        "color-palette",
        "color-preview",
        "color-gradient"
    ),
    color-gradient: (
        "button",
        "numeric-textbox",
        "slider",
        "textbox",
        // "utils/flex"
    ),
    color-palette: (
        "color-preview",
        // "utils/flex"
    ),
    color-preview: (),
    color-picker: (
        "button",
        "color-editor",
        "input",
        "popup"
    ),
    combobox: (
        "button",
        "input",
        "popup",
        "list"
    ),
    cursor: (),
    dataviz: (
        "popup",
        "tooltip"
    ),
    date-input: (
        "input"
    ),
    date-picker: (
        "button",
        "calendar",
        "icon",
        "input",
        "popup"
    ),
    date-range-picker: (
        "date-picker"
    ),
    date-time-picker: (
        "date-picker",
        "time-picker"
    ),
    dialog: (
        "window"
    ),
    draggable: (),
    drawer: (
        "list",
        "overlay"
    ),
    dropdown-grid: (
        "button",
        "grid",
        "icon",
        "input",
        "popup",
        "table"
    ),
    dropdown-list: (
        "button",
        "icon",
        "input",
        "list",
        "popup"
    ),
    dropdown-tree: (
        "button",
        "icon",
        "input",
        "popup",
        "treeview"
    ),
    dropzone: (),
    editor: (
        "button",
        "checkbox",
        "color-picker",
        "combobox",
        "dropdown-list",
        "toolbar",
        "upload",
        "window"
    ),
    expander: (
        "icon",
        "list",
        // "utils/display",
        // "utils/flex"
    ),
    fab: (
        "button",
        "badge",
        // "utils/position"
    ),
    file-manager: (
        "breadcrumb",
        "dialog",
        "grid",
        "icon",
        "input",
        "listview",
        "menu",
        "splitter",
        "switch",
        "toolbar",
        "treeview",
        "upload"
    ),
    filter: (
        "button",
        "checkbox",
        "date-time-picker",
        "dropdown-list",
        "input",
        "numeric-textbox",
        "textbox",
        "toolbar"
    ),
    floating-label: (
        "input"
    ),
    form: (
        "actions",
        "button",
        "toolbar"
    ),
    gantt: (
        "button",
        "date-time-picker",
        "input",
        "numeric-textbox",
        "splitter",
        "treelist",
        "validator",
        "window"
    ),
    grid: (
        "actions",
        "button",
        "checkbox",
        "dialog",
        "input",
        "list",
        "menu",
        "pager",
        "popup",
        "radio",
        "skeleton",
        "toolbar",
        "validator"
    ),
    icon: (),
    image-editor: (
        "checkbox",
        "dropdown-list",
        "form",
        "numeric-textbox",
        "toolbar"
    ),
    input: (
        "button",
        "icon"
    ),
    list: (),
    listbox: (
        "button",
        "list"
    ),
    listgroup: (),
    listview: (
        "pager",
        // "utils/grid",
        // "utils/flex"
    ),
    loader: (),
    map: (
        "button",
        "scroller",
        // "utils/position"
    ),
    masked-textbox: (
        "button",
        "input"
    ),
    media-player: (
        "slider",
        "toolbar"
    ),
    menu: (
        "button",
        "icon",
        "popup"
    ),
    menu-button: (
        "button",
        "menu"
    ),
    messagebox: (),
    multiselect: (
        "button",
        "chip",
        "icon",
        "input",
        "list",
        "popup"
    ),
    notification: (
        "button",
        "icon",
        "popup"
    ),
    numeric-textbox: (
        "button",
        "icon",
        "input"
    ),
    orgchart: (
        "button",
        "card",
        "dropdown-list",
        "icon",
        "menu",
        "textbox",
        "upload",
        "window"
    ),
    overlay: (),
    pager: (
        "dropdown-list",
        "icon",
        "list",
        "toolbar"
    ),
    panelbar: (
        "icon"
    ),
    pdf-viewer: (
        "button",
        "combobox",
        "dialog",
        "dropzone",
        "pager",
        "textbox",
        "toolbar",
        "window"
    ),
    pivotgrid: (
        "dialog",
        "grid",
        "list",
        "treeview",
        // "utils/flex",
        // "utils/grid",
        // "utils/position"
    ),
    popover: (
        "card",
        "popup"
    ),
    popup: (),
    progressbar: (),
    radio: (),
    rating: (
        "icon"
    ),
    responsive-panel: (),
    ripple: (),
    scheduler: (
        "button",
        "date-time-picker",
        "dialog",
        "dropdown-list",
        "toolbar",
        "tooltip"
    ),
    scroller: (),
    scrollview: (
        "button"
    ),
    searchbox: (
        "button",
        "input"
    ),
    signature: (
        "button",
        "input"
    ),
    skeleton: (),
    slider: (
        "button",
        "tooltip"
    ),
    split-button: (
        "button",
        "menu"
    ),
    splitter: (
        "icon"
    ),
    spreadsheet: (
        "button",
        "checkbox",
        "color-picker",
        "combobox",
        "date-time-picker",
        "dropdown-list",
        "list",
        "menu",
        "radio",
        "tabstrip",
        "toolbar",
        "treeview",
        "upload",
        "window"
    ),
    stepper: (
        "icon",
        "progressbar"
    ),
    switch: (),
    table: (),
    tabstrip: (
        "button",
        "icon"
    ),
    task-board: (
        "card",
        "form",
        "searchbox",
        "textbox",
        "toolbar"
    ),
    textarea: (
        "button",
        "icon",
        "input"
    ),
    textbox: (
        "button",
        "icon",
        "input"
    ),
    tile-layout: (
        "card"
    ),
    time-duration-picker: (
        "button",
        "icon",
        "input",
        "list",
        "popup",
        "time-selector"
    ),
    time-selector: (
        "actions",
        "button",
        "list"
    ),
    timeline: (
        "button",
        "card",
        "icon"
    ),
    time-picker: (
        "button",
        "icon",
        "input",
        "list",
        "popup",
        "time-selector"
    ),
    toolbar: (
        "button",
        "icon",
        "menu",
        "popup"
    ),
    tooltip: (
        "button",
        "icon",
        "popup"
    ),
    treelist: (
        "grid"
    ),
    treeview: (
        "checkbox",
        "icon"
    ),
    typography: (),
    upload: (
        "actions",
        "button",
        "dropzone",
        "icon",
        "listgroup",
        "toolbar"
    ),
    utils: (),
    validator: (
        "tooltip"
    ),
    virtual-scroller: (),
    window: (
        "actions",
        "button",
        "icon",
        "overlay"
    ),
    wizard: (
        "button",
        "form",
        "stepper"
    )
);

// #endregion

$_deps: () !default;
$_imported: () !default;

// stylelint-disable scss/at-if-no-null
@mixin module-register( $name: null, $dependencies: null ) {
    @if (k-list-index( $kendo-components, $name) != null) {
        $_deps: k-map-merge( $_deps, ( $name: $dependencies ) );

        @if $dependencies {
            @each $dep in $dependencies {
                @if ( k-list-index( $kendo-components, $dep ) == null ) {
                    @warn "The module \"#{$name}\" depends on module \"#{$dep}\", but the styles will not be loaded!";
                }
            }
        }
    }
}

@mixin module-render( $name: null ) {
    $dependencies: k-map-get( $_deps, $name );

    @if $dependencies {
        @each $dep in $dependencies {
            @if ( k-list-index( $_imported, $dep ) == null ) {
                @warn "The module \"#{$name}\" depends on module \"#{$dep}\", but the styles have not been loaded yet!";
            }
        }
    }

    @if ( k-list-index( $kendo-components, $name ) != null ) and ( k-list-index( $_imported, $name ) == null ) {
        $_imported: k-list-append( $_imported, $name ) !global;
        @content;
    }
}

@mixin verify-dependencies() {
    @each $component in $kendo-components {
        @if (k-map-has-key( $_kendo-dependencies, $component ) == false) {
            @error "Module '#{$component}' is not defined.";
        }
    }
}
@include verify-dependencies();

@mixin verify-rendered() {
    @each $component in $kendo-components {
        @if (k-list-index( $_imported, $component ) == null) {
            @error "Module '#{$component}' has not been rendered.";
        }
    }
}
// stylelint-enable scss/at-if-no-null

// #endregion
// #region @import "./styles/index.import.scss"; -> scss/styles/index.import.scss
// #region @import "./_accessibility.scss"; -> scss/styles/_accessibility.scss
@mixin kendo-core--styles--accessibility() {

    /// This class could be assigned to elements which should be visually hidden, but remain accessible for screen readers.
    /// @name .k-sr-only
    /// @group accessibility
    .k-sr-only {
        position: absolute;
        left: -1px;
        width: 1px;
        height: 1px;
        overflow: hidden;
    }

}

// #endregion
// #region @import "./_asp-fallback.scss"; -> scss/styles/_asp-fallback.scss
@mixin kendo-core--styles--asp-fallback() {

    .k-theme-test-class,
    .k-common-test-class {
        opacity: 0;
    }

}

// #endregion
// #region @import "./_layout.scss"; -> scss/styles/_layout.scss
@mixin kendo-core--styles--layout() {
    .k-body {
        @include typography(
            var( --kendo-font-size, inherit ),
            var( --kendo-font-family, inherit ),
            var( --kendo-line-height, normal ),
            var( --kendo-font-weight, normal ),
            var( --kendo-letter-spacing, normal ),
        );
        @include fill(
            var( --kendo-body-text, initial ),
            var( --kendo-body-bg, initial )
        );
        margin: 0;
    }

    // Basic layout
    .k-hstack {
        display: flex;
        flex-flow: row nowrap;
    }
    .k-vstack {
        display: flex;
        flex-flow: column nowrap;
    }

    // Spacer
    .k-spacer {
        flex: 1 1 auto;
    }
    .k-spacer-sized {
        flex: none;
    }


    // Float wrap
    .k-float-wrap::after {
        content: "";
        display: block;
        clear: both;
    }


    // Stack layout
    .k-stack-layout {}


    // Flex layout
    .k-flex-layout {
        display: flex;
    }


    // Grid layout
    .k-grid-layout {
        display: grid;
    }


    // Separator
    .k-separator {
        width: auto;
        height: 0;
        border-width: 1px 0 0;
        border-style: solid;
        border-color: inherit;
        display: block;
        flex-grow: 0 !important; // stylelint-disable-line declaration-no-important
        flex-shrink: 0 !important; // stylelint-disable-line declaration-no-important
        align-self: stretch;
    }
    .k-separator-horizontal,
    .k-vstack > .k-separator {
        width: auto;
        height: 0;
        border-width: 1px 0 0;
    }
    .k-separator-vertical,
    .k-hstack > .k-separator {
        width: 0;
        height: auto;
        border-width: 0 0 0 1px;
    }

    hr.k-separator {
        margin: 0;
        padding: 0;
    }


    // Hidden
    .k-hidden {
        display: none !important; // stylelint-disable-line declaration-no-important
    }


    // RTL
    .k-rtl {
        direction: rtl;
    }


    // Legacy aliases
    .k-hbox { @extend .k-hstack !optional; }
    .k-vbox { @extend .k-vstack !optional; }
    .k-floatwrap { @extend .k-float-wrap !optional; }
    .k-flex { @extend .k-spacer !optional; }

}

// #endregion
// #region @import "./_normalize.scss"; -> scss/styles/_normalize.scss
@mixin kendo-core--styles--normalize() {

    // Hidden attribute
    [hidden] {
        display: none !important; // stylelint-disable-line declaration-no-important
    }


    // Hide script tags
    // see https://github.com/telerik/kendo-themes/issues/2360
    script {
        display: none !important; // stylelint-disable-line declaration-no-important
    }

}

// #endregion
// #region @import "./_base.scss"; -> scss/styles/_base.scss
@mixin kendo-core--styles--base() {
    // Disabled state
    .k-disabled,
    .k-widget[disabled],
    .k-disabled {
        @include disabled-color(
            $color: var( --kendo-disabled-text, inherit ),
            $border: var( --kendo-disabled-border, inherit )
        );

        .k-link {
            cursor: default;
            outline: 0;
        }
    }

    // Horizontal line
    .k-hr {
        margin-block: k-map-get( $kendo-spacing, 4 );
        padding: 0;
        height: 0;
        border-width: 1px 0 0;
        border-style: solid;
        border-color: var( --kendo-component-border, inherit );
        display: block;
        float: none;
        clear: both;
    }

    // Horizontal rule
    .k-d-flex-row > .k-hr {
        margin: 0;
        width: 0;
        height: auto;
        border-width: 0 0 0 1px;
        flex: 0 0 auto;
    }

    // Vertical rule
    .k-d-flex-col > .k-hr {
        margin: 0;
        flex: 0 0 auto;
    }

    .k-sprite {
        display: inline-block;
        width: 1rem;
        height: 1rem;
        overflow: hidden;
        background-repeat: no-repeat;
        font-size: 0;
        line-height: 0;
        text-align: center;
    }

    .k-image {
        display: inline-block;
    }

    // Layout
    .k-reset {
        margin: 0;
        padding: 0;
        border-width: 0;
        outline: 0;
        text-decoration: none;
        font: inherit;
        list-style: none;
    }

    kendo-sortable {
        display: block;
    }


    // Links
    .k-link,
    .k-link:hover {
        color: inherit;
        text-decoration: none;
        outline: 0;
        cursor: pointer;
    }

    // Outline
    .k-content {
        outline: 0;
    }

    // Centering
    .k-centered {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
    }

    // Disable mouse events
    .k-no-click {
        pointer-events: none;
    }

    // Off-screen container used during PDF export
    .k-pdf-export-shadow {
        position: absolute;
        overflow: hidden;
        left: -15000px;
        width: 14400px;
    }

    // PDF export icons fix
    .kendo-pdf-hide-pseudo-elements::before,
    .kendo-pdf-hide-pseudo-elements::after {
        display: none !important; // stylelint-disable-line declaration-no-important
    }

    // Dirty indicator
    .k-dirty {
        margin: 0;
        padding: 0;
        width: 0;
        height: 0;
        border-width: 3px;
        border-style: solid;
        border-block-start-color: currentColor;
        border-block-end-color: transparent;
        border-inline-start-color: transparent;
        border-inline-end-color: currentColor;
        position: absolute;
        inset-block-start: 0;
        inset-inline-end: 0;
    }
}
// #endregion
// #region @import "./_loading.scss"; -> scss/styles/_loading.scss
@mixin kendo-core--styles--loading() {
    // Loading mask
    .k-loading-mask,
    .k-loading-image,
    .k-loading-color {
        width: 100%;
        height: 100%;
        box-sizing: border-box;
        position: absolute;
        top: 0;
        left: 0;

        *,
        *::before,
        *::after,
        &::before,
        &::after {
            box-sizing: border-box;
        }
    }

    .k-loading-mask {
        z-index: $kendo-zindex-loading;

        &.k-opaque {
            .k-loading-color {
                opacity: 1;
            }
        }
    }
    .k-loading-text {
        text-indent: -4000px;
        text-align: center;
        position: absolute;
        color: $kendo-loading-text;
    }
    .k-loading-image {
        z-index: 2;
        color: $kendo-loading-text;
    }
    .k-loading-color {
        background-color: $kendo-loading-bg;
        opacity: $kendo-loading-opacity;
    }

    // Loading indicator
    .k-i-loading {
        position: relative;
        background-color: transparent;
        box-sizing: border-box;
        color: $kendo-loading-text;

        &::before,
        &::after {
            box-sizing: border-box;
        }
    }

    .k-i-loading::before,
    .k-i-loading::after,
    .k-loading-image::before,
    .k-loading-image::after {
        position: absolute;
        top: 50%;
        left: 50%;
        display: inline-block;
        content: "";
        box-sizing: inherit;
        border-radius: 50%;
        border-width: .05em;
        border-style: solid;
        border-color: currentColor;
        border-top-color: transparent;
        border-bottom-color: transparent;
        background-color: transparent;
    }

    .k-icon.k-i-loading::before,
    .k-icon.k-i-loading::after {
        content: "";
    }

    .k-i-loading::before,
    .k-loading-image::before {
        margin-top: -.5em;
        margin-left: -.5em;
        width: 1em;
        height: 1em;
        animation: k-loading-animation .7s linear infinite;
    }

    .k-i-loading::after,
    .k-loading-image::after {
        margin-top: -.25em;
        margin-left: -.25em;
        width: .5em;
        height: .5em;
        animation: k-loading-animation reverse 1.4s linear infinite;
    }

    .k-loading-image::before,
    .k-loading-image::after {
        content: "";
        // See https://github.com/telerik/kendo-themes/issues/1925
        border-width: 1px; // TODO: Remove once we drop IE support
        border-width: clamp( .015em, 1px, 1px );
        font-size: 4em;
    }

    // Loading animation
    @keyframes k-loading-animation {
        0% {
            transform: rotate(0deg);
        }
        100% {
            transform: rotate(360deg);
        }
    }
}
// #endregion
// #region @import "./_selection.scss"; -> scss/styles/_selection.scss
@mixin kendo-core--styles--selection() {
    .k-marquee {
        position: absolute;
        z-index: 100000;
    }

    .k-marquee-color,
    .k-marquee-text {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
    }

    .k-marquee-color {
        color: $kendo-selected-text;
        background-color: k-get-theme-color-var( primary-60, #{$kendo-selected-bg} );
        border-color: k-get-theme-color-var( primary-100, #{$kendo-selected-border} );
        opacity: .6;
    }
    .k-marquee-text {
        color: $kendo-selected-text;
    }
}
// #endregion


@mixin kendo-core--styles() {
    @include kendo-core--styles--accessibility();
    @include kendo-core--styles--asp-fallback();
    @include kendo-core--styles--layout();
    @include kendo-core--styles--normalize();
    @include kendo-core--styles--base();
    @include kendo-core--styles--loading();
    @include kendo-core--styles--selection();
}

// #endregion
// #region @import "./_variables.scss"; -> scss/_variables.scss
// #region @import "./functions/index.import.scss"; -> scss/functions/index.import.scss
// File already imported_once. Skipping output.
// #endregion

// Options
$kendo-enable-shadows: true !default;
$kendo-enable-rounded: true !default;
$kendo-enable-gradients: true !default;
$kendo-enable-transitions: true !default;

$kendo-spacing: (
    0: 0,
    1px: 1px,
    0.5: 0.125rem,
    1: 0.25rem,
    1.5: 0.375rem,
    2: 0.5rem,
    2.5: 0.625rem,
    3: 0.75rem,
    3.5: 0.875rem,
    4: 1rem,
    4.5: 1.125rem,
    5: 1.25rem,
    5.5: 1.375rem,
    6: 1.5rem,
    6.5: 1.625rem,
    7: 1.75rem,
    7.5: 1.875rem,
    8: 2rem,
    9: 2.25rem,
    10: 2.5rem,
    11: 2.75rem,
    12: 3rem,
    13: 3.25rem,
    14: 3.5rem,
    15: 3.75rem,
    16: 4rem,
    17: 4.25rem,
    18: 4.5rem,
    19: 4.75rem,
    20: 5rem,
    21: 5.25rem,
    22: 5.5rem,
    23: 5.75rem,
    24: 6rem,
) !default;

/// Border radius for all components.
$kendo-border-radius: k-map-get($kendo-spacing, 0.5) !default;
$kendo-border-radius-sm: k-math-div($kendo-border-radius, 2) !default;
$kendo-border-radius-md: $kendo-border-radius !default;
$kendo-border-radius-lg: ($kendo-border-radius * 2) !default;

$kendo-border-radii: (
    DEFAULT: var(--kendo-border-radius-md, $kendo-border-radius-md),
    0: 0,
    sm: var(--kendo-border-radius-sm, $kendo-border-radius-sm),
    md: var(--kendo-border-radius-md, $kendo-border-radius-md),
    lg: var(--kendo-border-radius-lg, $kendo-border-radius-lg),
    none: 0,
    full: 9999px,
) !default;

// Metrics
$kendo-padding-x: k-map-get($kendo-spacing, 2) !default;
$kendo-padding-y: k-map-get($kendo-spacing, 1) !default;
$kendo-padding-sm-x: k-map-get($kendo-spacing, 1) !default;
$kendo-padding-sm-y: k-map-get($kendo-spacing, 0.5) !default;
$kendo-padding-md-x: k-map-get($kendo-spacing, 2) !default;
$kendo-padding-md-y: k-map-get($kendo-spacing, 1) !default;
$kendo-padding-lg-x: k-map-get($kendo-spacing, 3) !default;
$kendo-padding-lg-y: k-map-get($kendo-spacing, 1.5) !default;

// Equilateral triangle variables
// stylelint-disable number-max-precision
$equilateral-index: 1.7320508076 !default;
$equilateral-height: 0.8660254038 !default;
// stylelint-enable number-max-precision

// Loading
$kendo-loading-opacity: .3 !default;
$kendo-zindex-loading: 100 !default;
// #endregion

// #endregion

@include kendo-core--styles();
