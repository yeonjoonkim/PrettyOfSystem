[
    {
        "description": "The contrast ratio to reach against white, to determine if color changes from \"light\" to \"dark\".\nAcceptable values for WCAG 2.0 are 3, 4.5 and 7.\n",
        "commentRange": {
            "start": 273,
            "end": 279
        },
        "context": {
            "type": "variable",
            "name": "wcag-min-contrast-ratio",
            "value": "7",
            "scope": "default",
            "line": {
                "start": 280,
                "end": 280
            }
        },
        "type": "Number",
        "group": [
            "accessibility"
        ],
        "link": [
            {
                "url": "https://www.w3.org/TR/WCAG20/#visual-audio-contrast-contrast",
                "caption": ""
            },
            {
                "url": "https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests",
                "caption": ""
            }
        ],
        "access": "public",
        "file": {
            "path": "functions/_color-contrast.import.scss",
            "name": "_color-contrast.import.scss"
        }
    },
    {
        "description": "Default dark color for WCAG 2.0.\n",
        "commentRange": {
            "start": 281,
            "end": 283
        },
        "context": {
            "type": "variable",
            "name": "wcag-dark",
            "value": "black",
            "scope": "default",
            "line": {
                "start": 284,
                "end": 284
            }
        },
        "type": "Color",
        "group": [
            "accessibility"
        ],
        "access": "public",
        "file": {
            "path": "functions/_color-contrast.import.scss",
            "name": "_color-contrast.import.scss"
        }
    },
    {
        "description": "Default light color for WCAG 2.0.\n",
        "commentRange": {
            "start": 285,
            "end": 287
        },
        "context": {
            "type": "variable",
            "name": "wcag-light",
            "value": "white",
            "scope": "default",
            "line": {
                "start": 288,
                "end": 288
            }
        },
        "type": "Color",
        "group": [
            "accessibility"
        ],
        "access": "public",
        "file": {
            "path": "functions/_color-contrast.import.scss",
            "name": "_color-contrast.import.scss"
        }
    },
    {
        "description": "Calculate the relative luminance for a color.\n",
        "commentRange": {
            "start": 290,
            "end": 297
        },
        "context": {
            "type": "function",
            "name": "k-color-luminance",
            "code": "\n    $red: k-list-nth( $_linear-channel-values, k-color-red( $color ) + 1 );\n    $green: k-list-nth( $_linear-channel-values, k-color-green( $color ) + 1 );\n    $blue: k-list-nth( $_linear-channel-values, k-color-blue( $color ) + 1 );\n\n    @return .2126 * $red + .7152 * $green + .0722 * $blue;\n",
            "line": {
                "start": 298,
                "end": 304
            }
        },
        "parameter": [
            {
                "type": "Color",
                "name": "color",
                "description": "The color to calculate the relative luminance for."
            }
        ],
        "return": {
            "type": "Number",
            "description": "The relative luminance for the color.\n"
        },
        "group": [
            "accessibility"
        ],
        "link": [
            {
                "url": "https://www.w3.org/TR/WCAG/#dfn-relative-luminance",
                "caption": ""
            },
            {
                "url": "https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests",
                "caption": ""
            }
        ],
        "access": "public",
        "require": [
            {
                "type": "function",
                "name": "k-list-nth"
            },
            {
                "type": "function",
                "name": "k-color-red"
            },
            {
                "type": "function",
                "name": "k-list-nth"
            },
            {
                "type": "function",
                "name": "k-color-green"
            },
            {
                "type": "function",
                "name": "k-list-nth"
            },
            {
                "type": "function",
                "name": "k-color-blue"
            }
        ],
        "file": {
            "path": "functions/_color-contrast.import.scss",
            "name": "_color-contrast.import.scss"
        },
        "usedBy": [
            {
                "description": "Calculates contrast ratio between two colors\n",
                "context": {
                    "type": "function",
                    "name": "k-color-contrast-ratio",
                    "code": "\n    $backLum: k-color-luminance( $background ) + .05;\n    $foreLum: k-color-luminance( $foreground ) + .05;\n\n    @return k-math-div( k-math-max( $backLum, $foreLum ), k-math-min( $backLum, $foreLum ) );\n",
                    "line": {
                        "start": 315,
                        "end": 320
                    }
                }
            },
            {
                "description": "Calculates contrast ratio between two colors\n",
                "context": {
                    "type": "function",
                    "name": "k-color-contrast-ratio",
                    "code": "\n    $backLum: k-color-luminance( $background ) + .05;\n    $foreLum: k-color-luminance( $foreground ) + .05;\n\n    @return k-math-div( k-math-max( $backLum, $foreLum ), k-math-min( $backLum, $foreLum ) );\n",
                    "line": {
                        "start": 315,
                        "end": 320
                    }
                }
            },
            {
                "description": "Checks if a color is dark\n",
                "context": {
                    "type": "function",
                    "name": "k-is-dark",
                    "code": "\n    @return if( k-color-luminance( $color ) < .5, true, false );\n",
                    "line": {
                        "start": 327,
                        "end": 329
                    }
                }
            },
            {
                "description": "Checks if a color is light\n",
                "context": {
                    "type": "function",
                    "name": "k-is-light",
                    "code": "\n    @return if( k-color-luminance( $color ) < .5, false, true );\n",
                    "line": {
                        "start": 336,
                        "end": 338
                    }
                }
            }
        ]
    },
    {
        "description": "Calculates contrast ratio between two colors\n",
        "commentRange": {
            "start": 306,
            "end": 314
        },
        "context": {
            "type": "function",
            "name": "k-color-contrast-ratio",
            "code": "\n    $backLum: k-color-luminance( $background ) + .05;\n    $foreLum: k-color-luminance( $foreground ) + .05;\n\n    @return k-math-div( k-math-max( $backLum, $foreLum ), k-math-min( $backLum, $foreLum ) );\n",
            "line": {
                "start": 315,
                "end": 320
            }
        },
        "parameter": [
            {
                "type": "Color",
                "name": "background",
                "description": "The background color"
            },
            {
                "type": "Color",
                "name": "foreground",
                "description": "The foreground color"
            }
        ],
        "return": {
            "type": "Number",
            "description": "The contrast ratio between the two colors\n"
        },
        "group": [
            "accessibility"
        ],
        "link": [
            {
                "url": "https://www.w3.org/TR/WCAG/#dfn-contrast-ratio",
                "caption": ""
            },
            {
                "url": "https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests",
                "caption": ""
            }
        ],
        "access": "public",
        "require": [
            {
                "type": "function",
                "name": "k-color-luminance"
            },
            {
                "type": "function",
                "name": "k-color-luminance"
            },
            {
                "type": "function",
                "name": "k-math-div"
            },
            {
                "type": "function",
                "name": "k-math-max"
            },
            {
                "type": "function",
                "name": "k-math-min"
            }
        ],
        "file": {
            "path": "functions/_color-contrast.import.scss",
            "name": "_color-contrast.import.scss"
        },
        "usedBy": [
            {
                "description": "Calculates the contrast ratio between a background color and a foreground color.\nIf the contrast ratio is not high enough, it will return the color with the highest contrast ratio.\n",
                "context": {
                    "type": "function",
                    "name": "k-contrast-color",
                    "code": "\n    $foregrounds: $light, $dark, #ffffff, #000000;\n    $max-ratio: 0;\n    $max-ratio-color: null;\n\n    @each $color in $foregrounds {\n        $contrast-ratio: k-color-contrast-ratio( $background, $color );\n\n        @if ( $contrast-ratio > $min-ratio ) {\n            @return $color;\n        } @else if ( $contrast-ratio > $max-ratio ) {\n            $max-ratio: $contrast-ratio;\n            $max-ratio-color: $color;\n        }\n    }\n\n    @warn \"Found no color leading to #{$min-ratio}:1 contrast ratio against #{$background}...\";\n\n    @return $max-ratio-color;\n",
                    "line": {
                        "start": 350,
                        "end": 369
                    }
                }
            }
        ]
    },
    {
        "description": "Checks if a color is dark\n",
        "commentRange": {
            "start": 322,
            "end": 326
        },
        "context": {
            "type": "function",
            "name": "k-is-dark",
            "code": "\n    @return if( k-color-luminance( $color ) < .5, true, false );\n",
            "line": {
                "start": 327,
                "end": 329
            }
        },
        "parameter": [
            {
                "type": "Color",
                "name": "color",
                "description": "The color to check"
            }
        ],
        "return": {
            "type": "Boolean",
            "description": "True if the color is dark, false otherwise\n"
        },
        "group": [
            "accessibility"
        ],
        "access": "public",
        "require": [
            {
                "type": "function",
                "name": "k-color-luminance"
            }
        ],
        "file": {
            "path": "functions/_color-contrast.import.scss",
            "name": "_color-contrast.import.scss"
        }
    },
    {
        "description": "Checks if a color is light\n",
        "commentRange": {
            "start": 331,
            "end": 335
        },
        "context": {
            "type": "function",
            "name": "k-is-light",
            "code": "\n    @return if( k-color-luminance( $color ) < .5, false, true );\n",
            "line": {
                "start": 336,
                "end": 338
            }
        },
        "parameter": [
            {
                "type": "Color",
                "name": "color",
                "description": "The color to check"
            }
        ],
        "return": {
            "type": "Boolean",
            "description": "True if the color is light, false otherwise\n"
        },
        "group": [
            "accessibility"
        ],
        "access": "public",
        "require": [
            {
                "type": "function",
                "name": "k-color-luminance"
            }
        ],
        "file": {
            "path": "functions/_color-contrast.import.scss",
            "name": "_color-contrast.import.scss"
        }
    },
    {
        "description": "Calculates the contrast ratio between a background color and a foreground color.\nIf the contrast ratio is not high enough, it will return the color with the highest contrast ratio.\n",
        "commentRange": {
            "start": 341,
            "end": 349
        },
        "context": {
            "type": "function",
            "name": "k-contrast-color",
            "code": "\n    $foregrounds: $light, $dark, #ffffff, #000000;\n    $max-ratio: 0;\n    $max-ratio-color: null;\n\n    @each $color in $foregrounds {\n        $contrast-ratio: k-color-contrast-ratio( $background, $color );\n\n        @if ( $contrast-ratio > $min-ratio ) {\n            @return $color;\n        } @else if ( $contrast-ratio > $max-ratio ) {\n            $max-ratio: $contrast-ratio;\n            $max-ratio-color: $color;\n        }\n    }\n\n    @warn \"Found no color leading to #{$min-ratio}:1 contrast ratio against #{$background}...\";\n\n    @return $max-ratio-color;\n",
            "line": {
                "start": 350,
                "end": 369
            }
        },
        "parameter": [
            {
                "type": "Color",
                "name": "background",
                "description": "The background color"
            },
            {
                "type": "Color",
                "name": "dark",
                "description": "The dark color to use as a fallback"
            },
            {
                "type": "Color",
                "name": "light",
                "description": "The light color to use as a fallback"
            },
            {
                "type": "Number",
                "name": "min-ratio",
                "description": "The minimum contrast ratio to reach"
            }
        ],
        "return": {
            "type": "Color",
            "description": "The color with the highest contrast ratio\n"
        },
        "group": [
            "accessibility"
        ],
        "access": "public",
        "require": [
            {
                "type": "function",
                "name": "k-color-contrast-ratio"
            }
        ],
        "file": {
            "path": "functions/_color-contrast.import.scss",
            "name": "_color-contrast.import.scss"
        }
    },
    {
        "description": "Color palettes to be used in the Kendo UI themes.\n",
        "commentRange": {
            "start": 1,
            "end": 69
        },
        "context": {
            "type": "variable",
            "name": "kendo-palettes",
            "value": "(\n\n    // Kendo\n    neutral: (\n        0: #ffffff,\n        50: #f8f8f8,\n        100: #ededed,\n        200: #d6d6d6,\n        300: #b7b7b7,\n        400: #949494,\n        500: #767676,\n        600: #5f5f5f,\n        700: #494949,\n        800: #373737,\n        900: #282828,\n        1000: #000000\n    ),\n    marsala: (\n        0: #ffffff,\n        50: #faf0f2,\n        100: #f3dde0,\n        200: #e197a3,\n        300: #c54e69,\n        400: #8b3548,\n        500: #622331,\n        600: #551d2a,\n        700: #441620,\n        800: #340f17,\n        900: #23080e,\n        1000: #000000\n    ),\n\n\n    // Bootstrap\n    bootstrapGray: (\n        0: #ffffff,\n        100: #f8f9fa,\n        200: #e9ecef,\n        300: #dee2e6,\n        400: #ced4da,\n        500: #adb5bd,\n        600: #6c757d,\n        700: #495057,\n        800: #343a40,\n        900: #212529,\n        1000: #000000\n    ),\n    bootstrapBlue: (\n        0: #ffffff,\n        100: #cfe2ff,\n        200: #9ec5fe,\n        300: #6ea8fe,\n        400: #3d8bfd,\n        500: #0d6efd,\n        600: #0a58ca,\n        700: #084298,\n        800: #052c65,\n        900: #031633,\n        1000: #000000\n    ),\n    bootstrapIndigo: (\n        0: #ffffff,\n        100: #e0cffc,\n        200: #c29ffa,\n        300: #a370f7,\n        400: #8540f5,\n        500: #6610f2,\n        600: #520dc2,\n        700: #3d0a91,\n        800: #290661,\n        900: #140330,\n        1000: #000000\n    ),\n    bootstrapPurple: (\n        0: #ffffff,\n        100: #e2d9f3,\n        200: #c5b3e6,\n        300: #a98eda,\n        400: #8c68cd,\n        500: #6f42c1,\n        600: #59359a,\n        700: #432874,\n        800: #2c1a4d,\n        900: #160d27,\n        1000: #000000\n    ),\n    bootstrapPink: (\n        0: #ffffff,\n        100: #f7d6e6,\n        200: #efadce,\n        300: #e685b5,\n        400: #de5c9d,\n        500: #d63384,\n        600: #ab296a,\n        700: #801f4f,\n        800: #561435,\n        900: #2b0a1a,\n        1000: #000000\n    ),\n    bootstrapRed: (\n        0: #ffffff,\n        100: #f8d7da,\n        200: #f1aeb5,\n        300: #ea868f,\n        400: #e35d6a,\n        500: #dc3545,\n        600: #b02a37,\n        700: #842029,\n        800: #58151c,\n        900: #2c0b0e,\n        1000: #000000\n    ),\n    bootstrapOrange: (\n        0: #ffffff,\n        100: #ffe5d0,\n        200: #fecba1,\n        300: #feb272,\n        400: #fd9843,\n        500: #fd7e14,\n        600: #ca6510,\n        700: #984c0c,\n        800: #653208,\n        900: #331904,\n        1000: #000000\n    ),\n    bootstrapYellow: (\n        0: #ffffff,\n        100: #fff3cd,\n        200: #ffe69c,\n        300: #ffda6a,\n        400: #ffcd39,\n        500: #ffc107,\n        600: #cc9a06,\n        700: #997404,\n        800: #664d03,\n        900: #332701,\n        1000: #000000\n    ),\n    bootstrapGreen: (\n        0: #ffffff,\n        100: #d1e7dd,\n        200: #a3cfbb,\n        300: #75b798,\n        400: #479f76,\n        500: #198754,\n        600: #146c43,\n        700: #0f5132,\n        800: #0a3622,\n        900: #051b11,\n        1000: #000000\n    ),\n    bootstrapTeal: (\n        0: #ffffff,\n        100: #d2f4ea,\n        200: #a6e9d5,\n        300: #79dfc1,\n        400: #4dd4ac,\n        500: #20c997,\n        600: #1aa179,\n        700: #13795b,\n        800: #0d503c,\n        900: #06281e,\n        1000: #000000\n    ),\n    bootstrapCyan: (\n        0: #ffffff,\n        100: #cff4fc,\n        200: #9eeaf9,\n        300: #6edff6,\n        400: #3dd5f3,\n        500: #0dcaf0,\n        600: #0aa2c0,\n        700: #087990,\n        800: #055160,\n        900: #032830,\n        1000: #000000\n    ),\n\n\n    // Fluent\n    fluentNeutral: (\n        0: #ffffff,\n        50: #faf9f8,\n        100: #edebe9,\n        150: #e1dfdd,\n        200: #d2d0ce,\n        250: #c8c6c4,\n        300: #bdbbb8,\n        350: #b3b0ad,\n        400: #a19f9d,\n        450: #8a8886,\n        500: #797775,\n        550: #605e5c,\n        600: #484644,\n        650: #3b3a39,\n        700: #323130,\n        750: #292827,\n        800: #201f1e,\n        850: #1b1a19,\n        900: #161514,\n        950: #11100f,\n        1000: #000000\n    ),\n\n\n    // Material\n    materialGray: (\n        0: #ffffff,\n        50: #fafafa,\n        100: #f5f5f5,\n        200: #eeeeee,\n        300: #e0e0e0,\n        400: #bdbdbd,\n        500: #9e9e9e,\n        600: #757575,\n        700: #616161,\n        800: #424242,\n        900: #212121,\n        1000: #000000\n    ),\n    materialBlueGray: (\n        0: #ffffff,\n        50: #eceff1,\n        100: #cfd8dc,\n        200: #b0bec5,\n        300: #90a4ae,\n        400: #78909c,\n        500: #607d8b,\n        600: #546e7a,\n        700: #455a64,\n        800: #37474f,\n        900: #263238,\n        1000: #000000\n    ),\n    materialRed: (\n        0: #ffffff,\n        50: #ffebee,\n        100: #ffcdd2,\n        200: #ef9a9a,\n        300: #e57373,\n        400: #ef5350,\n        500: #f44336,\n        600: #e53935,\n        700: #d32f2f,\n        800: #c62828,\n        900: #b71c1c,\n        1000: #000000\n    ),\n    materialPink: (\n        0: #ffffff,\n        50: #fce4ec,\n        100: #f8bbd0,\n        200: #f48fb1,\n        300: #f06292,\n        400: #ec407a,\n        // 500 was #e91e63, but changed for better contrast against white\n        500: #e51a5f,\n        600: #d81b60,\n        700: #c2185b,\n        800: #ad1457,\n        900: #880e4f,\n        1000: #000000\n    ),\n    materialPurple: (\n        0: #ffffff,\n        50: #f3e5f5,\n        100: #e1bee7,\n        200: #ce93d8,\n        300: #ba68c8,\n        400: #ab47bc,\n        500: #9c27b0,\n        600: #8e24aa,\n        700: #7b1fa2,\n        800: #6a1b9a,\n        900: #4a148c,\n        1000: #000000\n    ),\n    materialDeepPurple: (\n        0: #ffffff,\n        50: #ede7f6,\n        100: #d1c4e9,\n        200: #b39ddb,\n        300: #9575cd,\n        400: #7e57c2,\n        500: #673ab7,\n        600: #5e35b1,\n        700: #512da8,\n        800: #4527a0,\n        900: #311b92,\n        1000: #000000\n    ),\n    materialIndigo: (\n        0: #ffffff,\n        50: #e8eaf6,\n        100: #c5cae9,\n        200: #9fa8da,\n        300: #7986cb,\n        400: #5c6bc0,\n        500: #3f51b5,\n        600: #3949ab,\n        700: #303f9f,\n        800: #283593,\n        900: #1a237e,\n        1000: #000000\n    ),\n    materialBlue: (\n        0: #ffffff,\n        50: #e3f2fd,\n        100: #bbdefb,\n        200: #90caf9,\n        300: #64b5f6,\n        400: #42a5f5,\n        500: #2196f3,\n        600: #1e88e5,\n        700: #1976d2,\n        800: #1565c0,\n        900: #0d47a1,\n        1000: #000000\n    ),\n    materialLightBlue: (\n        0: #ffffff,\n        50: #e1f5fe,\n        100: #b3e5fc,\n        200: #81d4fa,\n        300: #4fc3f7,\n        400: #29b6f6,\n        500: #03a9f4,\n        600: #039be5,\n        700: #0288d1,\n        800: #0277bd,\n        900: #01579b,\n        1000: #000000\n    ),\n    materialCyan: (\n        0: #ffffff,\n        50: #e0f7fa,\n        100: #b2ebf2,\n        200: #80deea,\n        300: #4dd0e1,\n        400: #26c6da,\n        500: #00bcd4,\n        600: #00acc1,\n        700: #0097a7,\n        800: #00838f,\n        900: #006064,\n        1000: #000000\n    ),\n    materialTeal: (\n        0: #ffffff,\n        50: #e0f2f1,\n        100: #b2dfdb,\n        200: #80cbc4,\n        300: #4db6ac,\n        400: #26a69a,\n        500: #009688,\n        600: #00897b,\n        700: #00796b,\n        800: #00695c,\n        900: #004d40,\n        1000: #000000\n    ),\n    materialGreen: (\n        0: #ffffff,\n        50: #e8f5e9,\n        100: #c8e6c9,\n        200: #a5d6a7,\n        300: #81c784,\n        400: #66bb6a,\n        500: #4caf50,\n        600: #43a047,\n        700: #388e3c,\n        800: #2e7d32,\n        900: #1b5e20,\n        1000: #000000\n    ),\n    materialLightGreen: (\n        0: #ffffff,\n        50: #f1f8e9,\n        100: #dcedc8,\n        200: #c5e1a5,\n        300: #aed581,\n        400: #9ccc65,\n        500: #8bc34a,\n        600: #7cb342,\n        700: #689f38,\n        800: #558b2f,\n        900: #33691e,\n        1000: #000000\n    ),\n    materialLime: (\n        0: #ffffff,\n        50: #f9fbe7,\n        100: #f0f4c3,\n        200: #e6ee9c,\n        300: #dce775,\n        400: #d4e157,\n        500: #cddc39,\n        600: #c0ca33,\n        700: #afb42b,\n        800: #9e9d24,\n        900: #827717,\n        1000: #000000\n    ),\n    materialYellow: (\n        0: #ffffff,\n        50: #fffde7,\n        100: #fff9c4,\n        200: #fff59d,\n        300: #fff176,\n        400: #ffee58,\n        500: #ffeb3b,\n        600: #fdd835,\n        700: #fbc02d,\n        800: #f9a825,\n        900: #f57f17,\n        1000: #000000\n    ),\n    materialAmber: (\n        0: #ffffff,\n        50: #fff8e1,\n        100: #ffecb3,\n        200: #ffe082,\n        300: #ffd54f,\n        400: #ffca28,\n        500: #ffc107,\n        600: #ffb300,\n        700: #ffa000,\n        800: #ff8f00,\n        900: #ff6f00,\n        1000: #000000\n    ),\n    materialOrange: (\n        0: #ffffff,\n        50: #fff3e0,\n        100: #ffe0b2,\n        200: #ffcc80,\n        300: #ffb74d,\n        400: #ffa726,\n        500: #ff9800,\n        600: #fb8c00,\n        700: #f57c00,\n        800: #ef6c00,\n        900: #e65100,\n        1000: #000000\n    ),\n    materialDeepOrange: (\n        0: #ffffff,\n        50: #fbe9e7,\n        100: #ffccbc,\n        200: #ffab91,\n        300: #ff8a65,\n        400: #ff7043,\n        500: #ff5722,\n        600: #f4511e,\n        700: #e64a19,\n        800: #d84315,\n        900: #bf360c,\n        1000: #000000\n    ),\n    materialBrown: (\n        0: #ffffff,\n        50: #efebe9,\n        100: #d7ccc8,\n        200: #bcaaa4,\n        300: #a1887f,\n        400: #8d6e63,\n        500: #795548,\n        600: #6d4c41,\n        700: #5d4037,\n        800: #4e342e,\n        900: #3e2723,\n        1000: #000000\n    ),\n\n\n    // Primer\n    primerGray: (\n        0: #ffffff,\n        50: #f6f8fa,\n        100: #eaeef2,\n        200: #d0d7de,\n        300: #afb8c1,\n        400: #8c959f,\n        500: #6e7781,\n        600: #57606a,\n        700: #424a53,\n        800: #32383f,\n        900: #24292f,\n        1000: #000000\n    ),\n    primerBlue: (\n        0: #ffffff,\n        50: #ddf4ff,\n        100: #b6e3ff,\n        200: #80ccff,\n        300: #54aeff,\n        400: #218bff,\n        500: #0969da,\n        600: #0550ae,\n        700: #033d8b,\n        800: #0a3069,\n        900: #002155,\n        1000: #000000\n    ),\n    primerGreen: (\n        0: #ffffff,\n        50: #dafbe1,\n        100: #aceebb,\n        200: #6fdd8b,\n        300: #4ac26b,\n        400: #2da44e,\n        500: #1a7f37,\n        600: #116329,\n        700: #044f1e,\n        800: #003d16,\n        900: #002d11,\n        1000: #000000\n    ),\n    primerYellow: (\n        0: #ffffff,\n        50: #fff8c5,\n        100: #fae17d,\n        200: #eac54f,\n        300: #d4a72c,\n        400: #bf8700,\n        500: #9a6700,\n        600: #7d4e00,\n        700: #633c01,\n        800: #4d2d00,\n        900: #3b2300,\n        1000: #000000\n    ),\n    primerOrange: (\n        0: #ffffff,\n        50: #fff1e5,\n        100: #ffd8b5,\n        200: #ffb77c,\n        300: #fb8f44,\n        400: #e16f24,\n        500: #bc4c00,\n        600: #953800,\n        700: #762c00,\n        800: #5c2200,\n        900: #471700,\n        1000: #000000\n    ),\n    primerRed: (\n        0: #ffffff,\n        50: #ffebe9,\n        100: #ffcecb,\n        200: #ffaba8,\n        300: #ff8182,\n        400: #fa4549,\n        500: #cf222e,\n        600: #a40e26,\n        700: #82071e,\n        800: #660018,\n        900: #4c0014,\n        1000: #000000\n    ),\n    primerPurple: (\n        0: #ffffff,\n        50: #fbefff,\n        100: #ecd8ff,\n        200: #d8b9ff,\n        300: #c297ff,\n        400: #a475f9,\n        500: #8250df,\n        600: #6639ba,\n        700: #512a97,\n        800: #3e1f79,\n        900: #2e1461,\n        1000: #000000\n    ),\n    primerPink: (\n        0: #ffffff,\n        50: #ffeff7,\n        100: #ffd3eb,\n        200: #ffadda,\n        300: #ff80c8,\n        400: #e85aad,\n        500: #bf3989,\n        600: #99286e,\n        700: #772057,\n        800: #611347,\n        900: #4d0336,\n        1000: #000000\n    ),\n    primerCoral: (\n        0: #ffffff,\n        50: #fff0eb,\n        100: #ffd6cc,\n        200: #ffb4a1,\n        300: #fd8c73,\n        400: #ec6547,\n        500: #c4432b,\n        600: #9e2f1c,\n        700: #801f0f,\n        800: #691105,\n        900: #510901,\n        1000: #000000\n    ),\n\n\n    // Tailwind\n    tailwindNeutral: (\n        0: #ffffff,\n        50: #fafafa,\n        100: #f5f5f5,\n        200: #e5e5e5,\n        300: #d4d4d4,\n        400: #a3a3a3,\n        500: #737373,\n        600: #525252,\n        700: #404040,\n        800: #262626,\n        900: #171717,\n        1000: #000000\n    ),\n    tailwindSlate: (\n        0: #ffffff,\n        50: #f8fafc,\n        100: #f1f5f9,\n        200: #e2e8f0,\n        300: #cbd5e1,\n        400: #94a3b8,\n        500: #64748b,\n        600: #475569,\n        700: #334155,\n        800: #1e293b,\n        900: #0f172a,\n        1000: #000000\n    ),\n    tailwindGray: (\n        0: #ffffff,\n        50: #f9fafb,\n        100: #f3f4f6,\n        200: #e5e7eb,\n        300: #d1d5db,\n        400: #9ca3af,\n        500: #6b7280,\n        600: #4b5563,\n        700: #374151,\n        800: #1f2937,\n        900: #111827,\n        1000: #000000\n    ),\n    tailwindZinc: (\n        0: #ffffff,\n        50: #fafafa,\n        100: #f4f4f5,\n        200: #e4e4e7,\n        300: #d4d4d8,\n        400: #a1a1aa,\n        500: #71717a,\n        600: #52525b,\n        700: #3f3f46,\n        800: #27272a,\n        900: #18181b,\n        1000: #000000\n    ),\n    tailwindStone: (\n        0: #ffffff,\n        50: #fafaf9,\n        100: #f5f5f4,\n        200: #e7e5e4,\n        300: #d6d3d1,\n        400: #a8a29e,\n        500: #78716c,\n        600: #57534e,\n        700: #44403c,\n        800: #292524,\n        900: #1c1917,\n        1000: #000000\n    ),\n    tailwindRed: (\n        0: #ffffff,\n        50: #fef2f2,\n        100: #fee2e2,\n        200: #fecaca,\n        300: #fca5a5,\n        400: #f87171,\n        500: #ef4444,\n        600: #dc2626,\n        700: #b91c1c,\n        800: #991b1b,\n        900: #7f1d1d,\n        1000: #000000\n    ),\n    tailwindOrange: (\n        0: #ffffff,\n        50: #fff7ed,\n        100: #ffedd5,\n        200: #fed7aa,\n        300: #fdba74,\n        400: #fb923c,\n        500: #f97316,\n        600: #ea580c,\n        700: #c2410c,\n        800: #9a3412,\n        900: #7c2d12,\n        1000: #000000\n    ),\n    tailwindAmber: (\n        0: #ffffff,\n        50: #fffbeb,\n        100: #fef3c7,\n        200: #fde68a,\n        300: #fcd34d,\n        400: #fbbf24,\n        500: #f59e0b,\n        600: #d97706,\n        700: #b45309,\n        800: #92400e,\n        900: #78350f,\n        1000: #000000\n    ),\n    tailwindYellow: (\n        0: #ffffff,\n        50: #fefce8,\n        100: #fef9c3,\n        200: #fef08a,\n        300: #fde047,\n        400: #facc15,\n        500: #eab308,\n        600: #ca8a04,\n        700: #a16207,\n        800: #854d0e,\n        900: #713f12,\n        1000: #000000\n    ),\n    tailwindLime: (\n        0: #ffffff,\n        50: #f7fee7,\n        100: #ecfccb,\n        200: #d9f99d,\n        300: #bef264,\n        400: #a3e635,\n        500: #84cc16,\n        600: #65a30d,\n        700: #4d7c0f,\n        800: #3f6212,\n        900: #365314,\n        1000: #000000\n    ),\n    tailwindGreen: (\n        0: #ffffff,\n        50: #f0fdf4,\n        100: #dcfce7,\n        200: #bbf7d0,\n        300: #86efac,\n        400: #4ade80,\n        500: #22c55e,\n        600: #16a34a,\n        700: #15803d,\n        800: #166534,\n        900: #14532d,\n        1000: #000000\n    ),\n    tailwindEmerald: (\n        0: #ffffff,\n        50: #ecfdf5,\n        100: #d1fae5,\n        200: #a7f3d0,\n        300: #6ee7b7,\n        400: #34d399,\n        500: #10b981,\n        600: #059669,\n        700: #047857,\n        800: #065f46,\n        900: #064e3b,\n        1000: #000000\n    ),\n    tailwindTeal: (\n        0: #ffffff,\n        50: #f0fdfa,\n        100: #ccfbf1,\n        200: #99f6e4,\n        300: #5eead4,\n        400: #2dd4bf,\n        500: #14b8a6,\n        600: #0d9488,\n        700: #0f766e,\n        800: #115e59,\n        900: #134e4a,\n        1000: #000000\n    ),\n    tailwindCyan: (\n        0: #ffffff,\n        50: #ecfeff,\n        100: #cffafe,\n        200: #a5f3fc,\n        300: #67e8f9,\n        400: #22d3ee,\n        500: #06b6d4,\n        600: #0891b2,\n        700: #0e7490,\n        800: #155e75,\n        900: #164e63,\n        1000: #000000\n    ),\n    tailwindSky: (\n        0: #ffffff,\n        50: #f0f9ff,\n        100: #e0f2fe,\n        200: #bae6fd,\n        300: #7dd3fc,\n        400: #38bdf8,\n        500: #0ea5e9,\n        600: #0284c7,\n        700: #0369a1,\n        800: #075985,\n        900: #0c4a6e,\n        1000: #000000\n    ),\n    tailwindBlue: (\n        0: #ffffff,\n        50: #eff6ff,\n        100: #dbeafe,\n        200: #bfdbfe,\n        300: #93c5fd,\n        400: #60a5fa,\n        500: #3b82f6,\n        600: #2563eb,\n        700: #1d4ed8,\n        800: #1e40af,\n        900: #1e3a8a,\n        1000: #000000\n    ),\n    tailwindIndigo: (\n        0: #ffffff,\n        50: #eef2ff,\n        100: #e0e7ff,\n        200: #c7d2fe,\n        300: #a5b4fc,\n        400: #818cf8,\n        500: #6366f1,\n        600: #4f46e5,\n        700: #4338ca,\n        800: #3730a3,\n        900: #312e81,\n        1000: #000000\n    ),\n    tailwindViolet: (\n        0: #ffffff,\n        50: #f5f3ff,\n        100: #ede9fe,\n        200: #ddd6fe,\n        300: #c4b5fd,\n        400: #a78bfa,\n        500: #8b5cf6,\n        600: #7c3aed,\n        700: #6d28d9,\n        800: #5b21b6,\n        900: #4c1d95,\n        1000: #000000\n    ),\n    tailwindPurple: (\n        0: #ffffff,\n        50: #faf5ff,\n        100: #f3e8ff,\n        200: #e9d5ff,\n        300: #d8b4fe,\n        400: #c084fc,\n        500: #a855f7,\n        600: #9333ea,\n        700: #7e22ce,\n        800: #6b21a8,\n        900: #581c87,\n        1000: #000000\n    ),\n    tailwindFuchsia: (\n        0: #ffffff,\n        50: #fdf4ff,\n        100: #fae8ff,\n        200: #f5d0fe,\n        300: #f0abfc,\n        400: #e879f9,\n        500: #d946ef,\n        600: #c026d3,\n        700: #a21caf,\n        800: #86198f,\n        900: #701a75,\n        1000: #000000\n    ),\n    tailwindPink: (\n        0: #ffffff,\n        50: #fdf2f8,\n        100: #fce7f3,\n        200: #fbcfe8,\n        300: #f9a8d4,\n        400: #f472b6,\n        500: #ec4899,\n        600: #db2777,\n        700: #be185d,\n        800: #9d174d,\n        900: #831843,\n        1000: #000000\n    ),\n    tailwindRose: (\n        0: #ffffff,\n        50: #fff1f2,\n        100: #ffe4e6,\n        200: #fecdd3,\n        300: #fda4af,\n        400: #fb7185,\n        500: #f43f5e,\n        600: #e11d48,\n        700: #be123c,\n        800: #9f1239,\n        900: #881337,\n        1000: #000000\n    )\n\n)",
            "scope": "default",
            "line": {
                "start": 70,
                "end": 984
            }
        },
        "access": "private",
        "type": "Record<String, ColorMap>",
        "property": [
            {
                "type": "ColorMap",
                "name": "neutral",
                "description": "The neutral palette"
            },
            {
                "type": "ColorMap",
                "name": "marsala",
                "description": "The marsala palette"
            },
            {
                "type": "ColorMap",
                "name": "bootstrapGray",
                "description": "The Bootstrap gray palette"
            },
            {
                "type": "ColorMap",
                "name": "bootstrapBlue",
                "description": "The Bootstrap blue palette"
            },
            {
                "type": "ColorMap",
                "name": "bootstrapIndigo",
                "description": "The Bootstrap indigo palette"
            },
            {
                "type": "ColorMap",
                "name": "bootstrapPurple",
                "description": "The Bootstrap purple palette"
            },
            {
                "type": "ColorMap",
                "name": "bootstrapPink",
                "description": "The Bootstrap pink palette"
            },
            {
                "type": "ColorMap",
                "name": "bootstrapRed",
                "description": "The Bootstrap red palette"
            },
            {
                "type": "ColorMap",
                "name": "bootstrapOrange",
                "description": "The Bootstrap orange palette"
            },
            {
                "type": "ColorMap",
                "name": "bootstrapYellow",
                "description": "The Bootstrap yellow palette"
            },
            {
                "type": "ColorMap",
                "name": "bootstrapGreen",
                "description": "The Bootstrap green palette"
            },
            {
                "type": "ColorMap",
                "name": "bootstrapTeal",
                "description": "The Bootstrap teal palette"
            },
            {
                "type": "ColorMap",
                "name": "bootstrapCyan",
                "description": "The Bootstrap cyan palette"
            },
            {
                "type": "ColorMap",
                "name": "fluentNeutral",
                "description": "The Fluent neutral palette"
            },
            {
                "type": "ColorMap",
                "name": "materialGray",
                "description": "The Material gray palette"
            },
            {
                "type": "ColorMap",
                "name": "materialBlueGray",
                "description": "The Material blue gray palette"
            },
            {
                "type": "ColorMap",
                "name": "materialRed",
                "description": "The Material red palette"
            },
            {
                "type": "ColorMap",
                "name": "materialPink",
                "description": "The Material pink palette"
            },
            {
                "type": "ColorMap",
                "name": "materialPurple",
                "description": "The Material purple palette"
            },
            {
                "type": "ColorMap",
                "name": "materialDeepPurple",
                "description": "The Material deep purple palette"
            },
            {
                "type": "ColorMap",
                "name": "materialIndigo",
                "description": "The Material indigo palette"
            },
            {
                "type": "ColorMap",
                "name": "materialBlue",
                "description": "The Material blue palette"
            },
            {
                "type": "ColorMap",
                "name": "materialLightBlue",
                "description": "The Material light blue palette"
            },
            {
                "type": "ColorMap",
                "name": "materialCyan",
                "description": "The Material cyan palette"
            },
            {
                "type": "ColorMap",
                "name": "materialTeal",
                "description": "The Material teal palette"
            },
            {
                "type": "ColorMap",
                "name": "materialGreen",
                "description": "The Material green palette"
            },
            {
                "type": "ColorMap",
                "name": "materialLightGreen",
                "description": "The Material light green palette"
            },
            {
                "type": "ColorMap",
                "name": "materialLime",
                "description": "The Material lime palette"
            },
            {
                "type": "ColorMap",
                "name": "materialYellow",
                "description": "The Material yellow palette"
            },
            {
                "type": "ColorMap",
                "name": "materialAmber",
                "description": "The Material amber palette"
            },
            {
                "type": "ColorMap",
                "name": "materialOrange",
                "description": "The Material orange palette"
            },
            {
                "type": "ColorMap",
                "name": "materialDeepOrange",
                "description": "The Material deep orange palette"
            },
            {
                "type": "ColorMap",
                "name": "materialBrown",
                "description": "The Material brown palette"
            },
            {
                "type": "ColorMap",
                "name": "primerGray",
                "description": "The Primer gray palette"
            },
            {
                "type": "ColorMap",
                "name": "primerBlue",
                "description": "The Primer blue palette"
            },
            {
                "type": "ColorMap",
                "name": "primerGreen",
                "description": "The Primer green palette"
            },
            {
                "type": "ColorMap",
                "name": "primerYellow",
                "description": "The Primer yellow palette"
            },
            {
                "type": "ColorMap",
                "name": "primerOrange",
                "description": "The Primer orange palette"
            },
            {
                "type": "ColorMap",
                "name": "primerRed",
                "description": "The Primer red palette"
            },
            {
                "type": "ColorMap",
                "name": "primerPurple",
                "description": "The Primer purple palette"
            },
            {
                "type": "ColorMap",
                "name": "primerPink",
                "description": "The Primer pink palette"
            },
            {
                "type": "ColorMap",
                "name": "primerCoral",
                "description": "The Primer coral palette"
            },
            {
                "type": "ColorMap",
                "name": "tailwindNeutral",
                "description": "The Tailwind neutral palette"
            },
            {
                "type": "ColorMap",
                "name": "tailwindSlate",
                "description": "The Tailwind slate palette"
            },
            {
                "type": "ColorMap",
                "name": "tailwindGray",
                "description": "The Tailwind gray palette"
            },
            {
                "type": "ColorMap",
                "name": "tailwindZinc",
                "description": "The Tailwind zinc palette"
            },
            {
                "type": "ColorMap",
                "name": "tailwindStone",
                "description": "The Tailwind stone palette"
            },
            {
                "type": "ColorMap",
                "name": "tailwindRed",
                "description": "The Tailwind red palette"
            },
            {
                "type": "ColorMap",
                "name": "tailwindOrange",
                "description": "The Tailwind orange palette"
            },
            {
                "type": "ColorMap",
                "name": "tailwindAmber",
                "description": "The Tailwind amber palette"
            },
            {
                "type": "ColorMap",
                "name": "tailwindYellow",
                "description": "The Tailwind yellow palette"
            },
            {
                "type": "ColorMap",
                "name": "tailwindLime",
                "description": "The Tailwind lime palette"
            },
            {
                "type": "ColorMap",
                "name": "tailwindGreen",
                "description": "The Tailwind green palette"
            },
            {
                "type": "ColorMap",
                "name": "tailwindEmerald",
                "description": "The Tailwind emerald palette"
            },
            {
                "type": "ColorMap",
                "name": "tailwindTeal",
                "description": "The Tailwind teal palette"
            },
            {
                "type": "ColorMap",
                "name": "tailwindCyan",
                "description": "The Tailwind cyan palette"
            },
            {
                "type": "ColorMap",
                "name": "tailwindSky",
                "description": "The Tailwind sky palette"
            },
            {
                "type": "ColorMap",
                "name": "tailwindBlue",
                "description": "The Tailwind blue palette"
            },
            {
                "type": "ColorMap",
                "name": "tailwindIndigo",
                "description": "The Tailwind indigo palette"
            },
            {
                "type": "ColorMap",
                "name": "tailwindViolet",
                "description": "The Tailwind violet palette"
            },
            {
                "type": "ColorMap",
                "name": "tailwindPurple",
                "description": "The Tailwind purple palette"
            },
            {
                "type": "ColorMap",
                "name": "tailwindFuchsia",
                "description": "The Tailwind fuchsia palette"
            },
            {
                "type": "ColorMap",
                "name": "tailwindPink",
                "description": "The Tailwind pink palette"
            },
            {
                "type": "ColorMap",
                "name": "tailwindRose",
                "description": "The Tailwind rose palette"
            }
        ],
        "group": [
            "color-system"
        ],
        "file": {
            "path": "color-system/_palettes.scss",
            "name": "_palettes.scss"
        }
    },
    {
        "description": "The color white.\nNote: you cannot change this value.\n",
        "commentRange": {
            "start": 3,
            "end": 6
        },
        "context": {
            "type": "variable",
            "name": "kendo-color-white",
            "value": "#ffffff",
            "scope": "private",
            "line": {
                "start": 7,
                "end": 7
            }
        },
        "type": "Color",
        "group": [
            "color-system"
        ],
        "access": "public",
        "file": {
            "path": "color-system/_variables.scss",
            "name": "_variables.scss"
        }
    },
    {
        "description": "The color black.\nNote: you cannot change this value.\n",
        "commentRange": {
            "start": 9,
            "end": 12
        },
        "context": {
            "type": "variable",
            "name": "kendo-color-black",
            "value": "#000000",
            "scope": "private",
            "line": {
                "start": 13,
                "end": 13
            }
        },
        "type": "Color",
        "group": [
            "color-system"
        ],
        "access": "public",
        "file": {
            "path": "color-system/_variables.scss",
            "name": "_variables.scss"
        }
    },
    {
        "description": "The color transparent.\nNote: you cannot change this value.\n",
        "commentRange": {
            "start": 15,
            "end": 18
        },
        "context": {
            "type": "variable",
            "name": "kendo-color-rgba-transparent",
            "value": "rgba( 0, 0, 0, 0 )",
            "scope": "private",
            "line": {
                "start": 19,
                "end": 19
            }
        },
        "type": "Color",
        "group": [
            "color-system"
        ],
        "access": "public",
        "file": {
            "path": "color-system/_variables.scss",
            "name": "_variables.scss"
        }
    },
    {
        "description": "A gradient that goes from transparent to black.\nNote: you cannot change this value.\n",
        "commentRange": {
            "start": 21,
            "end": 24
        },
        "context": {
            "type": "variable",
            "name": "kendo-gradient-transparent-to-black",
            "value": "rgba( black, 0 ), black",
            "scope": "private",
            "line": {
                "start": 25,
                "end": 25
            }
        },
        "type": "Gradient",
        "group": [
            "color-system"
        ],
        "access": "public",
        "file": {
            "path": "color-system/_variables.scss",
            "name": "_variables.scss"
        }
    },
    {
        "description": "A gradient that goes from transparent to white.\nNote: you cannot change this value.\n",
        "commentRange": {
            "start": 27,
            "end": 30
        },
        "context": {
            "type": "variable",
            "name": "kendo-gradient-transparent-to-white",
            "value": "rgba( white, 0 ), white",
            "scope": "private",
            "line": {
                "start": 31,
                "end": 31
            }
        },
        "type": "Gradient",
        "group": [
            "color-system"
        ],
        "access": "public",
        "file": {
            "path": "color-system/_variables.scss",
            "name": "_variables.scss"
        }
    },
    {
        "description": "A gradient that goes from black to transparent.\nNote: you cannot change this value.\n",
        "commentRange": {
            "start": 33,
            "end": 36
        },
        "context": {
            "type": "variable",
            "name": "kendo-gradient-black-to-transparent",
            "value": "black, rgba( black, 0 )",
            "scope": "private",
            "line": {
                "start": 37,
                "end": 37
            }
        },
        "type": "Gradient",
        "group": [
            "color-system"
        ],
        "access": "public",
        "file": {
            "path": "color-system/_variables.scss",
            "name": "_variables.scss"
        }
    },
    {
        "description": "A gradient that goes from white to transparent.\nNote: you cannot change this value.\n",
        "commentRange": {
            "start": 39,
            "end": 42
        },
        "context": {
            "type": "variable",
            "name": "kendo-gradient-white-to-transparent",
            "value": "white, rgba( white, 0 )",
            "scope": "private",
            "line": {
                "start": 43,
                "end": 43
            }
        },
        "type": "Gradient",
        "group": [
            "color-system"
        ],
        "access": "public",
        "file": {
            "path": "color-system/_variables.scss",
            "name": "_variables.scss"
        }
    },
    {
        "description": "A gradient that cycles through the colors of the rainbow.\nNote: you cannot change this value.\n",
        "commentRange": {
            "start": 45,
            "end": 48
        },
        "context": {
            "type": "variable",
            "name": "kendo-gradient-rainbow",
            "value": "#ff0000, #ffff00, #00ff00, #00ffff, #0000ff, #ff00ff, #ff0000",
            "scope": "private",
            "line": {
                "start": 49,
                "end": 49
            }
        },
        "type": "Gradient",
        "group": [
            "color-system"
        ],
        "access": "public",
        "file": {
            "path": "color-system/_variables.scss",
            "name": "_variables.scss"
        }
    },
    {
        "description": "Set a specific jump point for requesting color jumps\n",
        "commentRange": {
            "start": 4,
            "end": 6
        },
        "context": {
            "type": "variable",
            "name": "kendo-color-level-step",
            "value": "8%",
            "scope": "default",
            "line": {
                "start": 7,
                "end": 7
            }
        },
        "group": [
            "color-system"
        ],
        "access": "private",
        "file": {
            "path": "functions/_color-manipulation.import.scss",
            "name": "_color-manipulation.import.scss"
        }
    },
    {
        "description": "Makes a color lighter by mixing it with white\n",
        "commentRange": {
            "start": 28,
            "end": 36
        },
        "context": {
            "type": "function",
            "name": "k-color-tint",
            "code": "\n    @return k-color-level( $color, -$level );\n",
            "line": {
                "start": 37,
                "end": 39
            }
        },
        "parameter": [
            {
                "type": "Color",
                "name": "color",
                "description": "The color to lighten"
            },
            {
                "type": "Number",
                "name": "level",
                "description": "The amount to lighten the color"
            }
        ],
        "return": {
            "type": "Color",
            "description": "The lightened color\n"
        },
        "group": [
            "color-system"
        ],
        "example": [
            {
                "type": "scss",
                "code": "@debug k-color-tint( #f00, 1 ); // => #ff1a1a",
                "description": "Usage"
            }
        ],
        "access": "public",
        "require": [],
        "file": {
            "path": "functions/_color-manipulation.import.scss",
            "name": "_color-manipulation.import.scss"
        },
        "usedBy": [
            {
                "description": "Shades the color in light themes and tints it in dark themes\n",
                "context": {
                    "type": "function",
                    "name": "k-try-shade",
                    "code": "\n    $_dark-theme: if( k-meta-variable-exists( kendo-is-dark-theme ), $kendo-is-dark-theme, false );\n\n    @if $_dark-theme {\n        @return k-color-tint( $color, $level );\n    }\n\n    @return k-color-shade( $color, $level );\n",
                    "line": {
                        "start": 60,
                        "end": 68
                    }
                }
            },
            {
                "description": "Tints the color in light themes and shades it in dark themes\n",
                "context": {
                    "type": "function",
                    "name": "k-try-tint",
                    "code": "\n    $_dark-theme: if( k-meta-variable-exists( kendo-is-dark-theme ), $kendo-is-dark-theme, false );\n\n    @if $_dark-theme {\n        @return k-color-shade( $color, $level );\n    }\n\n    @return k-color-tint( $color, $level );\n",
                    "line": {
                        "start": 76,
                        "end": 84
                    }
                }
            }
        ]
    },
    {
        "description": "Makes a color darker by mixing it with black\n",
        "commentRange": {
            "start": 41,
            "end": 49
        },
        "context": {
            "type": "function",
            "name": "k-color-shade",
            "code": "\n    @return k-color-level( $color, $level );\n",
            "line": {
                "start": 50,
                "end": 52
            }
        },
        "parameter": [
            {
                "type": "Color",
                "name": "color",
                "description": "The color to darken"
            },
            {
                "type": "Number",
                "name": "level",
                "description": "The amount to darken the color"
            }
        ],
        "return": {
            "type": "Color",
            "description": "The darkened color\n"
        },
        "group": [
            "color-system"
        ],
        "example": [
            {
                "type": "scss",
                "code": "@debug k-color-shade( #f00, 1 ); // => #e60000",
                "description": "Usage"
            }
        ],
        "access": "public",
        "require": [],
        "file": {
            "path": "functions/_color-manipulation.import.scss",
            "name": "_color-manipulation.import.scss"
        },
        "usedBy": [
            {
                "description": "Shades the color in light themes and tints it in dark themes\n",
                "context": {
                    "type": "function",
                    "name": "k-try-shade",
                    "code": "\n    $_dark-theme: if( k-meta-variable-exists( kendo-is-dark-theme ), $kendo-is-dark-theme, false );\n\n    @if $_dark-theme {\n        @return k-color-tint( $color, $level );\n    }\n\n    @return k-color-shade( $color, $level );\n",
                    "line": {
                        "start": 60,
                        "end": 68
                    }
                }
            },
            {
                "description": "Tints the color in light themes and shades it in dark themes\n",
                "context": {
                    "type": "function",
                    "name": "k-try-tint",
                    "code": "\n    $_dark-theme: if( k-meta-variable-exists( kendo-is-dark-theme ), $kendo-is-dark-theme, false );\n\n    @if $_dark-theme {\n        @return k-color-shade( $color, $level );\n    }\n\n    @return k-color-tint( $color, $level );\n",
                    "line": {
                        "start": 76,
                        "end": 84
                    }
                }
            }
        ]
    },
    {
        "description": "Shades the color in light themes and tints it in dark themes\n",
        "commentRange": {
            "start": 54,
            "end": 59
        },
        "context": {
            "type": "function",
            "name": "k-try-shade",
            "code": "\n    $_dark-theme: if( k-meta-variable-exists( kendo-is-dark-theme ), $kendo-is-dark-theme, false );\n\n    @if $_dark-theme {\n        @return k-color-tint( $color, $level );\n    }\n\n    @return k-color-shade( $color, $level );\n",
            "line": {
                "start": 60,
                "end": 68
            }
        },
        "parameter": [
            {
                "type": "Color",
                "name": "color",
                "description": "The color to shade or tint"
            },
            {
                "type": "Number",
                "name": "level",
                "description": "The amount to shade or tint the color"
            }
        ],
        "return": {
            "type": "Color",
            "description": "The shaded or tinted color\n"
        },
        "group": [
            "color-system"
        ],
        "access": "public",
        "require": [
            {
                "type": "function",
                "name": "k-meta-variable-exists"
            },
            {
                "type": "function",
                "name": "k-color-tint"
            },
            {
                "type": "function",
                "name": "k-color-shade"
            }
        ],
        "file": {
            "path": "functions/_color-manipulation.import.scss",
            "name": "_color-manipulation.import.scss"
        }
    },
    {
        "description": "Tints the color in light themes and shades it in dark themes\n",
        "commentRange": {
            "start": 70,
            "end": 75
        },
        "context": {
            "type": "function",
            "name": "k-try-tint",
            "code": "\n    $_dark-theme: if( k-meta-variable-exists( kendo-is-dark-theme ), $kendo-is-dark-theme, false );\n\n    @if $_dark-theme {\n        @return k-color-shade( $color, $level );\n    }\n\n    @return k-color-tint( $color, $level );\n",
            "line": {
                "start": 76,
                "end": 84
            }
        },
        "parameter": [
            {
                "type": "Color",
                "name": "color",
                "description": "The color to tint or shade"
            },
            {
                "type": "Number",
                "name": "level",
                "description": "The amount to tint or shade the color"
            }
        ],
        "return": {
            "type": "Color",
            "description": "The tinted or shaded color\n"
        },
        "group": [
            "color-system"
        ],
        "access": "public",
        "require": [
            {
                "type": "function",
                "name": "k-meta-variable-exists"
            },
            {
                "type": "function",
                "name": "k-color-shade"
            },
            {
                "type": "function",
                "name": "k-color-tint"
            }
        ],
        "file": {
            "path": "functions/_color-manipulation.import.scss",
            "name": "_color-manipulation.import.scss"
        }
    },
    {
        "description": "Darkens the color in light themes and lightens it in dark themes\n",
        "commentRange": {
            "start": 86,
            "end": 91
        },
        "context": {
            "type": "function",
            "name": "k-try-darken",
            "code": "\n    $_dark-theme: if( k-meta-variable-exists( kendo-is-dark-theme ), $kendo-is-dark-theme, false );\n\n    @if $_dark-theme {\n        @return k-color-lighten( $color, $amount );\n    }\n    @return k-color-darken( $color, $amount );\n",
            "line": {
                "start": 92,
                "end": 99
            }
        },
        "parameter": [
            {
                "type": "Color",
                "name": "color",
                "description": "The color to darken or lighten"
            },
            {
                "type": "Number",
                "name": "level",
                "description": "The amount to darken or lighten the color"
            }
        ],
        "return": {
            "type": "Color",
            "description": "The darkened or lightened color\n"
        },
        "group": [
            "color-system"
        ],
        "access": "public",
        "require": [
            {
                "type": "function",
                "name": "k-meta-variable-exists"
            },
            {
                "type": "function",
                "name": "k-color-lighten"
            },
            {
                "type": "function",
                "name": "k-color-darken"
            }
        ],
        "file": {
            "path": "functions/_color-manipulation.import.scss",
            "name": "_color-manipulation.import.scss"
        }
    },
    {
        "description": "Lightens the color in light themes and darkens it in dark themes\n",
        "commentRange": {
            "start": 101,
            "end": 106
        },
        "context": {
            "type": "function",
            "name": "k-try-lighten",
            "code": "\n    $_dark-theme: if( k-meta-variable-exists( kendo-is-dark-theme ), $kendo-is-dark-theme, false );\n\n    @if $_dark-theme {\n        @return k-color-darken( $color, $amount );\n    }\n    @return k-color-lighten( $color, $amount );\n",
            "line": {
                "start": 107,
                "end": 114
            }
        },
        "parameter": [
            {
                "type": "Color",
                "name": "color",
                "description": "The color to lighten or darken"
            },
            {
                "type": "Number",
                "name": "level",
                "description": "The amount to lighten or darken the color"
            }
        ],
        "return": {
            "type": "Color",
            "description": "The lightened or darkened color\n"
        },
        "group": [
            "color-system"
        ],
        "access": "public",
        "require": [
            {
                "type": "function",
                "name": "k-meta-variable-exists"
            },
            {
                "type": "function",
                "name": "k-color-darken"
            },
            {
                "type": "function",
                "name": "k-color-lighten"
            }
        ],
        "file": {
            "path": "functions/_color-manipulation.import.scss",
            "name": "_color-manipulation.import.scss"
        }
    },
    {
        "description": "Converts a color with alpha to solid color mixed with a background color\n",
        "commentRange": {
            "start": 116,
            "end": 124
        },
        "context": {
            "type": "function",
            "name": "k-rgba-to-mix",
            "code": "\n    $percent: k-color-alpha( $color ) * 100%;\n\n    @return k-color-mix( rgba( $color, 1 ), $bg, $percent );\n",
            "line": {
                "start": 125,
                "end": 129
            }
        },
        "parameter": [
            {
                "type": "Color",
                "name": "color",
                "description": "The color to convert"
            },
            {
                "type": "Color",
                "name": "bg",
                "description": "The background color"
            }
        ],
        "return": {
            "type": "Color",
            "description": "The converted color\n"
        },
        "group": [
            "color-system"
        ],
        "example": [
            {
                "type": "scss",
                "code": "@debug k-rgba-to-mix( rgba( #f00, 0.5 ), #fff ); // => #ff8080",
                "description": "Usage"
            }
        ],
        "access": "public",
        "require": [
            {
                "type": "function",
                "name": "k-color-alpha"
            },
            {
                "type": "function",
                "name": "k-color-mix"
            }
        ],
        "file": {
            "path": "functions/_color-manipulation.import.scss",
            "name": "_color-manipulation.import.scss"
        }
    },
    {
        "description": "Border radius for all components.\n",
        "commentRange": {
            "start": 46,
            "end": 46
        },
        "context": {
            "type": "variable",
            "name": "kendo-border-radius",
            "value": "k-map-get($kendo-spacing, 0.5)",
            "scope": "default",
            "line": {
                "start": 47,
                "end": 47
            }
        },
        "access": "public",
        "group": [
            "undefined"
        ],
        "file": {
            "path": "_variables.scss",
            "name": "_variables.scss"
        }
    },
    {
        "description": "Shadow for cards and grid item thumbnails.\nEquivalent to fluent depth 4.\n",
        "commentRange": {
            "start": 80,
            "end": 81
        },
        "context": {
            "type": "variable",
            "name": "kendo-box-shadow-depth-1",
            "value": "0 1.6px 3.6px rgba( $kendo-color-black, 0.132 ), 0 0.3px 0.9px rgba( $kendo-color-black, 0.108 )",
            "scope": "default",
            "line": {
                "start": 82,
                "end": 82
            }
        },
        "access": "public",
        "group": [
            "undefined"
        ],
        "file": {
            "path": "color-system/_variables.scss",
            "name": "_variables.scss"
        }
    },
    {
        "description": "Shadow for command bars and dropdowns.\nEquivalent to fluent depth 8.\n",
        "commentRange": {
            "start": 83,
            "end": 84
        },
        "context": {
            "type": "variable",
            "name": "kendo-box-shadow-depth-2",
            "value": "0 3.2px 7.2px rgba( $kendo-color-black, 0.132 ), 0 0.6px 1.8px rgba( $kendo-color-black, 0.108 )",
            "scope": "default",
            "line": {
                "start": 85,
                "end": 85
            }
        },
        "access": "public",
        "group": [
            "undefined"
        ],
        "file": {
            "path": "color-system/_variables.scss",
            "name": "_variables.scss"
        }
    },
    {
        "description": "Shadow for teaching callouts and hover cards / tooltips.\nEquivalent to fluent depth 16.\n",
        "commentRange": {
            "start": 86,
            "end": 87
        },
        "context": {
            "type": "variable",
            "name": "kendo-box-shadow-depth-3",
            "value": "0 6.4px 14.4px rgba( $kendo-color-black, 0.132 ), 0 1.2px 3.6px rgba( $kendo-color-black, 0.108 )",
            "scope": "default",
            "line": {
                "start": 88,
                "end": 88
            }
        },
        "access": "public",
        "group": [
            "undefined"
        ],
        "file": {
            "path": "color-system/_variables.scss",
            "name": "_variables.scss"
        }
    },
    {
        "description": "Shadow for panels and pop up dialogs.\nEquivalent to fluent depth 64.\n",
        "commentRange": {
            "start": 89,
            "end": 90
        },
        "context": {
            "type": "variable",
            "name": "kendo-box-shadow-depth-4",
            "value": "0 25.6px 57.6px rgba( $kendo-color-black, 0.22 ), 0 4.8px 14.4px rgba( $kendo-color-black, 0.18 )",
            "scope": "default",
            "line": {
                "start": 91,
                "end": 91
            }
        },
        "access": "public",
        "group": [
            "undefined"
        ],
        "file": {
            "path": "color-system/_variables.scss",
            "name": "_variables.scss"
        }
    },
    {
        "description": "Returns the alpha channel of a color.\n",
        "commentRange": {
            "start": 1,
            "end": 7
        },
        "context": {
            "type": "function",
            "name": "k-color-alpha",
            "code": "\n    @return alpha( $color );\n",
            "line": {
                "start": 8,
                "end": 10
            }
        },
        "parameter": [
            {
                "type": "Color",
                "name": "color",
                "description": "The color to get the alpha channel for."
            }
        ],
        "return": {
            "type": "Number",
            "description": "The alpha channel of the color.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-color-alpha( rgba( 0, 0, 0, 0.5 ) ); // => 0.5\n@debug k-color-alpha( #000 ); // => 1",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_color.import.scss",
            "name": "_color.import.scss"
        },
        "usedBy": [
            {
                "description": "Converts a color with alpha to solid color mixed with a background color\n",
                "context": {
                    "type": "function",
                    "name": "k-rgba-to-mix",
                    "code": "\n    $percent: k-color-alpha( $color ) * 100%;\n\n    @return k-color-mix( rgba( $color, 1 ), $bg, $percent );\n",
                    "line": {
                        "start": 125,
                        "end": 129
                    }
                }
            }
        ]
    },
    {
        "description": "Returns the red channel of a color.\n",
        "commentRange": {
            "start": 12,
            "end": 17
        },
        "context": {
            "type": "function",
            "name": "k-color-red",
            "code": "\n    @return red( $color );\n",
            "line": {
                "start": 18,
                "end": 20
            }
        },
        "parameter": [
            {
                "type": "Color",
                "name": "color",
                "description": "The color to get the red channel for."
            }
        ],
        "return": {
            "type": "Number",
            "description": "The red channel of the color.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-color-red( #ff0000 ); // => 255",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_color.import.scss",
            "name": "_color.import.scss"
        },
        "usedBy": [
            {
                "description": "Calculate the relative luminance for a color.\n",
                "context": {
                    "type": "function",
                    "name": "k-color-luminance",
                    "code": "\n    $red: k-list-nth( $_linear-channel-values, k-color-red( $color ) + 1 );\n    $green: k-list-nth( $_linear-channel-values, k-color-green( $color ) + 1 );\n    $blue: k-list-nth( $_linear-channel-values, k-color-blue( $color ) + 1 );\n\n    @return .2126 * $red + .7152 * $green + .0722 * $blue;\n",
                    "line": {
                        "start": 298,
                        "end": 304
                    }
                }
            }
        ]
    },
    {
        "description": "Returns the green channel of a color.\n",
        "commentRange": {
            "start": 22,
            "end": 27
        },
        "context": {
            "type": "function",
            "name": "k-color-green",
            "code": "\n    @return green( $color );\n",
            "line": {
                "start": 28,
                "end": 30
            }
        },
        "parameter": [
            {
                "type": "Color",
                "name": "color",
                "description": "The color to get the green channel for."
            }
        ],
        "return": {
            "type": "Number",
            "description": "The green channel of the color.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-color-green( #00ff00 ); // => 255",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_color.import.scss",
            "name": "_color.import.scss"
        },
        "usedBy": [
            {
                "description": "Calculate the relative luminance for a color.\n",
                "context": {
                    "type": "function",
                    "name": "k-color-luminance",
                    "code": "\n    $red: k-list-nth( $_linear-channel-values, k-color-red( $color ) + 1 );\n    $green: k-list-nth( $_linear-channel-values, k-color-green( $color ) + 1 );\n    $blue: k-list-nth( $_linear-channel-values, k-color-blue( $color ) + 1 );\n\n    @return .2126 * $red + .7152 * $green + .0722 * $blue;\n",
                    "line": {
                        "start": 298,
                        "end": 304
                    }
                }
            }
        ]
    },
    {
        "description": "Returns the blue channel of a color.\n",
        "commentRange": {
            "start": 32,
            "end": 37
        },
        "context": {
            "type": "function",
            "name": "k-color-blue",
            "code": "\n    @return blue( $color );\n",
            "line": {
                "start": 38,
                "end": 40
            }
        },
        "parameter": [
            {
                "type": "Color",
                "name": "color",
                "description": "The color to get the blue channel for."
            }
        ],
        "return": {
            "type": "Number",
            "description": "The blue channel of the color.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-color-blue( #0000ff ); // => 255",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_color.import.scss",
            "name": "_color.import.scss"
        },
        "usedBy": [
            {
                "description": "Calculate the relative luminance for a color.\n",
                "context": {
                    "type": "function",
                    "name": "k-color-luminance",
                    "code": "\n    $red: k-list-nth( $_linear-channel-values, k-color-red( $color ) + 1 );\n    $green: k-list-nth( $_linear-channel-values, k-color-green( $color ) + 1 );\n    $blue: k-list-nth( $_linear-channel-values, k-color-blue( $color ) + 1 );\n\n    @return .2126 * $red + .7152 * $green + .0722 * $blue;\n",
                    "line": {
                        "start": 298,
                        "end": 304
                    }
                }
            }
        ]
    },
    {
        "description": "Returns the hue of a color.\n",
        "commentRange": {
            "start": 42,
            "end": 47
        },
        "context": {
            "type": "function",
            "name": "k-color-hue",
            "code": "\n    @return hue( $color );\n",
            "line": {
                "start": 48,
                "end": 50
            }
        },
        "parameter": [
            {
                "type": "Color",
                "name": "color",
                "description": "The color to get the hue for."
            }
        ],
        "return": {
            "type": "Number",
            "description": "The hue of the color.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-color-hue( #e1d7d2 ); // => 20deg",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_color.import.scss",
            "name": "_color.import.scss"
        }
    },
    {
        "description": "Returns the saturation of a color.\n",
        "commentRange": {
            "start": 52,
            "end": 57
        },
        "context": {
            "type": "function",
            "name": "k-color-saturation",
            "code": "\n    @return saturation( $color );\n",
            "line": {
                "start": 58,
                "end": 60
            }
        },
        "parameter": [
            {
                "type": "Color",
                "name": "color",
                "description": "The color to get the saturation for."
            }
        ],
        "return": {
            "type": "Number",
            "description": "The saturation of the color.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-color-saturation( #e1d7d2 ); // => 20%",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_color.import.scss",
            "name": "_color.import.scss"
        }
    },
    {
        "description": "Returns the lightness of a color.\n",
        "commentRange": {
            "start": 62,
            "end": 67
        },
        "context": {
            "type": "function",
            "name": "k-color-lightness",
            "code": "\n    @return lightness( $color );\n",
            "line": {
                "start": 68,
                "end": 70
            }
        },
        "parameter": [
            {
                "type": "Color",
                "name": "color",
                "description": "The color to get the lightness for."
            }
        ],
        "return": {
            "type": "Number",
            "description": "The lightness of the color.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-color-lightness( #e1d7d2 ); // => 80%",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_color.import.scss",
            "name": "_color.import.scss"
        }
    },
    {
        "description": "Returns a color that is a mix of two colors.\n",
        "commentRange": {
            "start": 72,
            "end": 79
        },
        "context": {
            "type": "function",
            "name": "k-color-mix",
            "code": "\n    @return mix( $color1, $color2, $weight );\n",
            "line": {
                "start": 80,
                "end": 82
            }
        },
        "parameter": [
            {
                "type": "Color",
                "name": "color1",
                "description": "The first color."
            },
            {
                "type": "Color",
                "name": "color2",
                "description": "The second color."
            },
            {
                "type": "Number",
                "name": "weight",
                "description": "The weight of the first color in the mix."
            }
        ],
        "return": {
            "type": "Color",
            "description": "The mixed color.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-color-mix( #f00, #00f ); // => #800080",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_color.import.scss",
            "name": "_color.import.scss"
        },
        "usedBy": [
            {
                "description": "Converts a color with alpha to solid color mixed with a background color\n",
                "context": {
                    "type": "function",
                    "name": "k-rgba-to-mix",
                    "code": "\n    $percent: k-color-alpha( $color ) * 100%;\n\n    @return k-color-mix( rgba( $color, 1 ), $bg, $percent );\n",
                    "line": {
                        "start": 125,
                        "end": 129
                    }
                }
            }
        ]
    },
    {
        "description": "Makes a color darker by decreasing its lightness.\n",
        "commentRange": {
            "start": 84,
            "end": 90
        },
        "context": {
            "type": "function",
            "name": "k-color-darken",
            "code": "\n    @return darken( $color, $amount );\n",
            "line": {
                "start": 91,
                "end": 93
            }
        },
        "parameter": [
            {
                "type": "Color",
                "name": "color",
                "description": "The color to darken."
            },
            {
                "type": "Number",
                "name": "amount",
                "description": "The amount to darken the color."
            }
        ],
        "return": {
            "type": "Color",
            "description": "The darkened color.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-color-darken( #f00, 10% ); // => #e60000",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_color.import.scss",
            "name": "_color.import.scss"
        },
        "usedBy": [
            {
                "description": "Darkens the color in light themes and lightens it in dark themes\n",
                "context": {
                    "type": "function",
                    "name": "k-try-darken",
                    "code": "\n    $_dark-theme: if( k-meta-variable-exists( kendo-is-dark-theme ), $kendo-is-dark-theme, false );\n\n    @if $_dark-theme {\n        @return k-color-lighten( $color, $amount );\n    }\n    @return k-color-darken( $color, $amount );\n",
                    "line": {
                        "start": 92,
                        "end": 99
                    }
                }
            },
            {
                "description": "Lightens the color in light themes and darkens it in dark themes\n",
                "context": {
                    "type": "function",
                    "name": "k-try-lighten",
                    "code": "\n    $_dark-theme: if( k-meta-variable-exists( kendo-is-dark-theme ), $kendo-is-dark-theme, false );\n\n    @if $_dark-theme {\n        @return k-color-darken( $color, $amount );\n    }\n    @return k-color-lighten( $color, $amount );\n",
                    "line": {
                        "start": 107,
                        "end": 114
                    }
                }
            }
        ]
    },
    {
        "description": "Makes a color lighter by increasing its lightness.\n",
        "commentRange": {
            "start": 95,
            "end": 101
        },
        "context": {
            "type": "function",
            "name": "k-color-lighten",
            "code": "\n    @return lighten( $color, $amount );\n",
            "line": {
                "start": 102,
                "end": 104
            }
        },
        "parameter": [
            {
                "type": "Color",
                "name": "color",
                "description": "The color to lighten."
            },
            {
                "type": "Number",
                "name": "amount",
                "description": "The amount to lighten the color."
            }
        ],
        "return": {
            "type": "Color",
            "description": "The lightened color.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-color-lighten( #f00, 10% ); // => #ff1a1a",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_color.import.scss",
            "name": "_color.import.scss"
        },
        "usedBy": [
            {
                "description": "Darkens the color in light themes and lightens it in dark themes\n",
                "context": {
                    "type": "function",
                    "name": "k-try-darken",
                    "code": "\n    $_dark-theme: if( k-meta-variable-exists( kendo-is-dark-theme ), $kendo-is-dark-theme, false );\n\n    @if $_dark-theme {\n        @return k-color-lighten( $color, $amount );\n    }\n    @return k-color-darken( $color, $amount );\n",
                    "line": {
                        "start": 92,
                        "end": 99
                    }
                }
            },
            {
                "description": "Lightens the color in light themes and darkens it in dark themes\n",
                "context": {
                    "type": "function",
                    "name": "k-try-lighten",
                    "code": "\n    $_dark-theme: if( k-meta-variable-exists( kendo-is-dark-theme ), $kendo-is-dark-theme, false );\n\n    @if $_dark-theme {\n        @return k-color-darken( $color, $amount );\n    }\n    @return k-color-lighten( $color, $amount );\n",
                    "line": {
                        "start": 107,
                        "end": 114
                    }
                }
            }
        ]
    },
    {
        "description": "Increases or decreases the hue of a color.\n",
        "commentRange": {
            "start": 106,
            "end": 112
        },
        "context": {
            "type": "function",
            "name": "k-color-adjust-hue",
            "code": "\n    @return adjust-hue( $color, $degrees );\n",
            "line": {
                "start": 113,
                "end": 115
            }
        },
        "parameter": [
            {
                "type": "Color",
                "name": "color",
                "description": "The color to adjust the hue for."
            },
            {
                "type": "Number",
                "name": "degrees",
                "description": "The amount to adjust the hue."
            }
        ],
        "return": {
            "type": "Color",
            "description": "The adjusted color.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-color-adjust-hue( #f00, 10deg ); // => #ff1a00",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_color.import.scss",
            "name": "_color.import.scss"
        }
    },
    {
        "description": "Increases the saturation of a color.\n",
        "commentRange": {
            "start": 117,
            "end": 123
        },
        "context": {
            "type": "function",
            "name": "k-color-saturate",
            "code": "\n    @return saturate( $color, $amount );\n",
            "line": {
                "start": 124,
                "end": 126
            }
        },
        "parameter": [
            {
                "type": "Color",
                "name": "color",
                "description": "The color to saturate."
            },
            {
                "type": "Number",
                "name": "amount",
                "description": "The amount to saturate the color."
            }
        ],
        "return": {
            "type": "Color",
            "description": "The saturated color.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-color-saturate( #f00, 10% ); // => #ff3333",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_color.import.scss",
            "name": "_color.import.scss"
        }
    },
    {
        "description": "Decreases the saturation of a color.\n",
        "commentRange": {
            "start": 128,
            "end": 134
        },
        "context": {
            "type": "function",
            "name": "k-color-desaturate",
            "code": "\n    @return desaturate( $color, $amount );\n",
            "line": {
                "start": 135,
                "end": 137
            }
        },
        "parameter": [
            {
                "type": "Color",
                "name": "color",
                "description": "The color to desaturate."
            },
            {
                "type": "Number",
                "name": "amount",
                "description": "The amount to desaturate the color."
            }
        ],
        "return": {
            "type": "Color",
            "description": "The desaturated color.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-color-desaturate( #f00, 10% ); // => #e60000",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_color.import.scss",
            "name": "_color.import.scss"
        }
    },
    {
        "description": "Returns a gray color with the same lightness as the input color.\n",
        "commentRange": {
            "start": 139,
            "end": 144
        },
        "context": {
            "type": "function",
            "name": "k-color-grayscale",
            "code": "\n    @return grayscale( $color );\n",
            "line": {
                "start": 145,
                "end": 147
            }
        },
        "parameter": [
            {
                "type": "Color",
                "name": "color",
                "description": "The color to convert to grayscale."
            }
        ],
        "return": {
            "type": "Color",
            "description": "The grayscale color.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-color-grayscale( #f00 ); // => #808080",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_color.import.scss",
            "name": "_color.import.scss"
        }
    },
    {
        "description": "Returns the RGB complement of a color. This identical to adjusting the hue\nby 180 degrees.\n",
        "commentRange": {
            "start": 149,
            "end": 155
        },
        "context": {
            "type": "function",
            "name": "k-color-complement",
            "code": "\n    @return complement( $color );\n",
            "line": {
                "start": 156,
                "end": 158
            }
        },
        "parameter": [
            {
                "type": "Color",
                "name": "color",
                "description": "The color to get the complement for."
            }
        ],
        "return": {
            "type": "Color",
            "description": "The complement color.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-color-complement( #f00 ); // => #00ffff",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_color.import.scss",
            "name": "_color.import.scss"
        }
    },
    {
        "description": "Returns the inverse of a color.\n",
        "commentRange": {
            "start": 160,
            "end": 165
        },
        "context": {
            "type": "function",
            "name": "k-color-invert",
            "code": "\n    @return invert( $color );\n",
            "line": {
                "start": 166,
                "end": 168
            }
        },
        "parameter": [
            {
                "type": "Color",
                "name": "color",
                "description": "The color to invert."
            }
        ],
        "return": {
            "type": "Color",
            "description": "The inverted color.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-color-invert( #f00 ); // => #00ffff",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_color.import.scss",
            "name": "_color.import.scss"
        }
    },
    {
        "description": "Escapes SVG characters in a string\n",
        "commentRange": {
            "start": 10,
            "end": 14
        },
        "context": {
            "type": "function",
            "name": "k-escape-svg",
            "code": "\n    @if k-string-index($string, \"data:image/svg+xml\") {\n        @each $char, $encoded in $_kendo-svg-escaped-characters {\n            // Do not escape the url brackets\n            @if k-string-index($string, \"url(\") == 1 {\n                $string: url(\"#{k-string-replace(k-string-slice($string, 6, -3), $char, $encoded)}\");\n            } @else {\n                $string: k-string-replace($string, $char, $encoded);\n            }\n        }\n    }\n\n    @return $string;\n",
            "line": {
                "start": 15,
                "end": 28
            }
        },
        "parameter": [
            {
                "type": "String",
                "name": "string",
                "description": "The string to escape"
            }
        ],
        "return": {
            "type": "String",
            "description": "The escaped string\n"
        },
        "link": [
            {
                "url": "https://codepen.io/kevinweber/pen/dXWoRw",
                "caption": ""
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [
            {
                "type": "function",
                "name": "k-string-index"
            },
            {
                "type": "function",
                "name": "k-string-index"
            },
            {
                "type": "function",
                "name": "k-string-replace"
            },
            {
                "type": "function",
                "name": "k-string-slice"
            },
            {
                "type": "function",
                "name": "k-string-replace"
            }
        ],
        "file": {
            "path": "functions/_escape-string.import.scss",
            "name": "_escape-string.import.scss"
        }
    },
    {
        "description": "Escapes special characters in a class name\n",
        "commentRange": {
            "start": 37,
            "end": 39
        },
        "context": {
            "type": "function",
            "name": "k-escape-class-name",
            "code": "\n    $_text: $text;\n\n    @each $char, $rep in $_kendo-escape-class-name {\n        $_text: k-string-replace( $_text, k-string-unquote( $char ), k-string-unquote( $rep ) );\n    }\n\n    @return $_text;\n",
            "line": {
                "start": 40,
                "end": 48
            }
        },
        "parameter": [
            {
                "type": "String",
                "name": "text",
                "description": "The string to escape"
            }
        ],
        "return": {
            "type": "String",
            "description": "The escaped string"
        },
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [
            {
                "type": "function",
                "name": "k-string-replace"
            },
            {
                "type": "function",
                "name": "k-string-unquote"
            },
            {
                "type": "function",
                "name": "k-string-unquote"
            }
        ],
        "file": {
            "path": "functions/_escape-string.import.scss",
            "name": "_escape-string.import.scss"
        }
    },
    {
        "description": "Returns the value of a variable if it is not null,\notherwise returns the fallback value.\n",
        "commentRange": {
            "start": 1,
            "end": 11
        },
        "context": {
            "type": "function",
            "name": "k-if-var",
            "code": "\n    @return if( $var != null, $var, $fallback );\n",
            "line": {
                "start": 12,
                "end": 14
            }
        },
        "parameter": [
            {
                "type": "Any",
                "name": "var",
                "description": "The variable to check."
            },
            {
                "type": "Any",
                "name": "fallback",
                "description": "The fallback value."
            }
        ],
        "return": {
            "type": "Any",
            "description": "The value of the variable or the fallback value.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "$foo: null;\n@debug k-if-var( $foo, \"bar\" ); // => \"bar\"\n$foo: \"baz\";\n@debug k-if-var( $foo, \"bar\" ); // => \"baz\"",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_lang.import.scss",
            "name": "_lang.import.scss"
        }
    },
    {
        "description": "Returns a copy of `$list` with `$val` appended to the end.\n",
        "commentRange": {
            "start": 1,
            "end": 8
        },
        "context": {
            "type": "function",
            "name": "k-list-append",
            "code": "\n    @return append( $list, $val, $separator );\n",
            "line": {
                "start": 9,
                "end": 11
            }
        },
        "parameter": [
            {
                "type": "List",
                "name": "list",
                "description": "The list to process."
            },
            {
                "type": "Any",
                "name": "val",
                "description": "The value to append to `$list`."
            },
            {
                "type": "String",
                "name": "separator",
                "description": "The separator to use between `$list` and `$val`."
            }
        ],
        "return": {
            "type": "List",
            "description": "A copy of `$list` with `$val` appended to the end.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-list-append( ( \"foo\", \"bar\" ), \"baz\" ); // => \"foo, bar, baz\"",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_list.import.scss",
            "name": "_list.import.scss"
        },
        "usedBy": [
            {
                "description": "Reverse the order of items in `$list`.\n",
                "context": {
                    "type": "function",
                    "name": "k-list-reverse",
                    "code": "\n    $result: ();\n\n    @if ($list) {\n        $len: k-list-length( $list );\n\n        @for $i from $len through 1 {\n            $result: k-list-append( $result, k-list-nth( $list, $i ) );\n        }\n\n        @return $result;\n    }\n\n    @warn \"No list passed.\";\n    @return $result;\n",
                    "line": {
                        "start": 88,
                        "end": 103
                    }
                }
            },
            {
                "description": "Outputs a module once, no matter how many times it is included.\n",
                "context": {
                    "type": "mixin",
                    "name": "exports",
                    "code": "\n    @if (k-list-index( $_kendo-imported-modules, $name ) == null) { // stylelint-disable-line\n        $_kendo-imported-modules: k-list-append( $_kendo-imported-modules, $name ) !global;\n        @content;\n    }\n",
                    "line": {
                        "start": 9,
                        "end": 14
                    }
                }
            }
        ]
    },
    {
        "description": "Checks whether `$list` contains `$value`.\n",
        "commentRange": {
            "start": 13,
            "end": 20
        },
        "context": {
            "type": "function",
            "name": "k-list-includes",
            "code": "\n    @return k-list-index( $list, $value ) != null;\n",
            "line": {
                "start": 21,
                "end": 23
            }
        },
        "parameter": [
            {
                "type": "List",
                "name": "list",
                "description": "The list to check."
            },
            {
                "type": "Any",
                "name": "value",
                "description": "The value to check for."
            }
        ],
        "return": {
            "type": "Boolean",
            "description": "Whether `$list` contains `$value`.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-list-includes( ( \"foo\", \"bar\" ), \"foo\" ); // => true\n@debug k-list-includes( ( \"foo\", \"bar\" ), \"baz\" ); // => false",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [
            {
                "type": "function",
                "name": "k-list-index"
            }
        ],
        "file": {
            "path": "functions/_list.import.scss",
            "name": "_list.import.scss"
        }
    },
    {
        "description": "Returns the index of `$value` in `$list`.\n",
        "commentRange": {
            "start": 25,
            "end": 31
        },
        "context": {
            "type": "function",
            "name": "k-list-index",
            "code": "\n    @return index( $list, $value );\n",
            "line": {
                "start": 32,
                "end": 34
            }
        },
        "parameter": [
            {
                "type": "List",
                "name": "list",
                "description": "The list to check."
            },
            {
                "type": "Any",
                "name": "value",
                "description": "The value to check for."
            }
        ],
        "return": {
            "type": "Number",
            "description": "The index of `$value` in `$list`.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-list-index( ( \"foo\", \"bar\" ), \"foo\" ); // => 1",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_list.import.scss",
            "name": "_list.import.scss"
        },
        "usedBy": [
            {
                "description": "Checks whether `$list` contains `$value`.\n",
                "context": {
                    "type": "function",
                    "name": "k-list-includes",
                    "code": "\n    @return k-list-index( $list, $value ) != null;\n",
                    "line": {
                        "start": 21,
                        "end": 23
                    }
                }
            },
            {
                "description": "Outputs a module once, no matter how many times it is included.\n",
                "context": {
                    "type": "mixin",
                    "name": "exports",
                    "code": "\n    @if (k-list-index( $_kendo-imported-modules, $name ) == null) { // stylelint-disable-line\n        $_kendo-imported-modules: k-list-append( $_kendo-imported-modules, $name ) !global;\n        @content;\n    }\n",
                    "line": {
                        "start": 9,
                        "end": 14
                    }
                }
            }
        ]
    },
    {
        "description": "Returns whether `$list` is bracketed.\n",
        "commentRange": {
            "start": 36,
            "end": 42
        },
        "context": {
            "type": "function",
            "name": "k-list-is-bracketed",
            "code": "\n    @return is-bracketed( $list );\n",
            "line": {
                "start": 43,
                "end": 45
            }
        },
        "parameter": [
            {
                "type": "List",
                "name": "list",
                "description": "The list to check."
            }
        ],
        "return": {
            "type": "Boolean",
            "description": "Whether `$list` is bracketed.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-list-is-bracketed( ( \"foo\", \"bar\" ) ); // => false\n@debug k-list-is-bracketed( [ \"foo\", \"bar\" ] ); // => true",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_list.import.scss",
            "name": "_list.import.scss"
        }
    },
    {
        "description": "Joins two lists together.\n",
        "commentRange": {
            "start": 47,
            "end": 56
        },
        "context": {
            "type": "function",
            "name": "k-list-join",
            "code": "\n    @return join( $list1, $list2, $separator, $bracketed );\n",
            "line": {
                "start": 57,
                "end": 59
            }
        },
        "parameter": [
            {
                "type": "List",
                "name": "list1",
                "description": "The first list to join."
            },
            {
                "type": "List",
                "name": "list2",
                "description": "The second list to join."
            },
            {
                "type": "String",
                "name": "separator",
                "description": "The separator to use between `$list1` and `$list2`."
            },
            {
                "type": "Boolean",
                "name": "bracketed",
                "description": "Whether the result should be bracketed."
            }
        ],
        "return": {
            "type": "List",
            "description": "The joined list.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-list-join( ( \"foo\", \"bar\" ), ( \"baz\", \"qux\" ) ); // => \"foo, bar, baz, qux\"\n@debug k-list-join( ( \"foo\", \"bar\" ), ( \"baz\", \"qux\" ), \" \" ); // => \"foo bar baz qux\"",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_list.import.scss",
            "name": "_list.import.scss"
        }
    },
    {
        "description": "Returns the length of `$list`.\n",
        "commentRange": {
            "start": 61,
            "end": 66
        },
        "context": {
            "type": "function",
            "name": "k-list-length",
            "code": "\n    @return length( $list );\n",
            "line": {
                "start": 67,
                "end": 69
            }
        },
        "parameter": [
            {
                "type": "List",
                "name": "list",
                "description": "The list to check."
            }
        ],
        "return": {
            "type": "Number",
            "description": "The length of `$list`.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-list-length( ( \"foo\", \"bar\" ) ); // => 2",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_list.import.scss",
            "name": "_list.import.scss"
        },
        "usedBy": [
            {
                "description": "Reverse the order of items in `$list`.\n",
                "context": {
                    "type": "function",
                    "name": "k-list-reverse",
                    "code": "\n    $result: ();\n\n    @if ($list) {\n        $len: k-list-length( $list );\n\n        @for $i from $len through 1 {\n            $result: k-list-append( $result, k-list-nth( $list, $i ) );\n        }\n\n        @return $result;\n    }\n\n    @warn \"No list passed.\";\n    @return $result;\n",
                    "line": {
                        "start": 88,
                        "end": 103
                    }
                }
            }
        ]
    },
    {
        "description": "Returns the nth item in `$list`.\n",
        "commentRange": {
            "start": 71,
            "end": 77
        },
        "context": {
            "type": "function",
            "name": "k-list-nth",
            "code": "\n    @return nth( $list, $n );\n",
            "line": {
                "start": 78,
                "end": 80
            }
        },
        "parameter": [
            {
                "type": "List",
                "name": "list",
                "description": "The list to check."
            },
            {
                "type": "Number",
                "name": "n",
                "description": "The index of the item to return."
            }
        ],
        "return": {
            "type": "Any",
            "description": "The nth item in `$list`.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-list-nth( ( \"foo\", \"bar\" ), 1 ); // => \"foo\"",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_list.import.scss",
            "name": "_list.import.scss"
        },
        "usedBy": [
            {
                "description": "Calculate the relative luminance for a color.\n",
                "context": {
                    "type": "function",
                    "name": "k-color-luminance",
                    "code": "\n    $red: k-list-nth( $_linear-channel-values, k-color-red( $color ) + 1 );\n    $green: k-list-nth( $_linear-channel-values, k-color-green( $color ) + 1 );\n    $blue: k-list-nth( $_linear-channel-values, k-color-blue( $color ) + 1 );\n\n    @return .2126 * $red + .7152 * $green + .0722 * $blue;\n",
                    "line": {
                        "start": 298,
                        "end": 304
                    }
                }
            },
            {
                "description": "Calculate the relative luminance for a color.\n",
                "context": {
                    "type": "function",
                    "name": "k-color-luminance",
                    "code": "\n    $red: k-list-nth( $_linear-channel-values, k-color-red( $color ) + 1 );\n    $green: k-list-nth( $_linear-channel-values, k-color-green( $color ) + 1 );\n    $blue: k-list-nth( $_linear-channel-values, k-color-blue( $color ) + 1 );\n\n    @return .2126 * $red + .7152 * $green + .0722 * $blue;\n",
                    "line": {
                        "start": 298,
                        "end": 304
                    }
                }
            },
            {
                "description": "Calculate the relative luminance for a color.\n",
                "context": {
                    "type": "function",
                    "name": "k-color-luminance",
                    "code": "\n    $red: k-list-nth( $_linear-channel-values, k-color-red( $color ) + 1 );\n    $green: k-list-nth( $_linear-channel-values, k-color-green( $color ) + 1 );\n    $blue: k-list-nth( $_linear-channel-values, k-color-blue( $color ) + 1 );\n\n    @return .2126 * $red + .7152 * $green + .0722 * $blue;\n",
                    "line": {
                        "start": 298,
                        "end": 304
                    }
                }
            },
            {
                "description": "Reverse the order of items in `$list`.\n",
                "context": {
                    "type": "function",
                    "name": "k-list-reverse",
                    "code": "\n    $result: ();\n\n    @if ($list) {\n        $len: k-list-length( $list );\n\n        @for $i from $len through 1 {\n            $result: k-list-append( $result, k-list-nth( $list, $i ) );\n        }\n\n        @return $result;\n    }\n\n    @warn \"No list passed.\";\n    @return $result;\n",
                    "line": {
                        "start": 88,
                        "end": 103
                    }
                }
            }
        ]
    },
    {
        "description": "Reverse the order of items in `$list`.\n",
        "commentRange": {
            "start": 82,
            "end": 87
        },
        "context": {
            "type": "function",
            "name": "k-list-reverse",
            "code": "\n    $result: ();\n\n    @if ($list) {\n        $len: k-list-length( $list );\n\n        @for $i from $len through 1 {\n            $result: k-list-append( $result, k-list-nth( $list, $i ) );\n        }\n\n        @return $result;\n    }\n\n    @warn \"No list passed.\";\n    @return $result;\n",
            "line": {
                "start": 88,
                "end": 103
            }
        },
        "parameter": [
            {
                "type": "List",
                "name": "list",
                "description": "The list to reverse."
            }
        ],
        "return": {
            "type": "List",
            "description": "The reversed list.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-list-reverse( ( \"foo\", \"bar\" ) ); // => \"bar, foo\"",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [
            {
                "type": "function",
                "name": "k-list-length"
            },
            {
                "type": "function",
                "name": "k-list-append"
            },
            {
                "type": "function",
                "name": "k-list-nth"
            }
        ],
        "file": {
            "path": "functions/_list.import.scss",
            "name": "_list.import.scss"
        }
    },
    {
        "description": "Returns the separator of `$list`.\n",
        "commentRange": {
            "start": 105,
            "end": 110
        },
        "context": {
            "type": "function",
            "name": "k-list-separator",
            "code": "\n    @return list-separator( $list );\n",
            "line": {
                "start": 111,
                "end": 113
            }
        },
        "parameter": [
            {
                "type": "List",
                "name": "list",
                "description": "The list to check."
            }
        ],
        "return": {
            "type": "String",
            "description": "The separator of `$list`.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-list-separator( ( \"foo\", \"bar\" ) ); // => \",\"",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_list.import.scss",
            "name": "_list.import.scss"
        }
    },
    {
        "description": "Returns a copy of `$list` with `$val` inserted at `$n`.\n",
        "commentRange": {
            "start": 115,
            "end": 122
        },
        "context": {
            "type": "function",
            "name": "k-list-set-nth",
            "code": "\n    @return set-nth( $list, $n, $value );\n",
            "line": {
                "start": 123,
                "end": 125
            }
        },
        "parameter": [
            {
                "type": "List",
                "name": "list",
                "description": "The list to process."
            },
            {
                "type": "Number",
                "name": "n",
                "description": "The index at which to insert `$val`."
            },
            {
                "type": "Any",
                "name": "val",
                "description": "The value to insert."
            }
        ],
        "return": {
            "type": "List",
            "description": "A copy of `$list` with `$val` inserted at `$n`.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-list-set-nth( ( \"foo\", \"bar\" ), 1, \"baz\" ); // => \"baz, bar\"",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_list.import.scss",
            "name": "_list.import.scss"
        }
    },
    {
        "description": "Combines two lists into a single list of two-item lists.\n",
        "commentRange": {
            "start": 127,
            "end": 133
        },
        "context": {
            "type": "function",
            "name": "k-list-zip",
            "code": "\n    @return zip( $lists... );\n",
            "line": {
                "start": 134,
                "end": 136
            }
        },
        "parameter": [
            {
                "type": "List",
                "name": "list1",
                "description": "The first list to combine."
            },
            {
                "type": "List",
                "name": "list2",
                "description": "The second list to combine."
            }
        ],
        "return": {
            "type": "List",
            "description": "A list of two-item lists.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-list-zip( ( \"foo\", \"bar\" ), ( \"baz\", \"qux\" ) ); // => ((foo, baz), (bar, qux))",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_list.import.scss",
            "name": "_list.import.scss"
        }
    },
    {
        "description": "Returns the value at `$key` in `$map`.\n",
        "commentRange": {
            "start": 1,
            "end": 6
        },
        "context": {
            "type": "function",
            "name": "k-map-get",
            "code": "\n    @each $key in $keys {\n        $map: map-get( $map, $key ); // stylelint-disable-line\n    }\n    @return $map;\n",
            "line": {
                "start": 7,
                "end": 12
            }
        },
        "parameter": [
            {
                "type": "Map",
                "name": "map",
                "description": "The map to get the value from."
            },
            {
                "type": "Any",
                "name": "key",
                "description": "The key to get the value for.\n"
            }
        ],
        "example": [
            {
                "type": "scss",
                "code": "@debug k-map-get( ( \"foo\": \"bar\" ), \"foo\" ); // => \"bar\"",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_map.import.scss",
            "name": "_map.import.scss"
        },
        "usedBy": [
            {
                "description": "Returns a deep-map with the keys and values from `$map` and `$args`.\n",
                "context": {
                    "type": "function",
                    "name": "k-map-deep-merge",
                    "code": "\n    $merged: ();\n  \n    @each $map in $maps {\n      @each $key, $val in $map {\n        @if (k-meta-type-of($val) == 'map') {\n          $current: k-map-get($merged, $key);\n          @if (k-meta-type-of($current) == 'map') {\n            $val: k-map-deep-merge($current, $val);\n            $map: k-map-merge(\n              $map,\n              (\n                $key: $val\n              )\n            );\n          }\n        }\n      }\n      $merged: k-map-merge($merged, $map);\n    }\n  \n    @return $merged;\n  ",
                    "line": {
                        "start": 56,
                        "end": 78
                    }
                }
            }
        ]
    },
    {
        "description": "Returns whether `$map` has a value at `$key`.\n",
        "commentRange": {
            "start": 14,
            "end": 21
        },
        "context": {
            "type": "function",
            "name": "k-map-has-key",
            "code": "\n    @return map-has-key( $map, $key );\n",
            "line": {
                "start": 22,
                "end": 24
            }
        },
        "parameter": [
            {
                "type": "Map",
                "name": "map",
                "description": "The map to check."
            },
            {
                "type": "Any",
                "name": "key",
                "description": "The key to check."
            }
        ],
        "return": {
            "type": "Boolean",
            "description": "Whether `$map` has a value at `$key`.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-map-has( ( \"foo\": \"bar\" ), \"foo\" ); // => true\n@debug k-map-has( ( \"foo\": \"bar\" ), \"bar\" ); // => false",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_map.import.scss",
            "name": "_map.import.scss"
        },
        "usedBy": [
            {
                "description": "Saves a data URI that can be used from the $_kendo-data-uris map instead of a file reference.\n",
                "context": {
                    "type": "mixin",
                    "name": "register-data-uri",
                    "code": "\n    @if ( k-map-has-key( $_kendo-data-uris, $name ) ) {\n        @warn \"Attempt to redefine data URI of file `#{$name}`.\";\n    }\n\n    $_kendo-data-uris: k-map-merge( $_kendo-data-uris, ( $name: $content ) ) !global;\n",
                    "line": {
                        "start": 10,
                        "end": 16
                    }
                }
            }
        ]
    },
    {
        "description": "Returns a comma separated list of the keys in `$map`.\n",
        "commentRange": {
            "start": 26,
            "end": 31
        },
        "context": {
            "type": "function",
            "name": "k-map-keys",
            "code": "\n    @return map-keys( $map );\n",
            "line": {
                "start": 32,
                "end": 34
            }
        },
        "parameter": [
            {
                "type": "Map",
                "name": "map",
                "description": "The map to get the keys from."
            }
        ],
        "return": {
            "type": "List",
            "description": "A comma separated list of the keys in `$map`.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-map-keys( ( \"foo\": \"bar\", \"baz\": \"qux\" ) ); // => \"foo, baz\"",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_map.import.scss",
            "name": "_map.import.scss"
        }
    },
    {
        "description": "Returns a map with the keys and values from `$map` and `$args`.\n",
        "commentRange": {
            "start": 36,
            "end": 42
        },
        "context": {
            "type": "function",
            "name": "k-map-merge",
            "code": "\n    @each $arg in $args {\n        $map: map-merge( $map, $arg ); // stylelint-disable-line\n    }\n    @return $map;\n",
            "line": {
                "start": 43,
                "end": 48
            }
        },
        "parameter": [
            {
                "type": "Map",
                "name": "map",
                "description": "The map to merge."
            },
            {
                "type": "Map",
                "name": "args",
                "description": "The map to merge into `$map`."
            }
        ],
        "return": {
            "type": "Map",
            "description": "A map with the keys and values from `$map` and `$args`.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-map-merge( ( \"foo\": \"bar\" ), ( \"baz\": \"qux\" ) ); // => ( \"foo\": \"bar\", \"baz\": \"qux\" )",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_map.import.scss",
            "name": "_map.import.scss"
        },
        "usedBy": [
            {
                "description": "Returns a deep-map with the keys and values from `$map` and `$args`.\n",
                "context": {
                    "type": "function",
                    "name": "k-map-deep-merge",
                    "code": "\n    $merged: ();\n  \n    @each $map in $maps {\n      @each $key, $val in $map {\n        @if (k-meta-type-of($val) == 'map') {\n          $current: k-map-get($merged, $key);\n          @if (k-meta-type-of($current) == 'map') {\n            $val: k-map-deep-merge($current, $val);\n            $map: k-map-merge(\n              $map,\n              (\n                $key: $val\n              )\n            );\n          }\n        }\n      }\n      $merged: k-map-merge($merged, $map);\n    }\n  \n    @return $merged;\n  ",
                    "line": {
                        "start": 56,
                        "end": 78
                    }
                }
            },
            {
                "description": "Returns a deep-map with the keys and values from `$map` and `$args`.\n",
                "context": {
                    "type": "function",
                    "name": "k-map-deep-merge",
                    "code": "\n    $merged: ();\n  \n    @each $map in $maps {\n      @each $key, $val in $map {\n        @if (k-meta-type-of($val) == 'map') {\n          $current: k-map-get($merged, $key);\n          @if (k-meta-type-of($current) == 'map') {\n            $val: k-map-deep-merge($current, $val);\n            $map: k-map-merge(\n              $map,\n              (\n                $key: $val\n              )\n            );\n          }\n        }\n      }\n      $merged: k-map-merge($merged, $map);\n    }\n  \n    @return $merged;\n  ",
                    "line": {
                        "start": 56,
                        "end": 78
                    }
                }
            },
            {
                "description": "Sets a single key and value in `$map`.\n",
                "context": {
                    "type": "function",
                    "name": "k-map-set",
                    "code": "\n    @return k-map-merge( $map, ( $key: $value ) );\n",
                    "line": {
                        "start": 99,
                        "end": 101
                    }
                }
            },
            {
                "description": "Saves a data URI that can be used from the $_kendo-data-uris map instead of a file reference.\n",
                "context": {
                    "type": "mixin",
                    "name": "register-data-uri",
                    "code": "\n    @if ( k-map-has-key( $_kendo-data-uris, $name ) ) {\n        @warn \"Attempt to redefine data URI of file `#{$name}`.\";\n    }\n\n    $_kendo-data-uris: k-map-merge( $_kendo-data-uris, ( $name: $content ) ) !global;\n",
                    "line": {
                        "start": 10,
                        "end": 16
                    }
                }
            }
        ]
    },
    {
        "description": "Returns a deep-map with the keys and values from `$map` and `$args`.\n",
        "commentRange": {
            "start": 50,
            "end": 55
        },
        "context": {
            "type": "function",
            "name": "k-map-deep-merge",
            "code": "\n    $merged: ();\n  \n    @each $map in $maps {\n      @each $key, $val in $map {\n        @if (k-meta-type-of($val) == 'map') {\n          $current: k-map-get($merged, $key);\n          @if (k-meta-type-of($current) == 'map') {\n            $val: k-map-deep-merge($current, $val);\n            $map: k-map-merge(\n              $map,\n              (\n                $key: $val\n              )\n            );\n          }\n        }\n      }\n      $merged: k-map-merge($merged, $map);\n    }\n  \n    @return $merged;\n  ",
            "line": {
                "start": 56,
                "end": 78
            }
        },
        "parameter": [
            {
                "type": "Map",
                "name": "maps",
                "description": "The maps to deep-merge."
            }
        ],
        "return": {
            "type": "Map",
            "description": "A map with the keys and values from `$map` and `$args`.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-map-deep-merge( ( \"foo\": (\"bar\": \"baz\", \"baz\": \"qux\" ) ), ( \"foo\": (\"bar\": \"foo\") ) ); // => ( \"foo\": (\"bar\": \"foo\", \"baz\": \"qux\" ))",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [
            {
                "type": "function",
                "name": "k-meta-type-of"
            },
            {
                "type": "function",
                "name": "k-map-get"
            },
            {
                "type": "function",
                "name": "k-meta-type-of"
            },
            {
                "type": "function",
                "name": "k-map-merge"
            },
            {
                "type": "function",
                "name": "k-map-merge"
            }
        ],
        "file": {
            "path": "functions/_map.import.scss",
            "name": "_map.import.scss"
        }
    },
    {
        "description": "Returns a map with the keys and values from `$map` except for `$keys`.\n",
        "commentRange": {
            "start": 80,
            "end": 86
        },
        "context": {
            "type": "function",
            "name": "k-map-remove",
            "code": "\n    @return map-remove( $map, $keys... );\n",
            "line": {
                "start": 87,
                "end": 89
            }
        },
        "parameter": [
            {
                "type": "Map",
                "name": "map",
                "description": "The map to remove keys from."
            },
            {
                "type": "Any",
                "name": "keys",
                "description": "The keys to remove from `$map`."
            }
        ],
        "return": {
            "type": "Map",
            "description": "A map with the keys and values from `$map` except for `$keys`.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-map-remove( ( \"foo\": \"bar\", \"baz\": \"qux\" ), \"foo\" ); // => ( \"baz\": \"qux\" )",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_map.import.scss",
            "name": "_map.import.scss"
        }
    },
    {
        "description": "Sets a single key and value in `$map`.\n",
        "commentRange": {
            "start": 91,
            "end": 98
        },
        "context": {
            "type": "function",
            "name": "k-map-set",
            "code": "\n    @return k-map-merge( $map, ( $key: $value ) );\n",
            "line": {
                "start": 99,
                "end": 101
            }
        },
        "parameter": [
            {
                "type": "Map",
                "name": "map",
                "description": "The map to set the value in."
            },
            {
                "type": "Any",
                "name": "key",
                "description": "The key to set the value for."
            },
            {
                "type": "Any",
                "name": "value",
                "description": "The value to set."
            }
        ],
        "return": {
            "type": "Map",
            "description": "A map with the key and value set.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-map-set( ( \"foo\": \"bar\" ), \"baz\", \"qux\" ); // => ( \"foo\": \"bar\", \"baz\": \"qux\" )",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [
            {
                "type": "function",
                "name": "k-map-merge"
            }
        ],
        "file": {
            "path": "functions/_map.import.scss",
            "name": "_map.import.scss"
        },
        "usedBy": [
            {
                "description": "Returns negative values of a number or numbers in a list.\n",
                "context": {
                    "type": "function",
                    "name": "k-map-negate",
                    "code": "\n    $_map-neg: ();\n\n    @if( k-meta-type-of($map) != map ) {\n        @error \"expected type of #{$map} is map, was #{k-meta-type-of($map)}\";\n    };\n    @each $key, $value in $map {\n        $_key-neg: \"-\" + $key;\n\n        @if( k-meta-type-of($value) == number and $value != 0) {\n            $_map-neg: k-map-set($_map-neg, $_key-neg, -1 * $value );\n        }\n    }\n\n    @return $_map-neg;\n\n",
                    "line": {
                        "start": 119,
                        "end": 135
                    }
                }
            }
        ]
    },
    {
        "description": "Returns a comma separated list of the values in `$map`.\n",
        "commentRange": {
            "start": 103,
            "end": 108
        },
        "context": {
            "type": "function",
            "name": "k-map-values",
            "code": "\n    @return map-values( $map );\n",
            "line": {
                "start": 109,
                "end": 111
            }
        },
        "parameter": [
            {
                "type": "Map",
                "name": "map",
                "description": "The map to get the values from."
            }
        ],
        "return": {
            "type": "List",
            "description": "A comma separated list of the values in `$map`.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-map-values( ( \"foo\": \"bar\", \"baz\": \"qux\" ) ); // => \"bar, qux\"",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_map.import.scss",
            "name": "_map.import.scss"
        }
    },
    {
        "description": "Returns negative values of a number or numbers in a list.\n",
        "commentRange": {
            "start": 113,
            "end": 118
        },
        "context": {
            "type": "function",
            "name": "k-map-negate",
            "code": "\n    $_map-neg: ();\n\n    @if( k-meta-type-of($map) != map ) {\n        @error \"expected type of #{$map} is map, was #{k-meta-type-of($map)}\";\n    };\n    @each $key, $value in $map {\n        $_key-neg: \"-\" + $key;\n\n        @if( k-meta-type-of($value) == number and $value != 0) {\n            $_map-neg: k-map-set($_map-neg, $_key-neg, -1 * $value );\n        }\n    }\n\n    @return $_map-neg;\n\n",
            "line": {
                "start": 119,
                "end": 135
            }
        },
        "parameter": [
            {
                "type": "Map",
                "name": "map",
                "description": "The map to get the values from."
            }
        ],
        "return": {
            "type": "Map",
            "description": "A comma separated list of the values in `$map`.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-map-negate( ( 0: 0, 1: 1px, 2: 2px ) ); // => (\"-1\": -1px, \"-2\": -2px)",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [
            {
                "type": "function",
                "name": "k-meta-type-of"
            },
            {
                "type": "function",
                "name": "k-meta-type-of"
            },
            {
                "type": "function",
                "name": "k-meta-type-of"
            },
            {
                "type": "function",
                "name": "k-map-set"
            }
        ],
        "throw": [
            "expected type of #{$map} is map, was #{k-meta-type-of($map)}"
        ],
        "file": {
            "path": "functions/_map.import.scss",
            "name": "_map.import.scss"
        }
    },
    {
        "description": "Returns the absolute value of a number.\n",
        "commentRange": {
            "start": 1,
            "end": 6
        },
        "context": {
            "type": "function",
            "name": "k-math-abs",
            "code": "\n    @return abs( $number );\n",
            "line": {
                "start": 7,
                "end": 9
            }
        },
        "parameter": [
            {
                "type": "Number",
                "name": "number",
                "description": "The number to get the absolute value of."
            }
        ],
        "return": {
            "type": "Number",
            "description": "The absolute value of `$number`.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-math-abs( -10 ); // => 10",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_math.import.scss",
            "name": "_math.import.scss"
        }
    },
    {
        "description": "Returns the smallest integer greater than or equal to a number.\n",
        "commentRange": {
            "start": 11,
            "end": 16
        },
        "context": {
            "type": "function",
            "name": "k-math-ceil",
            "code": "\n    @return ceil( $number );\n",
            "line": {
                "start": 17,
                "end": 19
            }
        },
        "parameter": [
            {
                "type": "Number",
                "name": "number",
                "description": "The number to get the ceiling of."
            }
        ],
        "return": {
            "type": "Number",
            "description": "The ceiling of `$number`.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-math-ceil( 10.1 ); // => 11",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_math.import.scss",
            "name": "_math.import.scss"
        }
    },
    {
        "description": "Returns the largest integer less than or equal to a number.\n",
        "commentRange": {
            "start": 21,
            "end": 26
        },
        "context": {
            "type": "function",
            "name": "k-math-floor",
            "code": "\n    @return floor( $number );\n",
            "line": {
                "start": 27,
                "end": 29
            }
        },
        "parameter": [
            {
                "type": "Number",
                "name": "number",
                "description": "The number to get the floor of."
            }
        ],
        "return": {
            "type": "Number",
            "description": "The floor of `$number`.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-math-floor( 10.9 ); // => 10",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_math.import.scss",
            "name": "_math.import.scss"
        }
    },
    {
        "description": "Restricts `$number` to the range between `$min` and `$max`. If `$number` is\nless than `$min`, `$min` is returned. If `$number` is greater than `$max`,\n`$max` is returned. Otherwise, `$number` is returned.\n",
        "commentRange": {
            "start": 31,
            "end": 40
        },
        "context": {
            "type": "function",
            "name": "k-math-clamp",
            "code": "\n    @return k-math-max( $min, k-math-min( $max, $number ) );\n",
            "line": {
                "start": 41,
                "end": 43
            }
        },
        "parameter": [
            {
                "type": "Number",
                "name": "number",
                "description": "The number to clamp."
            },
            {
                "type": "Number",
                "name": "min",
                "description": "The minimum value."
            },
            {
                "type": "Number",
                "name": "max",
                "description": "The maximum value."
            }
        ],
        "return": {
            "type": "Number",
            "description": "The clamped number.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-math-clamp( 10, 0, 5 ); // => 5",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [
            {
                "type": "function",
                "name": "k-math-max"
            },
            {
                "type": "function",
                "name": "k-math-min"
            }
        ],
        "file": {
            "path": "functions/_math.import.scss",
            "name": "_math.import.scss"
        }
    },
    {
        "description": "Returns whether two numbers have compatible units.\n",
        "commentRange": {
            "start": 45,
            "end": 52
        },
        "context": {
            "type": "function",
            "name": "k-math-compatible",
            "code": "\n    @return comparable( $a, $b );\n",
            "line": {
                "start": 53,
                "end": 55
            }
        },
        "parameter": [
            {
                "type": "Number",
                "name": "a",
                "description": "The first number."
            },
            {
                "type": "Number",
                "name": "b",
                "description": "The second number."
            }
        ],
        "return": {
            "type": "Boolean",
            "description": "Whether the numbers have compatible units.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-math-compatible( 10px, 10px ); // => true\n@debug k-math-compatible( 10px, 10em ); // => false",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_math.import.scss",
            "name": "_math.import.scss"
        }
    },
    {
        "description": "Returns the quotient of two numbers.\n",
        "commentRange": {
            "start": 57,
            "end": 64
        },
        "context": {
            "type": "function",
            "name": "k-math-div",
            "code": "\n    @return ( $a / $b );\n",
            "line": {
                "start": 65,
                "end": 67
            }
        },
        "parameter": [
            {
                "type": "Number",
                "name": "a",
                "description": "The dividend."
            },
            {
                "type": "Number",
                "name": "b",
                "description": "The divisor."
            }
        ],
        "return": {
            "type": "Number",
            "description": "The quotient of `$a` and `$b`.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-math-div( 10, 2 ); // => 5\n@debug k-math-div( 10px, 2 ); // => 5px",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_math.import.scss",
            "name": "_math.import.scss"
        },
        "usedBy": [
            {
                "description": "Calculates contrast ratio between two colors\n",
                "context": {
                    "type": "function",
                    "name": "k-color-contrast-ratio",
                    "code": "\n    $backLum: k-color-luminance( $background ) + .05;\n    $foreLum: k-color-luminance( $foreground ) + .05;\n\n    @return k-math-div( k-math-max( $backLum, $foreLum ), k-math-min( $backLum, $foreLum ) );\n",
                    "line": {
                        "start": 315,
                        "end": 320
                    }
                }
            },
            {
                "description": "Returns the result of raising `$x` to the power of `$n`.\n",
                "context": {
                    "type": "function",
                    "name": "k-math-pow",
                    "code": "\n    $ret: 1;\n\n    @if ( $n == 0 ) {\n        @return $ret;\n    }\n\n    @if ( $n > 0 ) {\n        @for $i from 1 through $n {\n            $ret: $ret * $x;\n        }\n        @return $ret;\n    }\n\n    @for $i from $n to 0 {\n        $ret: k-math-div( $ret, $x );\n    }\n    @return $ret;\n\n",
                    "line": {
                        "start": 145,
                        "end": 164
                    }
                }
            },
            {
                "description": "Returns the result of rounding `$number` to the nearest integer\nusing the specified `$precision`.\n",
                "context": {
                    "type": "function",
                    "name": "k-math-round",
                    "code": "\n\n    @if ( $precision == 0 ) {\n        @return round( $number );\n    }\n\n    $pow: k-math-pow( 10, $precision );\n\n    @return k-math-div( round( $number * $pow ), $pow );\n",
                    "line": {
                        "start": 188,
                        "end": 197
                    }
                }
            },
            {
                "description": "Remove the unit from a number.\n",
                "context": {
                    "type": "function",
                    "name": "k-math-strip-unit",
                    "code": "\n    @if ( k-meta-type-of( $number ) == \"number\" ) and not k-math-is-unitless( $number ) {\n        @return k-math-div( $number, 1 * k-math-unit( $number) );\n    }\n\n    @return $number;\n",
                    "line": {
                        "start": 215,
                        "end": 221
                    }
                }
            }
        ]
    },
    {
        "description": "Returns whether `$number` has no units.\n",
        "commentRange": {
            "start": 69,
            "end": 75
        },
        "context": {
            "type": "function",
            "name": "k-math-is-unitless",
            "code": "\n    @return unitless( $number );\n",
            "line": {
                "start": 76,
                "end": 78
            }
        },
        "parameter": [
            {
                "type": "Number",
                "name": "number",
                "description": "The number to check."
            }
        ],
        "return": {
            "type": "Boolean",
            "description": "Whether `$number` has no units.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-math-is-unitless( 10 ); // => true\n@debug k-math-is-unitless( 10px ); // => false",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_math.import.scss",
            "name": "_math.import.scss"
        },
        "usedBy": [
            {
                "description": "Remove the unit from a number.\n",
                "context": {
                    "type": "function",
                    "name": "k-math-strip-unit",
                    "code": "\n    @if ( k-meta-type-of( $number ) == \"number\" ) and not k-math-is-unitless( $number ) {\n        @return k-math-div( $number, 1 * k-math-unit( $number) );\n    }\n\n    @return $number;\n",
                    "line": {
                        "start": 215,
                        "end": 221
                    }
                }
            }
        ]
    },
    {
        "description": "Returns the larger of two numbers.\n",
        "commentRange": {
            "start": 80,
            "end": 87
        },
        "context": {
            "type": "function",
            "name": "k-math-max",
            "code": "\n    @return max( $a, $b );\n",
            "line": {
                "start": 88,
                "end": 90
            }
        },
        "parameter": [
            {
                "type": "Number",
                "name": "a",
                "description": "The first number."
            },
            {
                "type": "Number",
                "name": "b",
                "description": "The second number."
            }
        ],
        "return": {
            "type": "Number",
            "description": "The larger of `$a` and `$b`.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-math-max( 10, 20 ); // => 20\n@debug k-math-max( 10px, 20px ); // => 20px",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_math.import.scss",
            "name": "_math.import.scss"
        },
        "usedBy": [
            {
                "description": "Calculates contrast ratio between two colors\n",
                "context": {
                    "type": "function",
                    "name": "k-color-contrast-ratio",
                    "code": "\n    $backLum: k-color-luminance( $background ) + .05;\n    $foreLum: k-color-luminance( $foreground ) + .05;\n\n    @return k-math-div( k-math-max( $backLum, $foreLum ), k-math-min( $backLum, $foreLum ) );\n",
                    "line": {
                        "start": 315,
                        "end": 320
                    }
                }
            },
            {
                "description": "Restricts `$number` to the range between `$min` and `$max`. If `$number` is\nless than `$min`, `$min` is returned. If `$number` is greater than `$max`,\n`$max` is returned. Otherwise, `$number` is returned.\n",
                "context": {
                    "type": "function",
                    "name": "k-math-clamp",
                    "code": "\n    @return k-math-max( $min, k-math-min( $max, $number ) );\n",
                    "line": {
                        "start": 41,
                        "end": 43
                    }
                }
            }
        ]
    },
    {
        "description": "Returns the smaller of two numbers.\n",
        "commentRange": {
            "start": 92,
            "end": 99
        },
        "context": {
            "type": "function",
            "name": "k-math-min",
            "code": "\n    @return min( $a, $b );\n",
            "line": {
                "start": 100,
                "end": 102
            }
        },
        "parameter": [
            {
                "type": "Number",
                "name": "a",
                "description": "The first number."
            },
            {
                "type": "Number",
                "name": "b",
                "description": "The second number."
            }
        ],
        "return": {
            "type": "Number",
            "description": "The smaller of `$a` and `$b`.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-math-min( 10, 20 ); // => 10\n@debug k-math-min( 10px, 20px ); // => 10px",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_math.import.scss",
            "name": "_math.import.scss"
        },
        "usedBy": [
            {
                "description": "Calculates contrast ratio between two colors\n",
                "context": {
                    "type": "function",
                    "name": "k-color-contrast-ratio",
                    "code": "\n    $backLum: k-color-luminance( $background ) + .05;\n    $foreLum: k-color-luminance( $foreground ) + .05;\n\n    @return k-math-div( k-math-max( $backLum, $foreLum ), k-math-min( $backLum, $foreLum ) );\n",
                    "line": {
                        "start": 315,
                        "end": 320
                    }
                }
            },
            {
                "description": "Restricts `$number` to the range between `$min` and `$max`. If `$number` is\nless than `$min`, `$min` is returned. If `$number` is greater than `$max`,\n`$max` is returned. Otherwise, `$number` is returned.\n",
                "context": {
                    "type": "function",
                    "name": "k-math-clamp",
                    "code": "\n    @return k-math-max( $min, k-math-min( $max, $number ) );\n",
                    "line": {
                        "start": 41,
                        "end": 43
                    }
                }
            }
        ]
    },
    {
        "description": "Returns the remainder of two numbers.\n",
        "commentRange": {
            "start": 104,
            "end": 111
        },
        "context": {
            "type": "function",
            "name": "k-math-mod",
            "code": "\n    @return ( $a % $b );\n",
            "line": {
                "start": 112,
                "end": 114
            }
        },
        "parameter": [
            {
                "type": "Number",
                "name": "a",
                "description": "The dividend."
            },
            {
                "type": "Number",
                "name": "b",
                "description": "The divisor."
            }
        ],
        "return": {
            "type": "Number",
            "description": "The remainder of `$a` and `$b`.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-math-mod( 10, 3 ); // => 1\n@debug k-math-mod( 10px, 3 ); // => 1px",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_math.import.scss",
            "name": "_math.import.scss"
        }
    },
    {
        "description": "Returns the product of two numbers.\n",
        "commentRange": {
            "start": 116,
            "end": 123
        },
        "context": {
            "type": "function",
            "name": "k-math-mul",
            "code": "\n    @return ( $a * $b );\n",
            "line": {
                "start": 124,
                "end": 126
            }
        },
        "parameter": [
            {
                "type": "Number",
                "name": "a",
                "description": "The first number."
            },
            {
                "type": "Number",
                "name": "b",
                "description": "The second number."
            }
        ],
        "return": {
            "type": "Number",
            "description": "The product of `$a` and `$b`.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-math-mul( 10, 2 ); // => 20\n@debug k-math-mul( 10px, 2 ); // => 20px",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_math.import.scss",
            "name": "_math.import.scss"
        }
    },
    {
        "description": "Converts a unitless number to a percentage.\n",
        "commentRange": {
            "start": 128,
            "end": 133
        },
        "context": {
            "type": "function",
            "name": "k-math-percentage",
            "code": "\n    @return percentage( $number );\n",
            "line": {
                "start": 134,
                "end": 136
            }
        },
        "parameter": [
            {
                "type": "Number",
                "name": "number",
                "description": "The number to convert."
            }
        ],
        "return": {
            "type": "Number",
            "description": "The percentage.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-math-percentage( 0.5 ); // => 50%",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_math.import.scss",
            "name": "_math.import.scss"
        }
    },
    {
        "description": "Returns the result of raising `$x` to the power of `$n`.\n",
        "commentRange": {
            "start": 138,
            "end": 144
        },
        "context": {
            "type": "function",
            "name": "k-math-pow",
            "code": "\n    $ret: 1;\n\n    @if ( $n == 0 ) {\n        @return $ret;\n    }\n\n    @if ( $n > 0 ) {\n        @for $i from 1 through $n {\n            $ret: $ret * $x;\n        }\n        @return $ret;\n    }\n\n    @for $i from $n to 0 {\n        $ret: k-math-div( $ret, $x );\n    }\n    @return $ret;\n\n",
            "line": {
                "start": 145,
                "end": 164
            }
        },
        "parameter": [
            {
                "type": "Number",
                "name": "x",
                "description": "The base."
            },
            {
                "type": "Number",
                "name": "n",
                "description": "The exponent."
            }
        ],
        "return": {
            "type": "Number",
            "description": "The result of raising `$x` to the power of `$n`.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-math-pow( 2, 3 ); // => 8",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [
            {
                "type": "function",
                "name": "k-math-div"
            }
        ],
        "file": {
            "path": "functions/_math.import.scss",
            "name": "_math.import.scss"
        },
        "usedBy": [
            {
                "description": "Returns the result of rounding `$number` to the nearest integer\nusing the specified `$precision`.\n",
                "context": {
                    "type": "function",
                    "name": "k-math-round",
                    "code": "\n\n    @if ( $precision == 0 ) {\n        @return round( $number );\n    }\n\n    $pow: k-math-pow( 10, $precision );\n\n    @return k-math-div( round( $number * $pow ), $pow );\n",
                    "line": {
                        "start": 188,
                        "end": 197
                    }
                }
            }
        ]
    },
    {
        "description": "Returns a random number between 0 and 1.\n",
        "commentRange": {
            "start": 166,
            "end": 171
        },
        "context": {
            "type": "function",
            "name": "k-math-random",
            "code": "\n    @if ( $limit == null ) { // stylelint-disable-line\n        @return random();\n    }\n\n    @return random( $limit );\n",
            "line": {
                "start": 172,
                "end": 178
            }
        },
        "parameter": [
            {
                "type": "Number",
                "name": "limit",
                "description": "The upper limit of the random number."
            }
        ],
        "return": {
            "type": "Number",
            "description": "A random number between 0 and 1.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-math-random(); // => 0.123456789",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_math.import.scss",
            "name": "_math.import.scss"
        }
    },
    {
        "description": "Returns the result of rounding `$number` to the nearest integer\nusing the specified `$precision`.\n",
        "commentRange": {
            "start": 180,
            "end": 187
        },
        "context": {
            "type": "function",
            "name": "k-math-round",
            "code": "\n\n    @if ( $precision == 0 ) {\n        @return round( $number );\n    }\n\n    $pow: k-math-pow( 10, $precision );\n\n    @return k-math-div( round( $number * $pow ), $pow );\n",
            "line": {
                "start": 188,
                "end": 197
            }
        },
        "parameter": [
            {
                "type": "Number",
                "name": "number",
                "description": "The number to round."
            },
            {
                "type": "Number",
                "name": "precision",
                "description": "The number of decimal places to round to."
            }
        ],
        "return": {
            "type": "Number",
            "description": "The rounded number.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-math-round( 10.123456789, 3 ); // => 10.123",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [
            {
                "type": "function",
                "name": "k-math-pow"
            },
            {
                "type": "function",
                "name": "k-math-div"
            }
        ],
        "file": {
            "path": "functions/_math.import.scss",
            "name": "_math.import.scss"
        },
        "usedBy": [
            {
                "description": "Checks whether `$value` is a <integer> CSS data type.\n",
                "context": {
                    "type": "function",
                    "name": "k-meta-is-integer",
                    "code": "\n    @return k-meta-is-number( $value ) and k-math-round( $value ) == $value;\n",
                    "line": {
                        "start": 109,
                        "end": 111
                    }
                }
            }
        ]
    },
    {
        "description": "Returns a string representation of `$number`'s unit.\n",
        "commentRange": {
            "start": 199,
            "end": 204
        },
        "context": {
            "type": "function",
            "name": "k-math-unit",
            "code": "\n    @return unit( $number );\n",
            "line": {
                "start": 205,
                "end": 207
            }
        },
        "parameter": [
            {
                "type": "Number",
                "name": "number",
                "description": "The number to get the unit of."
            }
        ],
        "return": {
            "type": "String",
            "description": "The unit of `$number`.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-math-unit( 10px ); // => px",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_math.import.scss",
            "name": "_math.import.scss"
        },
        "usedBy": [
            {
                "description": "Remove the unit from a number.\n",
                "context": {
                    "type": "function",
                    "name": "k-math-strip-unit",
                    "code": "\n    @if ( k-meta-type-of( $number ) == \"number\" ) and not k-math-is-unitless( $number ) {\n        @return k-math-div( $number, 1 * k-math-unit( $number) );\n    }\n\n    @return $number;\n",
                    "line": {
                        "start": 215,
                        "end": 221
                    }
                }
            },
            {
                "description": "Checks whether `$value` is a <time> CSS data type.\n",
                "context": {
                    "type": "function",
                    "name": "k-meta-is-time",
                    "code": "\n    @return k-meta-is-number( $value ) and k-string-index( \"ms\" \"s\", k-math-unit( $value ) ) != null;\n",
                    "line": {
                        "start": 122,
                        "end": 124
                    }
                }
            },
            {
                "description": "Checks whether `$value` is a <angle> CSS data type.\n",
                "context": {
                    "type": "function",
                    "name": "k-meta-is-angle",
                    "code": "\n    @return k-meta-is-number( $value ) and k-string-index( \"deg\" \"rad\" \"grad\" \"turn\", k-math-unit( $value ) ) != null;\n",
                    "line": {
                        "start": 148,
                        "end": 150
                    }
                }
            },
            {
                "description": "Checks whether `$value` is a <frequency> CSS data type.\n",
                "context": {
                    "type": "function",
                    "name": "k-meta-is-frequency",
                    "code": "\n    @return k-meta-is-number( $value ) and k-string-index( \"Hz\" \"kHz\", k-math-unit( $value ) ) != null;\n",
                    "line": {
                        "start": 161,
                        "end": 163
                    }
                }
            },
            {
                "description": "Checks whether `$value` is a relative <length> CSS data type.\n",
                "context": {
                    "type": "function",
                    "name": "k-meta-is-relative-length",
                    "code": "\n    @return k-meta-is-number( $value ) and k-string-index( \"em\" \"ex\" \"ch\" \"rem\" \"vw\" \"vh\" \"vmin\" \"vmax\", k-math-unit( $value ) ) != null;\n",
                    "line": {
                        "start": 176,
                        "end": 178
                    }
                }
            },
            {
                "description": "Checks whether `$value` is an absolute <length> CSS data type.\n",
                "context": {
                    "type": "function",
                    "name": "k-meta-is-absolute-length",
                    "code": "\n    @return k-meta-is-number( $value ) and k-string-index( \"cm\" \"mm\" \"in\" \"px\" \"pt\" \"pc\", k-math-unit( $value ) ) != null;\n",
                    "line": {
                        "start": 189,
                        "end": 191
                    }
                }
            },
            {
                "description": "Checks whether `$value` is a <percentage> CSS data type.\n",
                "context": {
                    "type": "function",
                    "name": "k-meta-is-percentage",
                    "code": "\n    @return k-meta-is-number( $value ) and k-math-unit( $value ) == \"%\";\n",
                    "line": {
                        "start": 202,
                        "end": 204
                    }
                }
            },
            {
                "description": "Checks whether `$value` is a <resolution> CSS data type.\n",
                "context": {
                    "type": "function",
                    "name": "k-meta-is-resolution",
                    "code": "\n    @return k-meta-is-number( $value ) and k-string-index( \"dpi\" \"dpcm\" \"dppx\", k-math-unit( $value ) ) != null;\n",
                    "line": {
                        "start": 229,
                        "end": 231
                    }
                }
            }
        ]
    },
    {
        "description": "Remove the unit from a number.\n",
        "commentRange": {
            "start": 209,
            "end": 214
        },
        "context": {
            "type": "function",
            "name": "k-math-strip-unit",
            "code": "\n    @if ( k-meta-type-of( $number ) == \"number\" ) and not k-math-is-unitless( $number ) {\n        @return k-math-div( $number, 1 * k-math-unit( $number) );\n    }\n\n    @return $number;\n",
            "line": {
                "start": 215,
                "end": 221
            }
        },
        "parameter": [
            {
                "type": "Number",
                "name": "number",
                "description": "The number to remove the unit from."
            }
        ],
        "return": {
            "type": "Number",
            "description": "The unitless number.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-math-strip-unit( 10px ); // => 10",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [
            {
                "type": "function",
                "name": "k-meta-type-of"
            },
            {
                "type": "function",
                "name": "k-math-is-unitless"
            },
            {
                "type": "function",
                "name": "k-math-div"
            },
            {
                "type": "function",
                "name": "k-math-unit"
            }
        ],
        "file": {
            "path": "functions/_math.import.scss",
            "name": "_math.import.scss"
        }
    },
    {
        "description": "A wrapper around the `call()` function.\nCalls the function `$function` with the arguments `$args`.\n",
        "commentRange": {
            "start": 3,
            "end": 10
        },
        "context": {
            "type": "function",
            "name": "k-meta-call",
            "code": "\n    @return call( $function, $args... );\n",
            "line": {
                "start": 11,
                "end": 13
            }
        },
        "parameter": [
            {
                "type": "Function",
                "name": "function",
                "description": "The function to call."
            },
            {
                "type": "List",
                "name": "args",
                "description": "The arguments to pass to `$function`."
            }
        ],
        "return": {
            "type": "Any",
            "description": "The result of calling `$function` with `$args`.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-meta-call( k-meta-get-function( \"k-string-replace\" ), \"foo bar\", \"bar\", \"baz\" ); // => \"foo baz\"",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_meta.import.scss",
            "name": "_meta.import.scss"
        }
    },
    {
        "description": "A wrapper around the `function-exists()` function.\nReturns whether a function with the name `$name` exists.\n",
        "commentRange": {
            "start": 15,
            "end": 21
        },
        "context": {
            "type": "function",
            "name": "k-meta-function-exists",
            "code": "\n    @if $name == \"\" {\n        @return false;\n    }\n\n    @return function-exists( $name );\n",
            "line": {
                "start": 22,
                "end": 28
            }
        },
        "parameter": [
            {
                "type": "String",
                "name": "name",
                "description": "The name of the function to check."
            }
        ],
        "return": {
            "type": "Boolean",
            "description": "Whether a function with the name `$name` exists.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-meta-function-exists( \"k-string-replace\" ); // => true",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_meta.import.scss",
            "name": "_meta.import.scss"
        }
    },
    {
        "description": "A wrapper around the `get-function()` function.\nReturns the function with the name `$name`.\n",
        "commentRange": {
            "start": 30,
            "end": 38
        },
        "context": {
            "type": "function",
            "name": "k-meta-get-function",
            "code": "\n    @return get-function( $name, $args... );\n",
            "line": {
                "start": 39,
                "end": 41
            }
        },
        "parameter": [
            {
                "type": "String",
                "name": "name",
                "description": "The name of the function to get."
            },
            {
                "type": "Boolean",
                "name": "css",
                "description": "Whether to return the CSS representation of the function."
            },
            {
                "type": "Module",
                "name": "module",
                "description": "The module to get the function from."
            }
        ],
        "return": {
            "type": "Function",
            "description": "The function with the name `$name`.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-meta-get-function( \"k-string-replace\" ); // => Function",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_meta.import.scss",
            "name": "_meta.import.scss"
        }
    },
    {
        "description": "A wrapper around the `inspect()` function.\nReturns a string representation of `$value`.\n",
        "commentRange": {
            "start": 43,
            "end": 49
        },
        "context": {
            "type": "function",
            "name": "k-meta-inspect",
            "code": "\n    @return inspect( $value );\n",
            "line": {
                "start": 50,
                "end": 52
            }
        },
        "parameter": [
            {
                "type": "Any",
                "name": "value",
                "description": "The value to inspect."
            }
        ],
        "return": {
            "type": "String",
            "description": "A string representation of `$value`.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-meta-inspect( \"foo bar\" ); // => \"foo bar\"",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_meta.import.scss",
            "name": "_meta.import.scss"
        }
    },
    {
        "description": "A wrapper around the `keywords()` function.\nReturns a map of the keywords in `$args`.\n",
        "commentRange": {
            "start": 54,
            "end": 60
        },
        "context": {
            "type": "function",
            "name": "k-meta-keywords",
            "code": "\n    @return keywords( $args );\n",
            "line": {
                "start": 61,
                "end": 63
            }
        },
        "parameter": [
            {
                "type": "List",
                "name": "args",
                "description": "The arguments to process."
            }
        ],
        "return": {
            "type": "Map",
            "description": "A map of the keywords in `$args`.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-meta-keywords( ( \"foo\" \"bar\" \"baz\" \"qux\" ) ); // => ( \"foo\": \"bar\", \"baz\": \"qux\" )",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_meta.import.scss",
            "name": "_meta.import.scss"
        }
    },
    {
        "description": "A wrapper around the `type-of()` function.\nReturns the type of `$value`.\n",
        "commentRange": {
            "start": 65,
            "end": 71
        },
        "context": {
            "type": "function",
            "name": "k-meta-type-of",
            "code": "\n    @return type-of( $value );\n",
            "line": {
                "start": 72,
                "end": 74
            }
        },
        "parameter": [
            {
                "type": "Any",
                "name": "value",
                "description": "The value to get the type of."
            }
        ],
        "return": {
            "type": "String",
            "description": "The type of `$value`.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-meta-type-of( \"foo bar\" ); // => \"string\"",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_meta.import.scss",
            "name": "_meta.import.scss"
        },
        "usedBy": [
            {
                "description": "Returns a deep-map with the keys and values from `$map` and `$args`.\n",
                "context": {
                    "type": "function",
                    "name": "k-map-deep-merge",
                    "code": "\n    $merged: ();\n  \n    @each $map in $maps {\n      @each $key, $val in $map {\n        @if (k-meta-type-of($val) == 'map') {\n          $current: k-map-get($merged, $key);\n          @if (k-meta-type-of($current) == 'map') {\n            $val: k-map-deep-merge($current, $val);\n            $map: k-map-merge(\n              $map,\n              (\n                $key: $val\n              )\n            );\n          }\n        }\n      }\n      $merged: k-map-merge($merged, $map);\n    }\n  \n    @return $merged;\n  ",
                    "line": {
                        "start": 56,
                        "end": 78
                    }
                }
            },
            {
                "description": "Returns a deep-map with the keys and values from `$map` and `$args`.\n",
                "context": {
                    "type": "function",
                    "name": "k-map-deep-merge",
                    "code": "\n    $merged: ();\n  \n    @each $map in $maps {\n      @each $key, $val in $map {\n        @if (k-meta-type-of($val) == 'map') {\n          $current: k-map-get($merged, $key);\n          @if (k-meta-type-of($current) == 'map') {\n            $val: k-map-deep-merge($current, $val);\n            $map: k-map-merge(\n              $map,\n              (\n                $key: $val\n              )\n            );\n          }\n        }\n      }\n      $merged: k-map-merge($merged, $map);\n    }\n  \n    @return $merged;\n  ",
                    "line": {
                        "start": 56,
                        "end": 78
                    }
                }
            },
            {
                "description": "Returns negative values of a number or numbers in a list.\n",
                "context": {
                    "type": "function",
                    "name": "k-map-negate",
                    "code": "\n    $_map-neg: ();\n\n    @if( k-meta-type-of($map) != map ) {\n        @error \"expected type of #{$map} is map, was #{k-meta-type-of($map)}\";\n    };\n    @each $key, $value in $map {\n        $_key-neg: \"-\" + $key;\n\n        @if( k-meta-type-of($value) == number and $value != 0) {\n            $_map-neg: k-map-set($_map-neg, $_key-neg, -1 * $value );\n        }\n    }\n\n    @return $_map-neg;\n\n",
                    "line": {
                        "start": 119,
                        "end": 135
                    }
                }
            },
            {
                "description": "Returns negative values of a number or numbers in a list.\n",
                "context": {
                    "type": "function",
                    "name": "k-map-negate",
                    "code": "\n    $_map-neg: ();\n\n    @if( k-meta-type-of($map) != map ) {\n        @error \"expected type of #{$map} is map, was #{k-meta-type-of($map)}\";\n    };\n    @each $key, $value in $map {\n        $_key-neg: \"-\" + $key;\n\n        @if( k-meta-type-of($value) == number and $value != 0) {\n            $_map-neg: k-map-set($_map-neg, $_key-neg, -1 * $value );\n        }\n    }\n\n    @return $_map-neg;\n\n",
                    "line": {
                        "start": 119,
                        "end": 135
                    }
                }
            },
            {
                "description": "Returns negative values of a number or numbers in a list.\n",
                "context": {
                    "type": "function",
                    "name": "k-map-negate",
                    "code": "\n    $_map-neg: ();\n\n    @if( k-meta-type-of($map) != map ) {\n        @error \"expected type of #{$map} is map, was #{k-meta-type-of($map)}\";\n    };\n    @each $key, $value in $map {\n        $_key-neg: \"-\" + $key;\n\n        @if( k-meta-type-of($value) == number and $value != 0) {\n            $_map-neg: k-map-set($_map-neg, $_key-neg, -1 * $value );\n        }\n    }\n\n    @return $_map-neg;\n\n",
                    "line": {
                        "start": 119,
                        "end": 135
                    }
                }
            },
            {
                "description": "Remove the unit from a number.\n",
                "context": {
                    "type": "function",
                    "name": "k-math-strip-unit",
                    "code": "\n    @if ( k-meta-type-of( $number ) == \"number\" ) and not k-math-is-unitless( $number ) {\n        @return k-math-div( $number, 1 * k-math-unit( $number) );\n    }\n\n    @return $number;\n",
                    "line": {
                        "start": 215,
                        "end": 221
                    }
                }
            },
            {
                "description": "Checks whether `$value` is a <number> CSS data type.\n",
                "context": {
                    "type": "function",
                    "name": "k-meta-is-number",
                    "code": "\n    @return k-meta-type-of( $value ) == \"number\";\n",
                    "line": {
                        "start": 96,
                        "end": 98
                    }
                }
            },
            {
                "description": "Returns a copy of `$string` with all occurrences of `$search`\nreplaced by `$replace`.\n",
                "context": {
                    "type": "function",
                    "name": "k-string-replace",
                    "code": "\n    @if k-meta-type-of( $string ) == number {\n        $string: $string + \"\";\n    }\n\n    $index: k-string-index( $string, $search );\n\n    @if $index {\n        @return k-string-slice( $string, 1, $index - 1 ) + $replace + k-string-replace( k-string-slice( $string, $index + k-string-length( $search ) ), $search, $replace );\n    }\n\n    @return $string;\n",
                    "line": {
                        "start": 64,
                        "end": 76
                    }
                }
            }
        ]
    },
    {
        "description": "A wrapper around the `variable-exists()` function.\nReturns whether a variable with the name `$name` exists.\n",
        "commentRange": {
            "start": 76,
            "end": 82
        },
        "context": {
            "type": "function",
            "name": "k-meta-variable-exists",
            "code": "\n    @return variable-exists( $name );\n",
            "line": {
                "start": 83,
                "end": 85
            }
        },
        "parameter": [
            {
                "type": "String",
                "name": "name",
                "description": "The name of the variable to check."
            }
        ],
        "return": {
            "type": "Boolean",
            "description": "Whether a variable with the name `$name` exists.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-meta-variable-exists( \"foo\" ); // => true",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_meta.import.scss",
            "name": "_meta.import.scss"
        },
        "usedBy": [
            {
                "description": "Shades the color in light themes and tints it in dark themes\n",
                "context": {
                    "type": "function",
                    "name": "k-try-shade",
                    "code": "\n    $_dark-theme: if( k-meta-variable-exists( kendo-is-dark-theme ), $kendo-is-dark-theme, false );\n\n    @if $_dark-theme {\n        @return k-color-tint( $color, $level );\n    }\n\n    @return k-color-shade( $color, $level );\n",
                    "line": {
                        "start": 60,
                        "end": 68
                    }
                }
            },
            {
                "description": "Tints the color in light themes and shades it in dark themes\n",
                "context": {
                    "type": "function",
                    "name": "k-try-tint",
                    "code": "\n    $_dark-theme: if( k-meta-variable-exists( kendo-is-dark-theme ), $kendo-is-dark-theme, false );\n\n    @if $_dark-theme {\n        @return k-color-shade( $color, $level );\n    }\n\n    @return k-color-tint( $color, $level );\n",
                    "line": {
                        "start": 76,
                        "end": 84
                    }
                }
            },
            {
                "description": "Darkens the color in light themes and lightens it in dark themes\n",
                "context": {
                    "type": "function",
                    "name": "k-try-darken",
                    "code": "\n    $_dark-theme: if( k-meta-variable-exists( kendo-is-dark-theme ), $kendo-is-dark-theme, false );\n\n    @if $_dark-theme {\n        @return k-color-lighten( $color, $amount );\n    }\n    @return k-color-darken( $color, $amount );\n",
                    "line": {
                        "start": 92,
                        "end": 99
                    }
                }
            },
            {
                "description": "Lightens the color in light themes and darkens it in dark themes\n",
                "context": {
                    "type": "function",
                    "name": "k-try-lighten",
                    "code": "\n    $_dark-theme: if( k-meta-variable-exists( kendo-is-dark-theme ), $kendo-is-dark-theme, false );\n\n    @if $_dark-theme {\n        @return k-color-darken( $color, $amount );\n    }\n    @return k-color-lighten( $color, $amount );\n",
                    "line": {
                        "start": 107,
                        "end": 114
                    }
                }
            }
        ]
    },
    {
        "description": "Checks whether `$value` is a <number> CSS data type.\n",
        "commentRange": {
            "start": 87,
            "end": 95
        },
        "context": {
            "type": "function",
            "name": "k-meta-is-number",
            "code": "\n    @return k-meta-type-of( $value ) == \"number\";\n",
            "line": {
                "start": 96,
                "end": 98
            }
        },
        "parameter": [
            {
                "type": "Any",
                "name": "value",
                "description": "The value to check."
            }
        ],
        "return": {
            "type": "Boolean",
            "description": "Whether `$value` is a number.\n"
        },
        "link": [
            {
                "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/number",
                "caption": ""
            }
        ],
        "example": [
            {
                "type": "scss",
                "code": "@debug k-meta-is-number( 1 ); // => true\n@debug k-meta-is-number( \"foo\" ); // => false",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [
            {
                "type": "function",
                "name": "k-meta-type-of"
            }
        ],
        "file": {
            "path": "functions/_meta.import.scss",
            "name": "_meta.import.scss"
        },
        "usedBy": [
            {
                "description": "Checks whether `$value` is a <integer> CSS data type.\n",
                "context": {
                    "type": "function",
                    "name": "k-meta-is-integer",
                    "code": "\n    @return k-meta-is-number( $value ) and k-math-round( $value ) == $value;\n",
                    "line": {
                        "start": 109,
                        "end": 111
                    }
                }
            },
            {
                "description": "Checks whether `$value` is a <time> CSS data type.\n",
                "context": {
                    "type": "function",
                    "name": "k-meta-is-time",
                    "code": "\n    @return k-meta-is-number( $value ) and k-string-index( \"ms\" \"s\", k-math-unit( $value ) ) != null;\n",
                    "line": {
                        "start": 122,
                        "end": 124
                    }
                }
            },
            {
                "description": "Checks whether `$value` is a <angle> CSS data type.\n",
                "context": {
                    "type": "function",
                    "name": "k-meta-is-angle",
                    "code": "\n    @return k-meta-is-number( $value ) and k-string-index( \"deg\" \"rad\" \"grad\" \"turn\", k-math-unit( $value ) ) != null;\n",
                    "line": {
                        "start": 148,
                        "end": 150
                    }
                }
            },
            {
                "description": "Checks whether `$value` is a <frequency> CSS data type.\n",
                "context": {
                    "type": "function",
                    "name": "k-meta-is-frequency",
                    "code": "\n    @return k-meta-is-number( $value ) and k-string-index( \"Hz\" \"kHz\", k-math-unit( $value ) ) != null;\n",
                    "line": {
                        "start": 161,
                        "end": 163
                    }
                }
            },
            {
                "description": "Checks whether `$value` is a relative <length> CSS data type.\n",
                "context": {
                    "type": "function",
                    "name": "k-meta-is-relative-length",
                    "code": "\n    @return k-meta-is-number( $value ) and k-string-index( \"em\" \"ex\" \"ch\" \"rem\" \"vw\" \"vh\" \"vmin\" \"vmax\", k-math-unit( $value ) ) != null;\n",
                    "line": {
                        "start": 176,
                        "end": 178
                    }
                }
            },
            {
                "description": "Checks whether `$value` is an absolute <length> CSS data type.\n",
                "context": {
                    "type": "function",
                    "name": "k-meta-is-absolute-length",
                    "code": "\n    @return k-meta-is-number( $value ) and k-string-index( \"cm\" \"mm\" \"in\" \"px\" \"pt\" \"pc\", k-math-unit( $value ) ) != null;\n",
                    "line": {
                        "start": 189,
                        "end": 191
                    }
                }
            },
            {
                "description": "Checks whether `$value` is a <percentage> CSS data type.\n",
                "context": {
                    "type": "function",
                    "name": "k-meta-is-percentage",
                    "code": "\n    @return k-meta-is-number( $value ) and k-math-unit( $value ) == \"%\";\n",
                    "line": {
                        "start": 202,
                        "end": 204
                    }
                }
            },
            {
                "description": "Checks whether `$value` is a <resolution> CSS data type.\n",
                "context": {
                    "type": "function",
                    "name": "k-meta-is-resolution",
                    "code": "\n    @return k-meta-is-number( $value ) and k-string-index( \"dpi\" \"dpcm\" \"dppx\", k-math-unit( $value ) ) != null;\n",
                    "line": {
                        "start": 229,
                        "end": 231
                    }
                }
            }
        ]
    },
    {
        "description": "Checks whether `$value` is a <integer> CSS data type.\n",
        "commentRange": {
            "start": 100,
            "end": 108
        },
        "context": {
            "type": "function",
            "name": "k-meta-is-integer",
            "code": "\n    @return k-meta-is-number( $value ) and k-math-round( $value ) == $value;\n",
            "line": {
                "start": 109,
                "end": 111
            }
        },
        "parameter": [
            {
                "type": "Any",
                "name": "value",
                "description": "The value to check."
            }
        ],
        "return": {
            "type": "Boolean",
            "description": "Whether `$value` is a integer.\n"
        },
        "link": [
            {
                "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/integer",
                "caption": ""
            }
        ],
        "example": [
            {
                "type": "scss",
                "code": "@debug k-meta-is-integer( 1 ); // => true\n@debug k-meta-is-integer( 1.5 ); // => false",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [
            {
                "type": "function",
                "name": "k-meta-is-number"
            },
            {
                "type": "function",
                "name": "k-math-round"
            }
        ],
        "file": {
            "path": "functions/_meta.import.scss",
            "name": "_meta.import.scss"
        }
    },
    {
        "description": "Checks whether `$value` is a <time> CSS data type.\n",
        "commentRange": {
            "start": 113,
            "end": 121
        },
        "context": {
            "type": "function",
            "name": "k-meta-is-time",
            "code": "\n    @return k-meta-is-number( $value ) and k-string-index( \"ms\" \"s\", k-math-unit( $value ) ) != null;\n",
            "line": {
                "start": 122,
                "end": 124
            }
        },
        "parameter": [
            {
                "type": "Any",
                "name": "value",
                "description": "The value to check."
            }
        ],
        "return": {
            "type": "Boolean",
            "description": "Whether `$value` is a time.\n"
        },
        "link": [
            {
                "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/time",
                "caption": ""
            }
        ],
        "example": [
            {
                "type": "scss",
                "code": "@debug k-meta-is-time( 1s ); // => true\n@debug k-meta-is-time( 1 ); // => false",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [
            {
                "type": "function",
                "name": "k-meta-is-number"
            },
            {
                "type": "function",
                "name": "k-string-index"
            },
            {
                "type": "function",
                "name": "k-math-unit"
            }
        ],
        "file": {
            "path": "functions/_meta.import.scss",
            "name": "_meta.import.scss"
        },
        "usedBy": [
            {
                "description": "Checks whether `$value` is a valid duration period.\n",
                "context": {
                    "type": "function",
                    "name": "k-meta-is-duration",
                    "code": "\n    @return k-meta-is-time( $value );\n",
                    "line": {
                        "start": 135,
                        "end": 137
                    }
                }
            }
        ]
    },
    {
        "description": "Checks whether `$value` is a valid duration period.\n",
        "commentRange": {
            "start": 126,
            "end": 134
        },
        "context": {
            "type": "function",
            "name": "k-meta-is-duration",
            "code": "\n    @return k-meta-is-time( $value );\n",
            "line": {
                "start": 135,
                "end": 137
            }
        },
        "parameter": [
            {
                "type": "Any",
                "name": "value",
                "description": "The value to check."
            }
        ],
        "return": {
            "type": "Boolean",
            "description": "Whether `$value` is a duration.\n"
        },
        "link": [
            {
                "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/time",
                "caption": ""
            }
        ],
        "example": [
            {
                "type": "scss",
                "code": "@debug k-meta-is-duration( 1s ); // => true\n@debug k-meta-is-duration( 1 ); // => false",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [
            {
                "type": "function",
                "name": "k-meta-is-time"
            }
        ],
        "file": {
            "path": "functions/_meta.import.scss",
            "name": "_meta.import.scss"
        }
    },
    {
        "description": "Checks whether `$value` is a <angle> CSS data type.\n",
        "commentRange": {
            "start": 139,
            "end": 147
        },
        "context": {
            "type": "function",
            "name": "k-meta-is-angle",
            "code": "\n    @return k-meta-is-number( $value ) and k-string-index( \"deg\" \"rad\" \"grad\" \"turn\", k-math-unit( $value ) ) != null;\n",
            "line": {
                "start": 148,
                "end": 150
            }
        },
        "parameter": [
            {
                "type": "Any",
                "name": "value",
                "description": "The value to check."
            }
        ],
        "return": {
            "type": "Boolean",
            "description": "Whether `$value` is a angle.\n"
        },
        "link": [
            {
                "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/angle",
                "caption": ""
            }
        ],
        "example": [
            {
                "type": "scss",
                "code": "@debug k-meta-is-angle( 1deg ); // => true\n@debug k-meta-is-angle( 1 ); // => false",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [
            {
                "type": "function",
                "name": "k-meta-is-number"
            },
            {
                "type": "function",
                "name": "k-string-index"
            },
            {
                "type": "function",
                "name": "k-math-unit"
            }
        ],
        "file": {
            "path": "functions/_meta.import.scss",
            "name": "_meta.import.scss"
        }
    },
    {
        "description": "Checks whether `$value` is a <frequency> CSS data type.\n",
        "commentRange": {
            "start": 152,
            "end": 160
        },
        "context": {
            "type": "function",
            "name": "k-meta-is-frequency",
            "code": "\n    @return k-meta-is-number( $value ) and k-string-index( \"Hz\" \"kHz\", k-math-unit( $value ) ) != null;\n",
            "line": {
                "start": 161,
                "end": 163
            }
        },
        "parameter": [
            {
                "type": "Any",
                "name": "value",
                "description": "The value to check."
            }
        ],
        "return": {
            "type": "Boolean",
            "description": "Whether `$value` is a frequency.\n"
        },
        "link": [
            {
                "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/frequency",
                "caption": ""
            }
        ],
        "example": [
            {
                "type": "scss",
                "code": "@debug k-meta-is-frequency( 1Hz ); // => true\n@debug k-meta-is-frequency( 1 ); // => false",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [
            {
                "type": "function",
                "name": "k-meta-is-number"
            },
            {
                "type": "function",
                "name": "k-string-index"
            },
            {
                "type": "function",
                "name": "k-math-unit"
            }
        ],
        "file": {
            "path": "functions/_meta.import.scss",
            "name": "_meta.import.scss"
        }
    },
    {
        "description": "Checks whether `$value` is a relative <length> CSS data type.\n",
        "commentRange": {
            "start": 165,
            "end": 175
        },
        "context": {
            "type": "function",
            "name": "k-meta-is-relative-length",
            "code": "\n    @return k-meta-is-number( $value ) and k-string-index( \"em\" \"ex\" \"ch\" \"rem\" \"vw\" \"vh\" \"vmin\" \"vmax\", k-math-unit( $value ) ) != null;\n",
            "line": {
                "start": 176,
                "end": 178
            }
        },
        "parameter": [
            {
                "type": "Any",
                "name": "value",
                "description": "The value to check."
            }
        ],
        "return": {
            "type": "Boolean",
            "description": "Whether `$value` is a relative length.\n"
        },
        "link": [
            {
                "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/length#relative_length_units_based_on_font",
                "caption": ""
            },
            {
                "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/length#relative_length_units_based_on_viewport",
                "caption": ""
            }
        ],
        "example": [
            {
                "type": "scss",
                "code": "@debug k-meta-is-relative-length( 1em ); // => true\n@debug k-meta-is-relative-length( 1ch ); // => true\n@debug k-meta-is-relative-length( 1 ); // => false",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [
            {
                "type": "function",
                "name": "k-meta-is-number"
            },
            {
                "type": "function",
                "name": "k-string-index"
            },
            {
                "type": "function",
                "name": "k-math-unit"
            }
        ],
        "file": {
            "path": "functions/_meta.import.scss",
            "name": "_meta.import.scss"
        },
        "usedBy": [
            {
                "description": "Checks whether `$value` is a <length> CSS data type.\n",
                "context": {
                    "type": "function",
                    "name": "k-meta-is-length",
                    "code": "\n    @return k-meta-is-relative-length( $value ) or k-meta-is-absolute-length( $value );\n",
                    "line": {
                        "start": 216,
                        "end": 218
                    }
                }
            }
        ]
    },
    {
        "description": "Checks whether `$value` is an absolute <length> CSS data type.\n",
        "commentRange": {
            "start": 180,
            "end": 188
        },
        "context": {
            "type": "function",
            "name": "k-meta-is-absolute-length",
            "code": "\n    @return k-meta-is-number( $value ) and k-string-index( \"cm\" \"mm\" \"in\" \"px\" \"pt\" \"pc\", k-math-unit( $value ) ) != null;\n",
            "line": {
                "start": 189,
                "end": 191
            }
        },
        "parameter": [
            {
                "type": "Any",
                "name": "value",
                "description": "The value to check."
            }
        ],
        "return": {
            "type": "Boolean",
            "description": "Whether `$value` is an absolute length.\n"
        },
        "link": [
            {
                "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/length#absolute_length_units",
                "caption": ""
            }
        ],
        "example": [
            {
                "type": "scss",
                "code": "@debug k-meta-is-absolute-length( 1cm ); // => true\n@debug k-meta-is-absolute-length( 1 ); // => false",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [
            {
                "type": "function",
                "name": "k-meta-is-number"
            },
            {
                "type": "function",
                "name": "k-string-index"
            },
            {
                "type": "function",
                "name": "k-math-unit"
            }
        ],
        "file": {
            "path": "functions/_meta.import.scss",
            "name": "_meta.import.scss"
        },
        "usedBy": [
            {
                "description": "Checks whether `$value` is a <length> CSS data type.\n",
                "context": {
                    "type": "function",
                    "name": "k-meta-is-length",
                    "code": "\n    @return k-meta-is-relative-length( $value ) or k-meta-is-absolute-length( $value );\n",
                    "line": {
                        "start": 216,
                        "end": 218
                    }
                }
            }
        ]
    },
    {
        "description": "Checks whether `$value` is a <percentage> CSS data type.\n",
        "commentRange": {
            "start": 193,
            "end": 201
        },
        "context": {
            "type": "function",
            "name": "k-meta-is-percentage",
            "code": "\n    @return k-meta-is-number( $value ) and k-math-unit( $value ) == \"%\";\n",
            "line": {
                "start": 202,
                "end": 204
            }
        },
        "parameter": [
            {
                "type": "Any",
                "name": "value",
                "description": "The value to check."
            }
        ],
        "return": {
            "type": "Boolean",
            "description": "Whether `$value` is a percentage.\n"
        },
        "link": [
            {
                "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/percentage",
                "caption": ""
            }
        ],
        "example": [
            {
                "type": "scss",
                "code": "@debug k-meta-is-percentage( 1% ); // => true\n@debug k-meta-is-percentage( 1 ); // => false",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [
            {
                "type": "function",
                "name": "k-meta-is-number"
            },
            {
                "type": "function",
                "name": "k-math-unit"
            }
        ],
        "file": {
            "path": "functions/_meta.import.scss",
            "name": "_meta.import.scss"
        },
        "usedBy": [
            {
                "description": "Checks whether `$value` is a <position> CSS data type.\n",
                "context": {
                    "type": "function",
                    "name": "k-meta-is-position",
                    "code": "\n    @return k-meta-is-length( $value ) or k-meta-is-percentage( $value ) or k-string-index( \"top\" \"right\" \"bottom\" \"left\" \"center\", $value ) != null;\n",
                    "line": {
                        "start": 241,
                        "end": 243
                    }
                }
            }
        ]
    },
    {
        "description": "Checks whether `$value` is a <length> CSS data type.\n",
        "commentRange": {
            "start": 206,
            "end": 215
        },
        "context": {
            "type": "function",
            "name": "k-meta-is-length",
            "code": "\n    @return k-meta-is-relative-length( $value ) or k-meta-is-absolute-length( $value );\n",
            "line": {
                "start": 216,
                "end": 218
            }
        },
        "parameter": [
            {
                "type": "Any",
                "name": "value",
                "description": "The value to check."
            }
        ],
        "return": {
            "type": "Boolean",
            "description": "Whether `$value` is a length.\n"
        },
        "link": [
            {
                "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/length",
                "caption": ""
            }
        ],
        "example": [
            {
                "type": "scss",
                "code": "@debug k-meta-is-length( 1em ); // => true\n@debug k-meta-is-length( 1cm ); // => true\n@debug k-meta-is-length( 1 ); // => false",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [
            {
                "type": "function",
                "name": "k-meta-is-relative-length"
            },
            {
                "type": "function",
                "name": "k-meta-is-absolute-length"
            }
        ],
        "file": {
            "path": "functions/_meta.import.scss",
            "name": "_meta.import.scss"
        },
        "usedBy": [
            {
                "description": "Checks whether `$value` is a <position> CSS data type.\n",
                "context": {
                    "type": "function",
                    "name": "k-meta-is-position",
                    "code": "\n    @return k-meta-is-length( $value ) or k-meta-is-percentage( $value ) or k-string-index( \"top\" \"right\" \"bottom\" \"left\" \"center\", $value ) != null;\n",
                    "line": {
                        "start": 241,
                        "end": 243
                    }
                }
            }
        ]
    },
    {
        "description": "Checks whether `$value` is a <resolution> CSS data type.\n",
        "commentRange": {
            "start": 220,
            "end": 228
        },
        "context": {
            "type": "function",
            "name": "k-meta-is-resolution",
            "code": "\n    @return k-meta-is-number( $value ) and k-string-index( \"dpi\" \"dpcm\" \"dppx\", k-math-unit( $value ) ) != null;\n",
            "line": {
                "start": 229,
                "end": 231
            }
        },
        "parameter": [
            {
                "type": "Any",
                "name": "value",
                "description": "The value to check."
            }
        ],
        "return": {
            "type": "Boolean",
            "description": "Whether `$value` is a resolution.\n"
        },
        "link": [
            {
                "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/resolution",
                "caption": ""
            }
        ],
        "example": [
            {
                "type": "scss",
                "code": "@debug k-meta-is-resolution( 1dpi ); // => true\n@debug k-meta-is-resolution( 1 ); // => false",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [
            {
                "type": "function",
                "name": "k-meta-is-number"
            },
            {
                "type": "function",
                "name": "k-string-index"
            },
            {
                "type": "function",
                "name": "k-math-unit"
            }
        ],
        "file": {
            "path": "functions/_meta.import.scss",
            "name": "_meta.import.scss"
        }
    },
    {
        "description": "Checks whether `$value` is a <position> CSS data type.\n",
        "commentRange": {
            "start": 233,
            "end": 240
        },
        "context": {
            "type": "function",
            "name": "k-meta-is-position",
            "code": "\n    @return k-meta-is-length( $value ) or k-meta-is-percentage( $value ) or k-string-index( \"top\" \"right\" \"bottom\" \"left\" \"center\", $value ) != null;\n",
            "line": {
                "start": 241,
                "end": 243
            }
        },
        "parameter": [
            {
                "type": "Any",
                "name": "value",
                "description": "The value to check."
            }
        ],
        "return": {
            "type": "Boolean",
            "description": "Whether `$value` is a position.\n"
        },
        "link": [
            {
                "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/position",
                "caption": ""
            }
        ],
        "example": [
            {
                "type": "scss",
                "code": "@debug k-meta-is-position( center ); // => true",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [
            {
                "type": "function",
                "name": "k-meta-is-length"
            },
            {
                "type": "function",
                "name": "k-meta-is-percentage"
            },
            {
                "type": "function",
                "name": "k-string-index"
            }
        ],
        "file": {
            "path": "functions/_meta.import.scss",
            "name": "_meta.import.scss"
        }
    },
    {
        "description": "Returns the first index of `$substring` in `$string`, or `null` if `$string` doesn’t contain `$substring`.\n",
        "commentRange": {
            "start": 10,
            "end": 16
        },
        "context": {
            "type": "function",
            "name": "k-string-index",
            "code": "\n    @return str-index( $string, $substring );\n",
            "line": {
                "start": 17,
                "end": 19
            }
        },
        "parameter": [
            {
                "type": "String",
                "name": "string",
                "description": "The string to process."
            },
            {
                "type": "String",
                "name": "substring",
                "description": "The substring to look for."
            }
        ],
        "return": {
            "type": "Number",
            "description": "The first index of `$substring` in `$string`, or `null` if `$string` doesn’t contain `$substring`.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-string-index( \"foo bar\", \"bar\" ); // => 5",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_string.import.scss",
            "name": "_string.import.scss"
        },
        "usedBy": [
            {
                "description": "Escapes SVG characters in a string\n",
                "context": {
                    "type": "function",
                    "name": "k-escape-svg",
                    "code": "\n    @if k-string-index($string, \"data:image/svg+xml\") {\n        @each $char, $encoded in $_kendo-svg-escaped-characters {\n            // Do not escape the url brackets\n            @if k-string-index($string, \"url(\") == 1 {\n                $string: url(\"#{k-string-replace(k-string-slice($string, 6, -3), $char, $encoded)}\");\n            } @else {\n                $string: k-string-replace($string, $char, $encoded);\n            }\n        }\n    }\n\n    @return $string;\n",
                    "line": {
                        "start": 15,
                        "end": 28
                    }
                }
            },
            {
                "description": "Escapes SVG characters in a string\n",
                "context": {
                    "type": "function",
                    "name": "k-escape-svg",
                    "code": "\n    @if k-string-index($string, \"data:image/svg+xml\") {\n        @each $char, $encoded in $_kendo-svg-escaped-characters {\n            // Do not escape the url brackets\n            @if k-string-index($string, \"url(\") == 1 {\n                $string: url(\"#{k-string-replace(k-string-slice($string, 6, -3), $char, $encoded)}\");\n            } @else {\n                $string: k-string-replace($string, $char, $encoded);\n            }\n        }\n    }\n\n    @return $string;\n",
                    "line": {
                        "start": 15,
                        "end": 28
                    }
                }
            },
            {
                "description": "Checks whether `$value` is a <time> CSS data type.\n",
                "context": {
                    "type": "function",
                    "name": "k-meta-is-time",
                    "code": "\n    @return k-meta-is-number( $value ) and k-string-index( \"ms\" \"s\", k-math-unit( $value ) ) != null;\n",
                    "line": {
                        "start": 122,
                        "end": 124
                    }
                }
            },
            {
                "description": "Checks whether `$value` is a <angle> CSS data type.\n",
                "context": {
                    "type": "function",
                    "name": "k-meta-is-angle",
                    "code": "\n    @return k-meta-is-number( $value ) and k-string-index( \"deg\" \"rad\" \"grad\" \"turn\", k-math-unit( $value ) ) != null;\n",
                    "line": {
                        "start": 148,
                        "end": 150
                    }
                }
            },
            {
                "description": "Checks whether `$value` is a <frequency> CSS data type.\n",
                "context": {
                    "type": "function",
                    "name": "k-meta-is-frequency",
                    "code": "\n    @return k-meta-is-number( $value ) and k-string-index( \"Hz\" \"kHz\", k-math-unit( $value ) ) != null;\n",
                    "line": {
                        "start": 161,
                        "end": 163
                    }
                }
            },
            {
                "description": "Checks whether `$value` is a relative <length> CSS data type.\n",
                "context": {
                    "type": "function",
                    "name": "k-meta-is-relative-length",
                    "code": "\n    @return k-meta-is-number( $value ) and k-string-index( \"em\" \"ex\" \"ch\" \"rem\" \"vw\" \"vh\" \"vmin\" \"vmax\", k-math-unit( $value ) ) != null;\n",
                    "line": {
                        "start": 176,
                        "end": 178
                    }
                }
            },
            {
                "description": "Checks whether `$value` is an absolute <length> CSS data type.\n",
                "context": {
                    "type": "function",
                    "name": "k-meta-is-absolute-length",
                    "code": "\n    @return k-meta-is-number( $value ) and k-string-index( \"cm\" \"mm\" \"in\" \"px\" \"pt\" \"pc\", k-math-unit( $value ) ) != null;\n",
                    "line": {
                        "start": 189,
                        "end": 191
                    }
                }
            },
            {
                "description": "Checks whether `$value` is a <resolution> CSS data type.\n",
                "context": {
                    "type": "function",
                    "name": "k-meta-is-resolution",
                    "code": "\n    @return k-meta-is-number( $value ) and k-string-index( \"dpi\" \"dpcm\" \"dppx\", k-math-unit( $value ) ) != null;\n",
                    "line": {
                        "start": 229,
                        "end": 231
                    }
                }
            },
            {
                "description": "Checks whether `$value` is a <position> CSS data type.\n",
                "context": {
                    "type": "function",
                    "name": "k-meta-is-position",
                    "code": "\n    @return k-meta-is-length( $value ) or k-meta-is-percentage( $value ) or k-string-index( \"top\" \"right\" \"bottom\" \"left\" \"center\", $value ) != null;\n",
                    "line": {
                        "start": 241,
                        "end": 243
                    }
                }
            },
            {
                "description": "Returns a copy of `$string` with all occurrences of `$search`\nreplaced by `$replace`.\n",
                "context": {
                    "type": "function",
                    "name": "k-string-replace",
                    "code": "\n    @if k-meta-type-of( $string ) == number {\n        $string: $string + \"\";\n    }\n\n    $index: k-string-index( $string, $search );\n\n    @if $index {\n        @return k-string-slice( $string, 1, $index - 1 ) + $replace + k-string-replace( k-string-slice( $string, $index + k-string-length( $search ) ), $search, $replace );\n    }\n\n    @return $string;\n",
                    "line": {
                        "start": 64,
                        "end": 76
                    }
                }
            }
        ]
    },
    {
        "description": "Returns a copy of `$string` with `$insert` inserted at `$index`.\n",
        "commentRange": {
            "start": 21,
            "end": 28
        },
        "context": {
            "type": "function",
            "name": "k-string-insert",
            "code": "\n    @return str-insert( $string, $insert, $index );\n",
            "line": {
                "start": 29,
                "end": 31
            }
        },
        "parameter": [
            {
                "type": "String",
                "name": "string",
                "description": "The string to process."
            },
            {
                "type": "String",
                "name": "insert",
                "description": "The string to insert."
            },
            {
                "type": "Number",
                "name": "index",
                "description": "The index at which to insert `$insert`."
            }
        ],
        "return": {
            "type": "String",
            "description": "The resulting string.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-string-insert( \"foo bar\", \"baz\", 5 ); // => \"foo baz bar\"",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_string.import.scss",
            "name": "_string.import.scss"
        }
    },
    {
        "description": "Returns the length of `$string`.\n",
        "commentRange": {
            "start": 33,
            "end": 38
        },
        "context": {
            "type": "function",
            "name": "k-string-length",
            "code": "\n    @return str-length( $string );\n",
            "line": {
                "start": 39,
                "end": 41
            }
        },
        "parameter": [
            {
                "type": "String",
                "name": "string",
                "description": "The string to process."
            }
        ],
        "return": {
            "type": "Number",
            "description": "The length of `$string`.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-string-length( \"foo bar\" ); // => 7",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_string.import.scss",
            "name": "_string.import.scss"
        },
        "usedBy": [
            {
                "description": "Returns a copy of `$string` with all occurrences of `$search`\nreplaced by `$replace`.\n",
                "context": {
                    "type": "function",
                    "name": "k-string-replace",
                    "code": "\n    @if k-meta-type-of( $string ) == number {\n        $string: $string + \"\";\n    }\n\n    $index: k-string-index( $string, $search );\n\n    @if $index {\n        @return k-string-slice( $string, 1, $index - 1 ) + $replace + k-string-replace( k-string-slice( $string, $index + k-string-length( $search ) ), $search, $replace );\n    }\n\n    @return $string;\n",
                    "line": {
                        "start": 64,
                        "end": 76
                    }
                }
            }
        ]
    },
    {
        "description": "Returns a copy of `$string` with quotes added.\n",
        "commentRange": {
            "start": 43,
            "end": 48
        },
        "context": {
            "type": "function",
            "name": "k-string-quote",
            "code": "\n    @return quote( $string );\n",
            "line": {
                "start": 49,
                "end": 51
            }
        },
        "parameter": [
            {
                "type": "String",
                "name": "string",
                "description": "The string to process."
            }
        ],
        "return": {
            "type": "String",
            "description": "The resulting string.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-string-quote( \"foo bar\" ); // => \"foo bar\"",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_string.import.scss",
            "name": "_string.import.scss"
        }
    },
    {
        "description": "Returns a copy of `$string` with all occurrences of `$search`\nreplaced by `$replace`.\n",
        "commentRange": {
            "start": 53,
            "end": 63
        },
        "context": {
            "type": "function",
            "name": "k-string-replace",
            "code": "\n    @if k-meta-type-of( $string ) == number {\n        $string: $string + \"\";\n    }\n\n    $index: k-string-index( $string, $search );\n\n    @if $index {\n        @return k-string-slice( $string, 1, $index - 1 ) + $replace + k-string-replace( k-string-slice( $string, $index + k-string-length( $search ) ), $search, $replace );\n    }\n\n    @return $string;\n",
            "line": {
                "start": 64,
                "end": 76
            }
        },
        "parameter": [
            {
                "type": "String",
                "name": "string",
                "description": "The string to process."
            },
            {
                "type": "String",
                "name": "search",
                "description": "The substring to look for."
            },
            {
                "type": "String",
                "name": "replace",
                "description": "The replacement string."
            }
        ],
        "return": {
            "type": "String",
            "description": "The resulting string.\n"
        },
        "link": [
            {
                "url": "https://www.sassmeister.com/gist/1b4f2da5527830088e4d",
                "caption": ""
            }
        ],
        "example": [
            {
                "type": "scss",
                "code": "@debug k-string-replace( \"foo bar\", \"bar\", \"baz\" ); // => \"foo baz\"",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [
            {
                "type": "function",
                "name": "k-meta-type-of"
            },
            {
                "type": "function",
                "name": "k-string-index"
            },
            {
                "type": "function",
                "name": "k-string-slice"
            },
            {
                "type": "function",
                "name": "k-string-slice"
            },
            {
                "type": "function",
                "name": "k-string-length"
            }
        ],
        "file": {
            "path": "functions/_string.import.scss",
            "name": "_string.import.scss"
        },
        "usedBy": [
            {
                "description": "Escapes SVG characters in a string\n",
                "context": {
                    "type": "function",
                    "name": "k-escape-svg",
                    "code": "\n    @if k-string-index($string, \"data:image/svg+xml\") {\n        @each $char, $encoded in $_kendo-svg-escaped-characters {\n            // Do not escape the url brackets\n            @if k-string-index($string, \"url(\") == 1 {\n                $string: url(\"#{k-string-replace(k-string-slice($string, 6, -3), $char, $encoded)}\");\n            } @else {\n                $string: k-string-replace($string, $char, $encoded);\n            }\n        }\n    }\n\n    @return $string;\n",
                    "line": {
                        "start": 15,
                        "end": 28
                    }
                }
            },
            {
                "description": "Escapes SVG characters in a string\n",
                "context": {
                    "type": "function",
                    "name": "k-escape-svg",
                    "code": "\n    @if k-string-index($string, \"data:image/svg+xml\") {\n        @each $char, $encoded in $_kendo-svg-escaped-characters {\n            // Do not escape the url brackets\n            @if k-string-index($string, \"url(\") == 1 {\n                $string: url(\"#{k-string-replace(k-string-slice($string, 6, -3), $char, $encoded)}\");\n            } @else {\n                $string: k-string-replace($string, $char, $encoded);\n            }\n        }\n    }\n\n    @return $string;\n",
                    "line": {
                        "start": 15,
                        "end": 28
                    }
                }
            },
            {
                "description": "Escapes special characters in a class name\n",
                "context": {
                    "type": "function",
                    "name": "k-escape-class-name",
                    "code": "\n    $_text: $text;\n\n    @each $char, $rep in $_kendo-escape-class-name {\n        $_text: k-string-replace( $_text, k-string-unquote( $char ), k-string-unquote( $rep ) );\n    }\n\n    @return $_text;\n",
                    "line": {
                        "start": 40,
                        "end": 48
                    }
                }
            }
        ]
    },
    {
        "description": "Returns a substring of `$string` starting at `$start-at` and ending at `$end-at`.\n",
        "commentRange": {
            "start": 78,
            "end": 85
        },
        "context": {
            "type": "function",
            "name": "k-string-slice",
            "code": "\n    @return str-slice( $string, $start-at, $end-at );\n",
            "line": {
                "start": 86,
                "end": 88
            }
        },
        "parameter": [
            {
                "type": "String",
                "name": "string",
                "description": "The string to process."
            },
            {
                "type": "Number",
                "name": "start-at",
                "description": "The index at which to start the substring."
            },
            {
                "type": "Number",
                "name": "end-at",
                "description": "The index at which to end the substring."
            }
        ],
        "return": {
            "type": "String",
            "description": "The resulting string.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-string-slice( \"foo bar\", 5 ); // => \"bar\"",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_string.import.scss",
            "name": "_string.import.scss"
        },
        "usedBy": [
            {
                "description": "Escapes SVG characters in a string\n",
                "context": {
                    "type": "function",
                    "name": "k-escape-svg",
                    "code": "\n    @if k-string-index($string, \"data:image/svg+xml\") {\n        @each $char, $encoded in $_kendo-svg-escaped-characters {\n            // Do not escape the url brackets\n            @if k-string-index($string, \"url(\") == 1 {\n                $string: url(\"#{k-string-replace(k-string-slice($string, 6, -3), $char, $encoded)}\");\n            } @else {\n                $string: k-string-replace($string, $char, $encoded);\n            }\n        }\n    }\n\n    @return $string;\n",
                    "line": {
                        "start": 15,
                        "end": 28
                    }
                }
            },
            {
                "description": "Returns a copy of `$string` with all occurrences of `$search`\nreplaced by `$replace`.\n",
                "context": {
                    "type": "function",
                    "name": "k-string-replace",
                    "code": "\n    @if k-meta-type-of( $string ) == number {\n        $string: $string + \"\";\n    }\n\n    $index: k-string-index( $string, $search );\n\n    @if $index {\n        @return k-string-slice( $string, 1, $index - 1 ) + $replace + k-string-replace( k-string-slice( $string, $index + k-string-length( $search ) ), $search, $replace );\n    }\n\n    @return $string;\n",
                    "line": {
                        "start": 64,
                        "end": 76
                    }
                }
            },
            {
                "description": "Returns a copy of `$string` with all occurrences of `$search`\nreplaced by `$replace`.\n",
                "context": {
                    "type": "function",
                    "name": "k-string-replace",
                    "code": "\n    @if k-meta-type-of( $string ) == number {\n        $string: $string + \"\";\n    }\n\n    $index: k-string-index( $string, $search );\n\n    @if $index {\n        @return k-string-slice( $string, 1, $index - 1 ) + $replace + k-string-replace( k-string-slice( $string, $index + k-string-length( $search ) ), $search, $replace );\n    }\n\n    @return $string;\n",
                    "line": {
                        "start": 64,
                        "end": 76
                    }
                }
            }
        ]
    },
    {
        "description": "Returns a copy of `$string` with all uppercase letters converted to lowercase.\n",
        "commentRange": {
            "start": 90,
            "end": 95
        },
        "context": {
            "type": "function",
            "name": "k-string-to-lower-case",
            "code": "\n    @return to-lower-case( $string );\n",
            "line": {
                "start": 96,
                "end": 98
            }
        },
        "parameter": [
            {
                "type": "String",
                "name": "string",
                "description": "The string to process."
            }
        ],
        "return": {
            "type": "String",
            "description": "The resulting string.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-string-to-lower-case( \"FOO BAR\" ); // => \"foo bar\"",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_string.import.scss",
            "name": "_string.import.scss"
        }
    },
    {
        "description": "Returns a copy of `$string` with all lowercase letters converted to uppercase.\n",
        "commentRange": {
            "start": 100,
            "end": 105
        },
        "context": {
            "type": "function",
            "name": "k-string-to-upper-case",
            "code": "\n    @return to-upper-case( $string );\n",
            "line": {
                "start": 106,
                "end": 108
            }
        },
        "parameter": [
            {
                "type": "String",
                "name": "string",
                "description": "The string to process."
            }
        ],
        "return": {
            "type": "String",
            "description": "The resulting string.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-string-to-upper-case( \"foo bar\" ); // => \"FOO BAR\"",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_string.import.scss",
            "name": "_string.import.scss"
        }
    },
    {
        "description": "Returns a unique identifier.\n",
        "commentRange": {
            "start": 110,
            "end": 114
        },
        "context": {
            "type": "function",
            "name": "k-string-unique-id",
            "code": "\n    @return unique-id();\n",
            "line": {
                "start": 115,
                "end": 117
            }
        },
        "return": {
            "type": "String",
            "description": "The unique identifier.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-string-unique-id(); // => UNIQUE_ID",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_string.import.scss",
            "name": "_string.import.scss"
        }
    },
    {
        "description": "Returns a copy of `$string` with quotes removed.\n",
        "commentRange": {
            "start": 119,
            "end": 124
        },
        "context": {
            "type": "function",
            "name": "k-string-unquote",
            "code": "\n    @return unquote( $string );\n",
            "line": {
                "start": 125,
                "end": 127
            }
        },
        "parameter": [
            {
                "type": "String",
                "name": "string",
                "description": "The string to process."
            }
        ],
        "return": {
            "type": "String",
            "description": "The resulting string.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-string-unquote( \"foo bar\" ); // => foo bar",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_string.import.scss",
            "name": "_string.import.scss"
        },
        "usedBy": [
            {
                "description": "Escapes special characters in a class name\n",
                "context": {
                    "type": "function",
                    "name": "k-escape-class-name",
                    "code": "\n    $_text: $text;\n\n    @each $char, $rep in $_kendo-escape-class-name {\n        $_text: k-string-replace( $_text, k-string-unquote( $char ), k-string-unquote( $rep ) );\n    }\n\n    @return $_text;\n",
                    "line": {
                        "start": 40,
                        "end": 48
                    }
                }
            },
            {
                "description": "Escapes special characters in a class name\n",
                "context": {
                    "type": "function",
                    "name": "k-escape-class-name",
                    "code": "\n    $_text: $text;\n\n    @each $char, $rep in $_kendo-escape-class-name {\n        $_text: k-string-replace( $_text, k-string-unquote( $char ), k-string-unquote( $rep ) );\n    }\n\n    @return $_text;\n",
                    "line": {
                        "start": 40,
                        "end": 48
                    }
                }
            }
        ]
    },
    {
        "description": "A list of files converted to data URIs\n",
        "commentRange": {
            "start": 1,
            "end": 2
        },
        "context": {
            "type": "variable",
            "name": "_kendo-data-uris",
            "value": "()",
            "scope": "default",
            "line": {
                "start": 3,
                "end": 3
            }
        },
        "access": "private",
        "group": [
            "undefined"
        ],
        "file": {
            "path": "mixins/_data-uri.scss",
            "name": "_data-uri.scss"
        },
        "usedBy": [
            {
                "description": "Saves a data URI that can be used from the $_kendo-data-uris map instead of a file reference.\n",
                "context": {
                    "type": "mixin",
                    "name": "register-data-uri",
                    "code": "\n    @if ( k-map-has-key( $_kendo-data-uris, $name ) ) {\n        @warn \"Attempt to redefine data URI of file `#{$name}`.\";\n    }\n\n    $_kendo-data-uris: k-map-merge( $_kendo-data-uris, ( $name: $content ) ) !global;\n",
                    "line": {
                        "start": 10,
                        "end": 16
                    }
                }
            }
        ]
    },
    {
        "description": "Saves a data URI that can be used from the $_kendo-data-uris map instead of a file reference.\n",
        "commentRange": {
            "start": 5,
            "end": 9
        },
        "context": {
            "type": "mixin",
            "name": "register-data-uri",
            "code": "\n    @if ( k-map-has-key( $_kendo-data-uris, $name ) ) {\n        @warn \"Attempt to redefine data URI of file `#{$name}`.\";\n    }\n\n    $_kendo-data-uris: k-map-merge( $_kendo-data-uris, ( $name: $content ) ) !global;\n",
            "line": {
                "start": 10,
                "end": 16
            }
        },
        "access": "private",
        "parameter": [
            {
                "type": "String",
                "name": "name",
                "description": "The name of the resource."
            },
            {
                "type": "String",
                "name": "content",
                "description": "The data URI of the resource."
            }
        ],
        "require": [
            {
                "type": "function",
                "name": "k-map-has-key"
            },
            {
                "type": "function",
                "name": "k-map-merge"
            },
            {
                "type": "variable",
                "name": "_kendo-data-uris",
                "external": false
            }
        ],
        "group": [
            "undefined"
        ],
        "file": {
            "path": "mixins/_data-uri.scss",
            "name": "_data-uri.scss"
        }
    },
    {
        "description": "A list of exported modules.\n",
        "commentRange": {
            "start": 1,
            "end": 2
        },
        "context": {
            "type": "variable",
            "name": "_kendo-imported-modules",
            "value": "()",
            "scope": "default",
            "line": {
                "start": 3,
                "end": 3
            }
        },
        "access": "private",
        "group": [
            "undefined"
        ],
        "file": {
            "path": "mixins/_import-once.scss",
            "name": "_import-once.scss"
        },
        "usedBy": [
            {
                "description": "Outputs a module once, no matter how many times it is included.\n",
                "context": {
                    "type": "mixin",
                    "name": "exports",
                    "code": "\n    @if (k-list-index( $_kendo-imported-modules, $name ) == null) { // stylelint-disable-line\n        $_kendo-imported-modules: k-list-append( $_kendo-imported-modules, $name ) !global;\n        @content;\n    }\n",
                    "line": {
                        "start": 9,
                        "end": 14
                    }
                }
            }
        ]
    },
    {
        "description": "Outputs a module once, no matter how many times it is included.\n",
        "commentRange": {
            "start": 5,
            "end": 8
        },
        "context": {
            "type": "mixin",
            "name": "exports",
            "code": "\n    @if (k-list-index( $_kendo-imported-modules, $name ) == null) { // stylelint-disable-line\n        $_kendo-imported-modules: k-list-append( $_kendo-imported-modules, $name ) !global;\n        @content;\n    }\n",
            "line": {
                "start": 9,
                "end": 14
            }
        },
        "access": "public",
        "parameter": [
            {
                "type": "String",
                "name": "name",
                "description": "The name of the exported module."
            }
        ],
        "require": [
            {
                "type": "function",
                "name": "k-list-index"
            },
            {
                "type": "function",
                "name": "k-list-append"
            },
            {
                "type": "variable",
                "name": "_kendo-imported-modules",
                "external": false
            }
        ],
        "content": "",
        "group": [
            "undefined"
        ],
        "file": {
            "path": "mixins/_import-once.scss",
            "name": "_import-once.scss"
        }
    },
    {
        "description": "This class could be assigned to elements which should be visually hidden, but remain accessible for screen readers.\n    @name .k-sr-only\n    @group accessibility\n",
        "commentRange": {
            "start": 3,
            "end": 5
        },
        "context": {
            "type": "css",
            "name": ".k-sr-only",
            "value": "position: absolute;\n        left: -1px;\n        width: 1px;\n        height: 1px;\n        overflow: hidden;",
            "line": {
                "start": 6,
                "end": 15
            }
        },
        "access": "public",
        "group": [
            "undefined"
        ],
        "file": {
            "path": "styles/_accessibility.scss",
            "name": "_accessibility.scss"
        }
    }
]